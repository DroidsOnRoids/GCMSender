/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h:
       |    1|/*	CFString.h
       |    2|	Copyright (c) 1998-2015, Apple Inc. All rights reserved.
       |    3|*/
       |    4|
       |    5|#if !defined(__COREFOUNDATION_CFSTRING__)
       |    6|#define __COREFOUNDATION_CFSTRING__ 1
       |    7|
       |    8|#include <CoreFoundation/CFBase.h>
       |    9|#include <CoreFoundation/CFArray.h>
       |   10|#include <CoreFoundation/CFData.h>
       |   11|#include <CoreFoundation/CFDictionary.h>
       |   12|#include <CoreFoundation/CFCharacterSet.h>
       |   13|#include <CoreFoundation/CFLocale.h>
       |   14|#include <stdarg.h>
       |   15|
       |   16|CF_IMPLICIT_BRIDGING_ENABLED
       |   17|CF_EXTERN_C_BEGIN
       |   18|
       |   19|/*
       |   20|Please note: CFStrings are conceptually an array of Unicode characters.
       |   21|However, in general, how a CFString stores this array is an implementation
       |   22|detail. For instance, CFString might choose to use an array of 8-bit characters
       |   23|to store its contents, or it might use multiple blocks of memory, or whatever.
       |   24|This is especially true since CFString is toll-free bridged with NSString, enabling
       |   25|any NSString instance to be used as a CFString. Furthermore, the implementation
       |   26|may change depending on the default system encoding, the user's language, 
       |   27|or even a release or update of the OS.
       |   28|
       |   29|What this means is that you should use the following advanced functions with care:
       |   30|
       |   31|  CFStringGetPascalStringPtr()
       |   32|  CFStringGetCStringPtr()
       |   33|  CFStringGetCharactersPtr()
       |   34|
       |   35|These functions are provided for optimization only. They will either return the desired
       |   36|pointer quickly, in constant time, or they return NULL. They might choose to return NULL
       |   37|for many reasons; for instance it's possible that for users running in different
       |   38|languages these sometimes return NULL; or in a future OS release the first two might
       |   39|switch to always returning NULL. Never observing NULL returns in your usages of these
       |   40|functions does not mean they won't ever return NULL. (But note the CFStringGetCharactersPtr()
       |   41|exception mentioned further below.)
       |   42|
       |   43|In your usages of these functions, if you get a NULL return, use the non-Ptr version
       |   44|of the functions as shown in this example:
       |   45|
       |   46|  char buffer[BUFSIZE];
       |   47|  const char *ptr = CFStringGetCStringPtr(str, encoding);
       |   48|  if (ptr == NULL) {
       |   49|      if (CFStringGetCString(str, buffer, BUFSIZE, encoding)) ptr = buffer;
       |   50|  }
       |   51|
       |   52|Note that CFStringGetCString() or CFStringGetPascalString() calls might still fail --- but
       |   53|that will happen in two circumstances only: The conversion from the UniChar contents of CFString
       |   54|to the specified encoding fails, or the buffer is too small. If they fail, that means
       |   55|the conversion was not possible.
       |   56|
       |   57|If you need a copy of the buffer in the above example, you might consider simply calling
       |   58|CFStringGetCString() in all cases --- CFStringGetCStringPtr() is simply an optimization.
       |   59|
       |   60|In addition, the following functions, which create immutable CFStrings from developer
       |   61|supplied buffers without copying the buffers, might have to actually copy
       |   62|under certain circumstances (If they do copy, the buffer will be dealt with by the
       |   63|"contentsDeallocator" argument.):
       |   64|
       |   65|  CFStringCreateWithPascalStringNoCopy()
       |   66|  CFStringCreateWithCStringNoCopy()
       |   67|  CFStringCreateWithCharactersNoCopy()
       |   68|
       |   69|You should of course never depend on the backing store of these CFStrings being
       |   70|what you provided, and in other no circumstance should you change the contents
       |   71|of that buffer (given that would break the invariant about the CFString being immutable).
       |   72|
       |   73|Having said all this, there are actually ways to create a CFString where the backing store
       |   74|is external, and can be manipulated by the developer or CFString itself:
       |   75|
       |   76|  CFStringCreateMutableWithExternalCharactersNoCopy()
       |   77|  CFStringSetExternalCharactersNoCopy()
       |   78|
       |   79|A "contentsAllocator" is used to realloc or free the backing store by CFString.
       |   80|kCFAllocatorNull can be provided to assure CFString will never realloc or free the buffer.
       |   81|Developer can call CFStringSetExternalCharactersNoCopy() to update
       |   82|CFString's idea of what's going on, if the buffer is changed externally. In these
       |   83|strings, CFStringGetCharactersPtr() is guaranteed to return the external buffer.
       |   84|
       |   85|These functions are here to allow wrapping a buffer of UniChar characters in a CFString,
       |   86|allowing the buffer to passed into CFString functions and also manipulated via CFString
       |   87|mutation functions. In general, developers should not use this technique for all strings,
       |   88|as it prevents CFString from using certain optimizations.
       |   89|*/
       |   90|
       |   91|/* Identifier for character encoding; the values are the same as Text Encoding Converter TextEncoding.
       |   92|*/
       |   93|typedef UInt32 CFStringEncoding;
       |   94|
       |   95|/* Platform-independent built-in encodings; always available on all platforms.
       |   96|   Call CFStringGetSystemEncoding() to get the default system encoding.
       |   97|*/
      0|   98|#define kCFStringEncodingInvalidId (0xffffffffU)
       |   99|typedef CF_ENUM(CFStringEncoding, CFStringBuiltInEncodings) {
       |  100|    kCFStringEncodingMacRoman = 0,
       |  101|    kCFStringEncodingWindowsLatin1 = 0x0500, /* ANSI codepage 1252 */
       |  102|    kCFStringEncodingISOLatin1 = 0x0201, /* ISO 8859-1 */
       |  103|    kCFStringEncodingNextStepLatin = 0x0B01, /* NextStep encoding*/
       |  104|    kCFStringEncodingASCII = 0x0600, /* 0..127 (in creating CFString, values greater than 0x7F are treated as corresponding Unicode value) */
       |  105|    kCFStringEncodingUnicode = 0x0100, /* kTextEncodingUnicodeDefault  + kTextEncodingDefaultFormat (aka kUnicode16BitFormat) */
       |  106|    kCFStringEncodingUTF8 = 0x08000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF8Format */
       |  107|    kCFStringEncodingNonLossyASCII = 0x0BFF, /* 7bit Unicode variants used by Cocoa & Java */
       |  108|
       |  109|    kCFStringEncodingUTF16 = 0x0100, /* kTextEncodingUnicodeDefault + kUnicodeUTF16Format (alias of kCFStringEncodingUnicode) */
       |  110|    kCFStringEncodingUTF16BE = 0x10000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF16BEFormat */
  ------------------
  | __64-[UIWebView(AFNetworking) loadRequest:progress:success:failure:]_block_invoke:
  |      0|   95|/* Platform-independent built-in encodings; always available on all platforms.
  |      0|   96|   Call CFStringGetSystemEncoding() to get the default system encoding.
  |      0|   97|*/
  |      0|   98|#define kCFStringEncodingInvalidId (0xffffffffU)
  |      0|   99|typedef CF_ENUM(CFStringEncoding, CFStringBuiltInEncodings) {
  |      0|  100|    kCFStringEncodingMacRoman = 0,
  |      0|  101|    kCFStringEncodingWindowsLatin1 = 0x0500, /* ANSI codepage 1252 */
  |      0|  102|    kCFStringEncodingISOLatin1 = 0x0201, /* ISO 8859-1 */
  |      0|  103|    kCFStringEncodingNextStepLatin = 0x0B01, /* NextStep encoding*/
  |      0|  104|    kCFStringEncodingASCII = 0x0600, /* 0..127 (in creating CFString, values greater than 0x7F are treated as corresponding Unicode value) */
  |      0|  105|    kCFStringEncodingUnicode = 0x0100, /* kTextEncodingUnicodeDefault  + kTextEncodingDefaultFormat (aka kUnicode16BitFormat) */
  |      0|  106|    kCFStringEncodingUTF8 = 0x08000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF8Format */
  |      0|  107|    kCFStringEncodingNonLossyASCII = 0x0BFF, /* 7bit Unicode variants used by Cocoa & Java */
  |      0|  108|
  |      0|  109|    kCFStringEncodingUTF16 = 0x0100, /* kTextEncodingUnicodeDefault + kUnicodeUTF16Format (alias of kCFStringEncodingUnicode) */
  |      0|  110|    kCFStringEncodingUTF16BE = 0x10000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF16BEFormat */
  ------------------
       |  111|    kCFStringEncodingUTF16LE = 0x14000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF16LEFormat */
       |  112|
       |  113|    kCFStringEncodingUTF32 = 0x0c000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF32Format */
       |  114|    kCFStringEncodingUTF32BE = 0x18000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF32BEFormat */
       |  115|    kCFStringEncodingUTF32LE = 0x1c000100 /* kTextEncodingUnicodeDefault + kUnicodeUTF32LEFormat */
       |  116|};
       |  117|
       |  118|
       |  119|/* CFString type ID */
       |  120|CF_EXPORT
       |  121|CFTypeID CFStringGetTypeID(void);
       |  122|
       |  123|/* CFSTR() allows creation of compile-time constant CFStringRefs; the argument 
       |  124|should be a constant C-string.
       |  125|
       |  126|CFSTR(), not being a "Copy" or "Create" function, does not return a new
       |  127|reference for you. So, you should not release the return value. This is
       |  128|much like constant C or Pascal strings --- when you use "hello world"
       |  129|in a program, you do not free it.
       |  130|
       |  131|However, strings returned from CFSTR() can be retained and released in a
       |  132|properly nested fashion, just like any other CF type. That is, if you pass
       |  133|a CFSTR() return value to a function such as SetMenuItemWithCFString(), the
       |  134|function can retain it, then later, when it's done with it, it can release it.
       |  135|
       |  136|Non-7 bit characters (that is, above 127) in CFSTR() are supported, although care must
       |  137|be taken in dealing with files containing them. If you can trust your editor and tools
       |  138|to deal with non-ASCII characters in the source code, then you can use them directly 
       |  139|in CFSTR(); otherwise, you can represent such characters with their escaped octal 
       |  140|equivalents in the encoding the compiler will use to interpret them (for instance, 
       |  141|O-umlaut is \303\226 in UTF-8). UTF-8 is the recommended encoding here, 
       |  142|since it is the default choice with Mac OS X developer tools.
       |  143|*/
       |  144|#if TARGET_OS_WIN32 || TARGET_OS_LINUX
       |  145|#undef __CONSTANT_CFSTRINGS__
       |  146|#endif
       |  147|
       |  148|#ifdef __CONSTANT_CFSTRINGS__
       |  149|#define CFSTR(cStr)  ((CFStringRef) __builtin___CFStringMakeConstantString ("" cStr ""))
       |  150|#else
       |  151|#define CFSTR(cStr)  __CFStringMakeConstantString("" cStr "")
       |  152|#endif
       |  153|
       |  154|#if defined(__GNUC__) && (__GNUC__*10+__GNUC_MINOR__ >= 42) && defined(__APPLE_CC__) && (__APPLE_CC__ > 1) && !defined(__INTEL_COMPILER) && (TARGET_OS_MAC || TARGET_OS_EMBEDDED)
       |  155|#define CF_FORMAT_FUNCTION(F,A) __attribute__((format(CFString, F, A)))
       |  156|#define CF_FORMAT_ARGUMENT(A) __attribute__((format_arg(A)))
       |  157|#else
       |  158|#define CF_FORMAT_FUNCTION(F,A)
       |  159|#define CF_FORMAT_ARGUMENT(A)
       |  160|#endif
       |  161|
       |  162|/*** Immutable string creation functions ***/
       |  163|
       |  164|/* Functions to create basic immutable strings. The provided allocator is used for all memory activity in these functions.
       |  165|*/
       |  166|
       |  167|/* The following four functions copy the provided buffer into CFString's internal storage. */
       |  168|CF_EXPORT
       |  169|CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding);
       |  170|
       |  171|CF_EXPORT
       |  172|CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
       |  173|
       |  174|/* The following takes an explicit length, and allows you to specify whether the data is an external format --- that is, whether to pay attention to the BOM character (if any) and do byte swapping if necessary
       |  175|*/
       |  176|CF_EXPORT
       |  177|CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
       |  178|
       |  179|CF_EXPORT
       |  180|CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars);
       |  181|
       |  182|
       |  183|/* These functions try not to copy the provided buffer. The buffer will be deallocated 
       |  184|with the provided contentsDeallocator when it's no longer needed; to not free
       |  185|the buffer, specify kCFAllocatorNull here. As usual, NULL means default allocator.
       |  186|
       |  187|NOTE: Do not count on these buffers as being used by the string; 
       |  188|in some cases the CFString might free the buffer and use something else
       |  189|(for instance if it decides to always use Unicode encoding internally). 
       |  190|
       |  191|NOTE: If you are not transferring ownership of the buffer to the CFString
       |  192|(for instance, you supplied contentsDeallocator = kCFAllocatorNull), it is your
       |  193|responsibility to assure the buffer does not go away during the lifetime of the string.
       |  194|If the string is retained or copied, its lifetime might extend in ways you cannot
       |  195|predict. So, for strings created with buffers whose lifetimes you cannot
       |  196|guarantee, you need to be extremely careful --- do not hand it out to any
       |  197|APIs which might retain or copy the strings.
       |  198|*/
       |  199|CF_EXPORT
       |  200|CFStringRef CFStringCreateWithPascalStringNoCopy(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator);
       |  201|
       |  202|CF_EXPORT
       |  203|CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator);
       |  204|
       |  205|/* The following takes an explicit length, and allows you to specify whether the data is an external format --- that is, whether to pay attention to the BOM character (if any) and do byte swapping if necessary
       |  206|*/
       |  207|CF_EXPORT
       |  208|CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator);
       |  209|
       |  210|CF_EXPORT
       |  211|CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator);
       |  212|
       |  213|/* Create copies of part or all of the string.
       |  214|*/
       |  215|CF_EXPORT
       |  216|CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range);
       |  217|
       |  218|CF_EXPORT
       |  219|CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString);
       |  220|
       |  221|/* These functions create a CFString from the provided printf-like format string and arguments.
       |  222|*/
       |  223|CF_EXPORT
       |  224|CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...) CF_FORMAT_FUNCTION(3,4);
       |  225|
       |  226|CF_EXPORT
       |  227|CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments) CF_FORMAT_FUNCTION(3,0);
       |  228|
       |  229|/* Functions to create mutable strings. "maxLength", if not 0, is a hard bound on the length of the string. If 0, there is no limit on the length.
       |  230|*/
       |  231|CF_EXPORT
       |  232|CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength);
       |  233|
       |  234|CF_EXPORT
       |  235|CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString);
       |  236|
       |  237|/* This function creates a mutable string that has a developer supplied and directly editable backing store.
       |  238|The string will be manipulated within the provided buffer (if any) until it outgrows capacity; then the
       |  239|externalCharactersAllocator will be consulted for more memory. When the CFString is deallocated, the
       |  240|buffer will be freed with the externalCharactersAllocator. Provide kCFAllocatorNull here to prevent the buffer
       |  241|from ever being reallocated or deallocated by CFString. See comments at top of this file for more info.
       |  242|*/
       |  243|CF_EXPORT
       |  244|CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator);
       |  245|
       |  246|/*** Basic accessors for the contents ***/
       |  247|
       |  248|/* Number of 16-bit Unicode characters in the string.
       |  249|*/
       |  250|CF_EXPORT
       |  251|CFIndex CFStringGetLength(CFStringRef theString);
       |  252|
       |  253|/* Extracting the contents of the string. For obtaining multiple characters, calling
       |  254|CFStringGetCharacters() is more efficient than multiple calls to CFStringGetCharacterAtIndex().
       |  255|If the length of the string is not known (so you can't use a fixed size buffer for CFStringGetCharacters()),
       |  256|another method is to use is CFStringGetCharacterFromInlineBuffer() (see further below).
       |  257|*/
       |  258|CF_EXPORT
       |  259|UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx);
       |  260|
       |  261|CF_EXPORT
       |  262|void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer);
       |  263|
       |  264|
       |  265|/*** Conversion to other encodings ***/
       |  266|
       |  267|/* These two convert into the provided buffer; they return false if conversion isn't possible
       |  268|(due to conversion error, or not enough space in the provided buffer). 
       |  269|These functions do zero-terminate or put the length byte; the provided bufferSize should include
       |  270|space for this (so pass 256 for Str255). More sophisticated usages can go through CFStringGetBytes().
       |  271|These functions are equivalent to calling CFStringGetBytes() with 
       |  272|the range of the string; lossByte = 0; and isExternalRepresentation = false; 
       |  273|if successful, they then insert the leading length or terminating zero, as desired.
       |  274|*/
       |  275|CF_EXPORT
       |  276|Boolean CFStringGetPascalString(CFStringRef theString, StringPtr buffer, CFIndex bufferSize, CFStringEncoding encoding);
       |  277|
       |  278|CF_EXPORT
       |  279|Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding);
       |  280|
       |  281|/* These functions attempt to return in O(1) time the desired format for the string.
       |  282|Note that although this means a pointer to the internal structure is being returned,
       |  283|this can't always be counted on. Please see note at the top of the file for more
       |  284|details.
       |  285|*/
       |  286|CF_EXPORT
       |  287|ConstStringPtr CFStringGetPascalStringPtr(CFStringRef theString, CFStringEncoding encoding);	/* May return NULL at any time; be prepared for NULL */
       |  288|
  ------------------
  | -[AFJSONResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  236|
  |      0|  237|/* This function creates a mutable string that has a developer supplied and directly editable backing store.
  |      0|  238|The string will be manipulated within the provided buffer (if any) until it outgrows capacity; then the
  |      0|  239|externalCharactersAllocator will be consulted for more memory. When the CFString is deallocated, the
  |      0|  240|buffer will be freed with the externalCharactersAllocator. Provide kCFAllocatorNull here to prevent the buffer
  |      0|  241|from ever being reallocated or deallocated by CFString. See comments at top of this file for more info.
  |      0|  242|*/
  |      0|  243|CF_EXPORT
  |      0|  244|CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator);
  |      0|  245|
  |      0|  246|/*** Basic accessors for the contents ***/
  |      0|  247|
  |      0|  248|/* Number of 16-bit Unicode characters in the string.
  |      0|  249|*/
  |      0|  250|CF_EXPORT
  |      0|  251|CFIndex CFStringGetLength(CFStringRef theString);
  |      0|  252|
  |      0|  253|/* Extracting the contents of the string. For obtaining multiple characters, calling
  |      0|  254|CFStringGetCharacters() is more efficient than multiple calls to CFStringGetCharacterAtIndex().
  |      0|  255|If the length of the string is not known (so you can't use a fixed size buffer for CFStringGetCharacters()),
  |      0|  256|another method is to use is CFStringGetCharacterFromInlineBuffer() (see further below).
  |      0|  257|*/
  |      0|  258|CF_EXPORT
  |      0|  259|UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx);
  |      0|  260|
  |      0|  261|CF_EXPORT
  |      0|  262|void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer);
  |      0|  263|
  |      0|  264|
  |      0|  265|/*** Conversion to other encodings ***/
  |      0|  266|
  |      0|  267|/* These two convert into the provided buffer; they return false if conversion isn't possible
  |      0|  268|(due to conversion error, or not enough space in the provided buffer). 
  |      0|  269|These functions do zero-terminate or put the length byte; the provided bufferSize should include
  |      0|  270|space for this (so pass 256 for Str255). More sophisticated usages can go through CFStringGetBytes().
  |      0|  271|These functions are equivalent to calling CFStringGetBytes() with 
  |      0|  272|the range of the string; lossByte = 0; and isExternalRepresentation = false; 
  |      0|  273|if successful, they then insert the leading length or terminating zero, as desired.
  |      0|  274|*/
  |      0|  275|CF_EXPORT
  |      0|  276|Boolean CFStringGetPascalString(CFStringRef theString, StringPtr buffer, CFIndex bufferSize, CFStringEncoding encoding);
  |      0|  277|
  |      0|  278|CF_EXPORT
  |      0|  279|Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding);
  |      0|  280|
  |      0|  281|/* These functions attempt to return in O(1) time the desired format for the string.
  |      0|  282|Note that although this means a pointer to the internal structure is being returned,
  |      0|  283|this can't always be counted on. Please see note at the top of the file for more
  |      0|  284|details.
  |      0|  285|*/
  |      0|  286|CF_EXPORT
  |      0|  287|ConstStringPtr CFStringGetPascalStringPtr(CFStringRef theString, CFStringEncoding encoding);	/* May return NULL at any time; be prepared for NULL */
  |      0|  288|
  ------------------
       |  289|CF_EXPORT
       |  290|const char *CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding);		/* May return NULL at any time; be prepared for NULL */
       |  291|
       |  292|CF_EXPORT
       |  293|const UniChar *CFStringGetCharactersPtr(CFStringRef theString);					/* May return NULL at any time; be prepared for NULL */
       |  294|
       |  295|/* The primitive conversion routine; allows you to convert a string piece at a time
       |  296|       into a fixed size buffer. Returns number of characters converted. 
       |  297|   Characters that cannot be converted to the specified encoding are represented
       |  298|       with the byte specified by lossByte; if lossByte is 0, then lossy conversion
       |  299|       is not allowed and conversion stops, returning partial results.
       |  300|   Pass buffer==NULL if you don't care about the converted string (but just the convertability,
       |  301|       or number of bytes required). 
       |  302|   maxBufLength indicates the maximum number of bytes to generate. It is ignored when buffer==NULL.
       |  303|   Does not zero-terminate. If you want to create Pascal or C string, allow one extra byte at start or end. 
       |  304|   Setting isExternalRepresentation causes any extra bytes that would allow 
       |  305|       the data to be made persistent to be included; for instance, the Unicode BOM. Note that
       |  306|       CFString prepends UTF encoded data with the Unicode BOM <http://www.unicode.org/faq/utf_bom.html> 
       |  307|       when generating external representation if the target encoding allows. It's important to note that
       |  308|       only UTF-8, UTF-16, and UTF-32 define the handling of the byte order mark character, and the "LE"
       |  309|       and "BE" variants of UTF-16 and UTF-32 don't.
       |  310|*/
       |  311|CF_EXPORT
       |  312|CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen);
       |  313|
       |  314|/* Convenience functions String <-> Data. These generate "external" formats, that is, formats that
       |  315|   can be written out to disk. For instance, if the encoding is Unicode,
       |  316|   CFStringCreateFromExternalRepresentation() pays attention to the BOM character (if any) 
       |  317|   and does byte swapping if necessary. Similarly CFStringCreateExternalRepresentation() will  
       |  318|   include a BOM character if appropriate. See CFStringGetBytes() for more on this and lossByte.
       |  319|*/
       |  320|CF_EXPORT
       |  321|CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding);	/* May return NULL on conversion error */
       |  322|
       |  323|CF_EXPORT
       |  324|CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte);	/* May return NULL on conversion error */	
       |  325|
       |  326|/* Hints about the contents of a string
       |  327|*/
       |  328|CF_EXPORT
       |  329|CFStringEncoding CFStringGetSmallestEncoding(CFStringRef theString);	/* Result in O(n) time max */
       |  330|
       |  331|CF_EXPORT
       |  332|CFStringEncoding CFStringGetFastestEncoding(CFStringRef theString);	/* Result in O(1) time max */
       |  333|
       |  334|/* General encoding info
       |  335|*/
       |  336|CF_EXPORT
       |  337|CFStringEncoding CFStringGetSystemEncoding(void);		/* The default encoding for the system; untagged 8-bit characters are usually in this encoding */
       |  338|
       |  339|CF_EXPORT
       |  340|CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding);	/* Max bytes a string of specified length (in UniChars) will take up if encoded */
       |  341|
       |  342|
       |  343|/*** FileSystem path conversion functions ***/
       |  344|
       |  345|/* Extract the contents of the string as a NULL-terminated 8-bit string appropriate for passing to POSIX APIs (for example, normalized for HFS+).  The string is zero-terminated. false will be returned if the conversion results don't fit into the buffer.  Use CFStringGetMaximumSizeOfFileSystemRepresentation() if you want to make sure the buffer is of sufficient length.
       |  346|*/
       |  347|CF_EXPORT
       |  348|Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen);
       |  349|
       |  350|/* Get the upper bound on the number of bytes required to hold the file system representation for the string. This result is returned quickly as a very rough approximation, and could be much larger than the actual space required. The result includes space for the zero termination. If you are allocating a buffer for long-term keeping, it's recommended that you reallocate it smaller (to be the right size) after calling CFStringGetFileSystemRepresentation(). 
       |  351|*/
       |  352|CF_EXPORT
       |  353|CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string);
       |  354|
       |  355|/* Create a CFString from the specified zero-terminated POSIX file system representation.  If the conversion fails (possible due to bytes in the buffer not being a valid sequence of bytes for the appropriate character encoding), NULL is returned.
       |  356|*/
       |  357|CF_EXPORT
       |  358|CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer);
       |  359|
       |  360|
       |  361|/*** Comparison functions. ***/
       |  362|
       |  363|/* Find and compare flags; these are OR'ed together and provided as CFStringCompareFlags in the various functions. 
       |  364|*/
       |  365|typedef CF_OPTIONS(CFOptionFlags, CFStringCompareFlags) {
       |  366|    kCFCompareCaseInsensitive = 1,	
       |  367|    kCFCompareBackwards = 4,		/* Starting from the end of the string */
       |  368|    kCFCompareAnchored = 8,		/* Only at the specified starting point */
       |  369|    kCFCompareNonliteral = 16,		/* If specified, loose equivalence is performed (o-umlaut == o, umlaut) */
       |  370|    kCFCompareLocalized = 32,		/* User's default locale is used for the comparisons */
       |  371|    kCFCompareNumerically = 64,		/* Numeric comparison is used; that is, Foo2.txt < Foo7.txt < Foo25.txt */
       |  372|    kCFCompareDiacriticInsensitive CF_ENUM_AVAILABLE(10_5, 2_0) = 128, /* If specified, ignores diacritics (o-umlaut == o) */
       |  373|    kCFCompareWidthInsensitive CF_ENUM_AVAILABLE(10_5, 2_0) = 256, /* If specified, ignores width differences ('a' == UFF41) */
       |  374|    kCFCompareForcedOrdering CF_ENUM_AVAILABLE(10_5, 2_0) = 512 /* If specified, comparisons are forced to return either kCFCompareLessThan or kCFCompareGreaterThan if the strings are equivalent but not strictly equal, for stability when sorting (e.g. "aaa" > "AAA" with kCFCompareCaseInsensitive specified) */
       |  375|};
       |  376|
       |  377|/* The main comparison routine; compares specified range of the first string to (the full range of) the second string.
       |  378|   locale == NULL indicates canonical locale (the return value from CFLocaleGetSystem()).
       |  379|   kCFCompareNumerically, added in 10.2, does not work if kCFCompareLocalized is specified on systems before 10.3
       |  380|   kCFCompareBackwards and kCFCompareAnchored are not applicable.
       |  381|   rangeToCompare applies to the first string; that is, only the substring of theString1 specified by rangeToCompare is compared against all of theString2.
       |  382|*/
       |  383|CF_EXPORT
       |  384|CFComparisonResult CFStringCompareWithOptionsAndLocale(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions, CFLocaleRef locale) CF_AVAILABLE(10_5, 2_0);
       |  385|
       |  386|/* Comparison convenience. Uses the current user locale (the return value from CFLocaleCopyCurrent()) if kCFCompareLocalized. Refer to CFStringCompareWithOptionsAndLocale() for more info.
       |  387|*/
       |  388|CF_EXPORT
       |  389|CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions);
       |  390|
       |  391|/* Comparison convenience suitable for passing as sorting functions.
       |  392|   kCFCompareNumerically, added in 10.2, does not work if kCFCompareLocalized is specified on systems before 10.3
       |  393|   kCFCompareBackwards and kCFCompareAnchored are not applicable.
       |  394|*/
       |  395|CF_EXPORT
       |  396|CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
       |  397|
       |  398|/* CFStringFindWithOptionsAndLocale() returns the found range in the CFRange * argument; you can pass NULL for simple discovery check.
       |  399|   locale == NULL indicates canonical locale (the return value from CFLocaleGetSystem()).
       |  400|   If stringToFind is the empty string (zero length), nothing is found.
       |  401|   Ignores the kCFCompareNumerically option.
       |  402|   Only the substring of theString specified by rangeToSearch is searched for stringToFind.
       |  403|*/
       |  404|CF_EXPORT
       |  405|Boolean CFStringFindWithOptionsAndLocale(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFLocaleRef locale, CFRange *result) CF_AVAILABLE(10_5, 2_0);
       |  406|
       |  407|/* Find convenience. Uses the current user locale (the return value from CFLocaleCopyCurrent()) if kCFCompareLocalized. Refer to CFStringFindWithOptionsAndLocale() for more info.
       |  408|*/
       |  409|CF_EXPORT
       |  410|Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result);
       |  411|
       |  412|/* CFStringCreateArrayWithFindResults() returns an array of CFRange pointers, or NULL if there are no matches.
       |  413|   Overlapping instances are not found; so looking for "AA" in "AAA" finds just one range.
       |  414|   Post 10.1: If kCFCompareBackwards is provided, the scan is done from the end (which can give a different result), and
       |  415|      the results are stored in the array backwards (last found range in slot 0).
       |  416|   If stringToFind is the empty string (zero length), nothing is found.
       |  417|   kCFCompareAnchored causes just the consecutive instances at start (or end, if kCFCompareBackwards) to be reported. So, searching for "AB" in "ABABXAB..." you just get the first two occurrences.
       |  418|   Ignores the kCFCompareNumerically option.
       |  419|   Only the substring of theString specified by rangeToSearch is searched for stringToFind.
       |  420|*/
       |  421|CF_EXPORT
       |  422|CFArrayRef CFStringCreateArrayWithFindResults(CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags compareOptions);
       |  423|
       |  424|/* Find conveniences; see comments above concerning empty string and options.
       |  425|*/
       |  426|CF_EXPORT
       |  427|CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions);
       |  428|
       |  429|CF_EXPORT
       |  430|Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix);
       |  431|
       |  432|CF_EXPORT
       |  433|Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix);
       |  434|
       |  435|/*!
       |  436|	@function CFStringGetRangeOfComposedCharactersAtIndex
       |  437|	Returns the range of the composed character sequence at the specified index.
       |  438|	@param theString The CFString which is to be searched.  If this
       |  439|                		parameter is not a valid CFString, the behavior is
       |  440|              		undefined.
       |  441|	@param theIndex The index of the character contained in the
       |  442|			composed character sequence.  If the index is
       |  443|			outside the index space of the string (0 to N-1 inclusive,
       |  444|			where N is the length of the string), the behavior is
       |  445|			undefined.
       |  446|	@result The range of the composed character sequence.
       |  447|*/
       |  448|CF_EXPORT CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex);
       |  449|
       |  450|/*!
       |  451|	@function CFStringFindCharacterFromSet
       |  452|	Query the range of the first character contained in the specified character set.
       |  453|	@param theString The CFString which is to be searched.  If this
       |  454|                		parameter is not a valid CFString, the behavior is
       |  455|              		undefined.
       |  456|	@param theSet The CFCharacterSet against which the membership
       |  457|			of characters is checked.  If this parameter is not a valid
       |  458|			CFCharacterSet, the behavior is undefined.
       |  459|	@param range The range of characters within the string to search. If
       |  460|			the range location or end point (defined by the location
       |  461|			plus length minus 1) are outside the index space of the
       |  462|			string (0 to N-1 inclusive, where N is the length of the
       |  463|			string), the behavior is undefined. If the range length is
       |  464|			negative, the behavior is undefined. The range may be empty
       |  465|			(length 0), in which case no search is performed.
       |  466|	@param searchOptions The bitwise-or'ed option flags to control
       |  467|			the search behavior.  The supported options are
       |  468|			kCFCompareBackwards andkCFCompareAnchored.
       |  469|			If other option flags are specified, the behavior
       |  470|                        is undefined.
       |  471|	@param result The pointer to a CFRange supplied by the caller in
       |  472|			which the search result is stored.  Note that the length
       |  473|			of this range can be more than 1, if for instance the 
       |  474|			result is a composed character. If a pointer to an invalid
       |  475|			memory is specified, the behavior is undefined.
       |  476|	@result true, if at least a character which is a member of the character
       |  477|			set is found and result is filled, otherwise, false.
       |  478|*/
       |  479|CF_EXPORT Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result);
       |  480|
       |  481|/* Find range of bounds of the line(s) that span the indicated range (startIndex, numChars),
       |  482|   taking into account various possible line separator sequences (CR, CRLF, LF, and Unicode NextLine, LineSeparator, ParagraphSeparator).
       |  483|   All return values are "optional" (provide NULL if you don't want them)
       |  484|     lineBeginIndex: index of first character in line
       |  485|     lineEndIndex: index of first character of the next line (including terminating line separator characters)
       |  486|     contentsEndIndex: index of the first line separator character
       |  487|   Thus, lineEndIndex - lineBeginIndex is the number of chars in the line, including the line separators
       |  488|         contentsEndIndex - lineBeginIndex is the number of chars in the line w/out the line separators
       |  489|*/
       |  490|CF_EXPORT
       |  491|void CFStringGetLineBounds(CFStringRef theString, CFRange range, CFIndex *lineBeginIndex, CFIndex *lineEndIndex, CFIndex *contentsEndIndex); 
       |  492|
       |  493|/* Same as CFStringGetLineBounds(), however, will only look for paragraphs. Won't stop at Unicode NextLine or LineSeparator characters.
       |  494|*/
       |  495|CF_EXPORT
       |  496|void CFStringGetParagraphBounds(CFStringRef string, CFRange range, CFIndex *parBeginIndex, CFIndex *parEndIndex, CFIndex *contentsEndIndex) CF_AVAILABLE(10_5, 2_0);
       |  497|
       |  498|/*!
       |  499|	@function CFStringGetHyphenationLocationBeforeIndex
       |  500|	Retrieve the first potential hyphenation location found before the specified location.
       |  501|	@param string The CFString which is to be hyphenated.  If this
       |  502|                		parameter is not a valid CFString, the behavior is
       |  503|              		undefined.
       |  504|	@param location An index in the string.  If a valid hyphen index is returned, it 
       |  505|	                will be before this index.
       |  506|	@param limitRange The range of characters within the string to search. If
       |  507|			the range location or end point (defined by the location
       |  508|			plus length minus 1) are outside the index space of the
       |  509|			string (0 to N-1 inclusive, where N is the length of the
       |  510|			string), the behavior is undefined. If the range length is
       |  511|			negative, the behavior is undefined. The range may be empty
       |  512|			(length 0), in which case no hyphen location is generated.
       |  513|	@param options Reserved for future use.
       |  514|	@param locale Specifies which language's hyphenation conventions to use.
       |  515|			This must be a valid locale.  Hyphenation data is not available
       |  516|			for all locales.  You can use CFStringIsHyphenationAvailableForLocale
       |  517|			to test for availability of hyphenation data.
       |  518|	@param character The suggested hyphen character to insert.  Pass NULL if you
       |  519|			do not need this information.
       |  520|	@result an index in the string where it is appropriate to insert a hyphen, if
       |  521|			one exists; else kCFNotFound
       |  522|*/
       |  523|CF_EXPORT
       |  524|CFIndex CFStringGetHyphenationLocationBeforeIndex(CFStringRef string, CFIndex location, CFRange limitRange, CFOptionFlags options, CFLocaleRef locale, UTF32Char *character) CF_AVAILABLE(10_7, 4_2);
       |  525|
       |  526|CF_EXPORT
       |  527|Boolean CFStringIsHyphenationAvailableForLocale(CFLocaleRef locale) CF_AVAILABLE(10_7, 4_3);
       |  528|
       |  529|/*** Exploding and joining strings with a separator string ***/
       |  530|
       |  531|CF_EXPORT
       |  532|CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString);	/* Empty array returns empty string; one element array returns the element */
       |  533|
       |  534|CF_EXPORT
       |  535|CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString);	/* No separators in the string returns array with that string; string == sep returns two empty strings */
       |  536|
       |  537|
       |  538|/*** Parsing non-localized numbers from strings ***/
       |  539|
       |  540|CF_EXPORT
       |  541|SInt32 CFStringGetIntValue(CFStringRef str);		/* Skips whitespace; returns 0 on error, MAX or -MAX on overflow */
       |  542|
       |  543|CF_EXPORT
       |  544|double CFStringGetDoubleValue(CFStringRef str);	/* Skips whitespace; returns 0.0 on error */
       |  545|
       |  546|
       |  547|/*** MutableString functions ***/
       |  548|
       |  549|/* CFStringAppend("abcdef", "xxxxx") -> "abcdefxxxxx"
       |  550|   CFStringDelete("abcdef", CFRangeMake(2, 3)) -> "abf"
       |  551|   CFStringReplace("abcdef", CFRangeMake(2, 3), "xxxxx") -> "abxxxxxf"
       |  552|   CFStringReplaceAll("abcdef", "xxxxx") -> "xxxxx"
       |  553|*/
       |  554|CF_EXPORT
       |  555|void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString);
       |  556|
       |  557|CF_EXPORT
       |  558|void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars);
       |  559|
       |  560|CF_EXPORT
       |  561|void CFStringAppendPascalString(CFMutableStringRef theString, ConstStr255Param pStr, CFStringEncoding encoding);
       |  562|
       |  563|CF_EXPORT
       |  564|void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding);
       |  565|
       |  566|CF_EXPORT
       |  567|void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...) CF_FORMAT_FUNCTION(3,4);
       |  568|
       |  569|CF_EXPORT
       |  570|void CFStringAppendFormatAndArguments(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments) CF_FORMAT_FUNCTION(3,0);
       |  571|
       |  572|CF_EXPORT
       |  573|void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr);
       |  574|
       |  575|CF_EXPORT
       |  576|void CFStringDelete(CFMutableStringRef theString, CFRange range);
       |  577|
       |  578|CF_EXPORT
       |  579|void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement);
       |  580|
       |  581|CF_EXPORT
       |  582|void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement);	/* Replaces whole string */
       |  583|
       |  584|/* Replace all occurrences of target in rangeToSearch of theString with replacement.
       |  585|   Pays attention to kCFCompareCaseInsensitive, kCFCompareBackwards, kCFCompareNonliteral, and kCFCompareAnchored.
       |  586|   kCFCompareBackwards can be used to do the replacement starting from the end, which could give a different result.
       |  587|     ex. AAAAA, replace AA with B -> BBA or ABB; latter if kCFCompareBackwards
       |  588|   kCFCompareAnchored assures only anchored but multiple instances are found (the instances must be consecutive at start or end)
       |  589|     ex. AAXAA, replace A with B -> BBXBB or BBXAA; latter if kCFCompareAnchored
       |  590|   Returns number of replacements performed.
       |  591|*/
       |  592|CF_EXPORT
       |  593|CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions);
       |  594|
       |  595|
       |  596|/* This function will make the contents of a mutable CFString point directly at the specified UniChar array.
       |  597|   It works only with CFStrings created with CFStringCreateMutableWithExternalCharactersNoCopy().
       |  598|   This function does not free the previous buffer.
       |  599|   The string will be manipulated within the provided buffer (if any) until it outgrows capacity; then the
       |  600|     externalCharactersAllocator will be consulted for more memory.
       |  601|   See comments at the top of this file for more info.
       |  602|*/
       |  603|CF_EXPORT
       |  604|void CFStringSetExternalCharactersNoCopy(CFMutableStringRef theString, UniChar *chars, CFIndex length, CFIndex capacity);	/* Works only on specially created mutable strings! */
       |  605|
       |  606|/* CFStringPad() will pad or cut down a string to the specified size.
       |  607|   The pad string is used as the fill string; indexIntoPad specifies which character to start with.
       |  608|     CFStringPad("abc", " ", 9, 0) ->  "abc      "
       |  609|     CFStringPad("abc", ". ", 9, 1) -> "abc . . ."
       |  610|     CFStringPad("abcdef", ?, 3, ?) -> "abc"
       |  611|
       |  612|     CFStringTrim() will trim the specified string from both ends of the string.
       |  613|     CFStringTrimWhitespace() will do the same with white space characters (tab, newline, etc)
       |  614|     CFStringTrim("  abc ", " ") -> "abc"
       |  615|     CFStringTrim("* * * *abc * ", "* ") -> "*abc "
       |  616|*/
       |  617|CF_EXPORT
       |  618|void CFStringPad(CFMutableStringRef theString, CFStringRef padString, CFIndex length, CFIndex indexIntoPad);
       |  619|
       |  620|CF_EXPORT
       |  621|void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString);
       |  622|
       |  623|CF_EXPORT
       |  624|void CFStringTrimWhitespace(CFMutableStringRef theString);
       |  625|
       |  626|CF_EXPORT
       |  627|void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale);
       |  628|
       |  629|CF_EXPORT
       |  630|void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale);
       |  631|
       |  632|CF_EXPORT
       |  633|void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale);
       |  634|
       |  635|/*!
       |  636|	@typedef CFStringNormalizationForm
       |  637|	This is the type of Unicode normalization forms as described in
       |  638|	Unicode Technical Report #15. To normalize for use with file
       |  639|	system calls, use CFStringGetFileSystemRepresentation().
       |  640|*/
       |  641|typedef CF_ENUM(CFIndex, CFStringNormalizationForm) {
       |  642|	kCFStringNormalizationFormD = 0, // Canonical Decomposition
       |  643|	kCFStringNormalizationFormKD, // Compatibility Decomposition
       |  644|	kCFStringNormalizationFormC, // Canonical Decomposition followed by Canonical Composition
       |  645|	kCFStringNormalizationFormKC // Compatibility Decomposition followed by Canonical Composition
       |  646|};
       |  647|
       |  648|/*!
       |  649|	@function CFStringNormalize
       |  650|	Normalizes the string into the specified form as described in
       |  651|	Unicode Technical Report #15.
       |  652|	@param theString  The string which is to be normalized.  If this
       |  653|		parameter is not a valid mutable CFString, the behavior is
       |  654|		undefined.
       |  655|	@param theForm  The form into which the string is to be normalized.
       |  656|		If this parameter is not a valid CFStringNormalizationForm value,
       |  657|		the behavior is undefined.
       |  658|*/
       |  659|CF_EXPORT void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm);
       |  660|
       |  661|
       |  662|/*!
       |  663|	@function CFStringFold
       |  664|	Folds the string into the form specified by the flags.
       |  665|		Character foldings are operations that convert any of a set of characters
       |  666|		sharing similar semantics into a single representative from that set.
       |  667|		This function can be used to preprocess strings that are to be compared,
       |  668|		searched, or indexed.
       |  669|		Note that folding does not include normalization, so it is necessary
       |  670|		to use CFStringNormalize in addition to CFStringFold in order to obtain
       |  671|		the effect of kCFCompareNonliteral.
       |  672|	@param theString  The string which is to be folded.  If this parameter is not
       |  673|		a valid mutable CFString, the behavior is undefined.
       |  674|	@param theFlag  The equivalency flags which describes the character folding form.
       |  675|		Only those flags containing the word "insensitive" are recognized here; other flags are ignored.		
       |  676|		Folding with kCFCompareCaseInsensitive removes case distinctions in accordance with the mapping
       |  677|		specified by ftp://ftp.unicode.org/Public/UNIDATA/CaseFolding.txt.  Folding with
       |  678|		kCFCompareDiacriticInsensitive removes distinctions of accents and other diacritics.  Folding
       |  679|		with kCFCompareWidthInsensitive removes character width distinctions by mapping characters in
       |  680|		the range U+FF00-U+FFEF to their ordinary equivalents.
       |  681|	@param theLocale The locale tailoring the character folding behavior. If NULL,
       |  682|		it's considered to be the system locale returned from CFLocaleGetSystem().
       |  683|		If non-NULL and not a valid CFLocale object, the behavior is undefined.
       |  684|*/
       |  685|
       |  686|CF_EXPORT
       |  687|void CFStringFold(CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale) CF_AVAILABLE(10_5, 2_0);
       |  688|
       |  689|/* Perform string transliteration.  The transformation represented by transform is applied to the given range of string, modifying it in place. Only the specified range will be modified, but the transform may look at portions of the string outside that range for context. NULL range pointer causes the whole string to be transformed. On return, range is modified to reflect the new range corresponding to the original range. reverse indicates that the inverse transform should be used instead, if it exists. If the transform is successful, true is returned; if unsuccessful, false. Reasons for the transform being unsuccessful include an invalid transform identifier, or attempting to reverse an irreversible transform.
       |  690|
       |  691|You can pass one of the predefined transforms below, or any valid ICU transform ID as defined in the ICU User Guide. Note that we do not support arbitrary set of ICU transform rules.
       |  692|*/
       |  693|CF_EXPORT
       |  694|Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse);
       |  695|
       |  696|/* Transform identifiers for CFStringTransform()
       |  697|*/
       |  698|CF_EXPORT const CFStringRef kCFStringTransformStripCombiningMarks;
       |  699|CF_EXPORT const CFStringRef kCFStringTransformToLatin;
       |  700|CF_EXPORT const CFStringRef kCFStringTransformFullwidthHalfwidth;
       |  701|CF_EXPORT const CFStringRef kCFStringTransformLatinKatakana;
       |  702|CF_EXPORT const CFStringRef kCFStringTransformLatinHiragana;
       |  703|CF_EXPORT const CFStringRef kCFStringTransformHiraganaKatakana;
       |  704|CF_EXPORT const CFStringRef kCFStringTransformMandarinLatin;
       |  705|CF_EXPORT const CFStringRef kCFStringTransformLatinHangul;
       |  706|CF_EXPORT const CFStringRef kCFStringTransformLatinArabic;
       |  707|CF_EXPORT const CFStringRef kCFStringTransformLatinHebrew;
       |  708|CF_EXPORT const CFStringRef kCFStringTransformLatinThai;
       |  709|CF_EXPORT const CFStringRef kCFStringTransformLatinCyrillic;
       |  710|CF_EXPORT const CFStringRef kCFStringTransformLatinGreek;
       |  711|CF_EXPORT const CFStringRef kCFStringTransformToXMLHex;
       |  712|CF_EXPORT const CFStringRef kCFStringTransformToUnicodeName;
       |  713|CF_EXPORT const CFStringRef kCFStringTransformStripDiacritics CF_AVAILABLE(10_5, 2_0);
       |  714|
       |  715|
       |  716|/*** General encoding related functionality ***/
       |  717|
       |  718|/* This returns availability of the encoding on the system
       |  719|*/
       |  720|CF_EXPORT
       |  721|Boolean CFStringIsEncodingAvailable(CFStringEncoding encoding);
       |  722|
       |  723|/* This function returns list of available encodings.  The returned list is terminated with kCFStringEncodingInvalidId and owned by the system.
       |  724|*/
       |  725|CF_EXPORT
       |  726|const CFStringEncoding *CFStringGetListOfAvailableEncodings(void);
       |  727|
       |  728|/* Returns name of the encoding; non-localized.
       |  729|*/
       |  730|CF_EXPORT
       |  731|CFStringRef CFStringGetNameOfEncoding(CFStringEncoding encoding);
       |  732|
       |  733|/* ID mapping functions from/to Cocoa NSStringEncoding.  Returns kCFStringEncodingInvalidId if no mapping exists.
       |  734|*/
       |  735|CF_EXPORT
       |  736|unsigned long CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding);
       |  737|
       |  738|CF_EXPORT
       |  739|CFStringEncoding CFStringConvertNSStringEncodingToEncoding(unsigned long encoding);
       |  740|
       |  741|/* ID mapping functions from/to Microsoft Windows codepage (covers both OEM & ANSI).  Returns kCFStringEncodingInvalidId if no mapping exists.
       |  742|*/
       |  743|CF_EXPORT
       |  744|UInt32 CFStringConvertEncodingToWindowsCodepage(CFStringEncoding encoding);
       |  745|
       |  746|CF_EXPORT
       |  747|CFStringEncoding CFStringConvertWindowsCodepageToEncoding(UInt32 codepage);
       |  748|
       |  749|/* ID mapping functions from/to IANA registery charset names.  Returns kCFStringEncodingInvalidId if no mapping exists.
       |  750|*/
       |  751|CF_EXPORT
       |  752|CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString);
       |  753|
       |  754|CF_EXPORT
       |  755|CFStringRef  CFStringConvertEncodingToIANACharSetName(CFStringEncoding encoding);
       |  756|
       |  757|/* Returns the most compatible MacOS script value for the input encoding */
       |  758|/* i.e. kCFStringEncodingMacRoman -> kCFStringEncodingMacRoman */
       |  759|/*	kCFStringEncodingWindowsLatin1 -> kCFStringEncodingMacRoman */
       |  760|/*	kCFStringEncodingISO_2022_JP -> kCFStringEncodingMacJapanese */
       |  761|CF_EXPORT
       |  762|CFStringEncoding CFStringGetMostCompatibleMacStringEncoding(CFStringEncoding encoding);
       |  763|
       |  764|
       |  765|
       |  766|/* The next two functions allow fast access to the contents of a string, 
       |  767|   assuming you are doing sequential or localized accesses. To use, call
       |  768|   CFStringInitInlineBuffer() with a CFStringInlineBuffer (on the stack, say),
       |  769|   and a range in the string to look at. Then call CFStringGetCharacterFromInlineBuffer()
       |  770|   as many times as you want, with a index into that range (relative to the start
       |  771|   of that range). These are INLINE functions and will end up calling CFString only 
       |  772|   once in a while, to fill a buffer.  CFStringGetCharacterFromInlineBuffer() returns 0 if
       |  773|   a location outside the original range is specified.
       |  774|*/
       |  775|#define __kCFStringInlineBufferLength 64
       |  776|typedef struct {
       |  777|    UniChar buffer[__kCFStringInlineBufferLength];
       |  778|    CFStringRef theString;
       |  779|    const UniChar *directUniCharBuffer;
       |  780|    const char *directCStringBuffer;
       |  781|    CFRange rangeToBuffer;		/* Range in string to buffer */
       |  782|    CFIndex bufferedRangeStart;		/* Start of range currently buffered (relative to rangeToBuffer.location) */
       |  783|    CFIndex bufferedRangeEnd;		/* bufferedRangeStart + number of chars actually buffered */
       |  784|} CFStringInlineBuffer;
       |  785|
       |  786|#if defined(CF_INLINE)
       |  787|CF_INLINE void CFStringInitInlineBuffer(CFStringRef str, CFStringInlineBuffer *buf, CFRange range) {
       |  788|    buf->theString = str;
       |  789|    buf->rangeToBuffer = range;
       |  790|    buf->directCStringBuffer = (buf->directUniCharBuffer = CFStringGetCharactersPtr(str)) ? NULL : CFStringGetCStringPtr(str, kCFStringEncodingASCII);
       |  791|    buf->bufferedRangeStart = buf->bufferedRangeEnd = 0;
       |  792|}
       |  793|
       |  794|CF_INLINE UniChar CFStringGetCharacterFromInlineBuffer(CFStringInlineBuffer *buf, CFIndex idx) {
       |  795|    if (idx < 0 || idx >= buf->rangeToBuffer.length) return 0;
       |  796|    if (buf->directUniCharBuffer) return buf->directUniCharBuffer[idx + buf->rangeToBuffer.location];
       |  797|    if (buf->directCStringBuffer) return (UniChar)(buf->directCStringBuffer[idx + buf->rangeToBuffer.location]);
       |  798|    if (idx >= buf->bufferedRangeEnd || idx < buf->bufferedRangeStart) {
       |  799|	if ((buf->bufferedRangeStart = idx - 4) < 0) buf->bufferedRangeStart = 0;
       |  800|	buf->bufferedRangeEnd = buf->bufferedRangeStart + __kCFStringInlineBufferLength;
       |  801|	if (buf->bufferedRangeEnd > buf->rangeToBuffer.length) buf->bufferedRangeEnd = buf->rangeToBuffer.length;
       |  802|	CFStringGetCharacters(buf->theString, CFRangeMake(buf->rangeToBuffer.location + buf->bufferedRangeStart, buf->bufferedRangeEnd - buf->bufferedRangeStart), buf->buffer);
       |  803|    }
       |  804|    return buf->buffer[idx - buf->bufferedRangeStart];
       |  805|}
       |  806|
       |  807|#else
       |  808|/* If INLINE functions are not available, we do somewhat less powerful macros that work similarly (except be aware that the buf argument is evaluated multiple times).
       |  809|*/
       |  810|#define CFStringInitInlineBuffer(str, buf, range) \
       |  811|    do {(buf)->theString = str; (buf)->rangeToBuffer = range; (buf)->directCStringBuffer = ((buf)->directUniCharBuffer = CFStringGetCharactersPtr(str)) ? NULL : CFStringGetCStringPtr(str, kCFStringEncodingASCII);} while (0)
       |  812|
       |  813|#define CFStringGetCharacterFromInlineBuffer(buf, idx) \
       |  814|    (((idx) < 0 || (idx) >= (buf)->rangeToBuffer.length) ? 0 : ((buf)->directUniCharBuffer ? (buf)->directUniCharBuffer[(idx) + (buf)->rangeToBuffer.location] : ((buf)->directCStringBuffer ? (UniChar)((buf)->directCStringBuffer[(idx) + (buf)->rangeToBuffer.location]) : CFStringGetCharacterAtIndex((buf)->theString, (idx) + (buf)->rangeToBuffer.location))))
       |  815|
       |  816|#endif /* CF_INLINE */
       |  817|
       |  818|
       |  819|
       |  820|/* UTF-16 surrogate support
       |  821| */
       |  822|CF_INLINE Boolean CFStringIsSurrogateHighCharacter(UniChar character) {
       |  823|    return ((character >= 0xD800UL) && (character <= 0xDBFFUL) ? true : false);
       |  824|}
       |  825|
       |  826|CF_INLINE Boolean CFStringIsSurrogateLowCharacter(UniChar character) {
       |  827|    return ((character >= 0xDC00UL) && (character <= 0xDFFFUL) ? true : false);
       |  828|}
       |  829|
       |  830|CF_INLINE UTF32Char CFStringGetLongCharacterForSurrogatePair(UniChar surrogateHigh, UniChar surrogateLow) {
       |  831|    return (UTF32Char)(((surrogateHigh - 0xD800UL) << 10) + (surrogateLow - 0xDC00UL) + 0x0010000UL);
       |  832|}
       |  833|
       |  834|// Maps a UTF-32 character to a pair of UTF-16 surrogate characters. The buffer pointed by surrogates has to have space for at least 2 UTF-16 characters. Returns true if mapped to a surrogate pair.
       |  835|CF_INLINE Boolean CFStringGetSurrogatePairForLongCharacter(UTF32Char character, UniChar *surrogates) {
       |  836|    if ((character > 0xFFFFUL) && (character < 0x110000UL)) { // Non-BMP character
       |  837|        character -= 0x10000;
       |  838|        if (NULL != surrogates) {
       |  839|            surrogates[0] = (UniChar)((character >> 10) + 0xD800UL);
       |  840|            surrogates[1] = (UniChar)((character & 0x3FF) + 0xDC00UL);
       |  841|        }
       |  842|        return true;
       |  843|    } else {
       |  844|        if (NULL != surrogates) *surrogates = (UniChar)character;
       |  845|        return false;
       |  846|    }
       |  847|}
       |  848|
       |  849|/* Rest of the stuff in this file is private and should not be used directly
       |  850|*/
       |  851|/* For debugging only; output goes to stderr
       |  852|   Use CFShow() to printf the description of any CFType;
       |  853|   Use CFShowStr() to printf detailed info about a CFString
       |  854|*/
       |  855|CF_EXPORT
       |  856|void CFShow(CFTypeRef obj);
       |  857|
       |  858|CF_EXPORT
       |  859|void CFShowStr(CFStringRef str);
       |  860|
       |  861|/* This function is private and should not be used directly */
       |  862|CF_EXPORT
       |  863|CFStringRef  __CFStringMakeConstantString(const char *cStr) CF_FORMAT_ARGUMENT(1);	/* Private; do not use */
       |  864|
       |  865|CF_EXTERN_C_END
       |  866|CF_IMPLICIT_BRIDGING_DISABLED
       |  867|
       |  868|#endif /* ! __COREFOUNDATION_CFSTRING__ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/System/Library/Frameworks/Foundation.framework/Headers/NSBundle.h:
       |    1|/*	NSBundle.h
       |    2|	Copyright (c) 1994-2015, Apple Inc.  All rights reserved.
       |    3|*/
       |    4|
       |    5|#import <Foundation/NSObject.h>
       |    6|#import <Foundation/NSString.h>
       |    7|#import <Foundation/NSArray.h>
       |    8|#import <Foundation/NSDictionary.h>
       |    9|#import <Foundation/NSSet.h>
       |   10|#import <Foundation/NSProgress.h>
       |   11|
       |   12|@class NSString, NSURL, NSError, NSUUID, NSLock, NSNumber;
       |   13|
       |   14|NS_ASSUME_NONNULL_BEGIN
       |   15|
       |   16|/* Because NSBundle caches allocated instances, subclasses should be prepared
       |   17|   to receive an already initialized object back from [super initWithPath:] */
       |   18|@interface NSBundle : NSObject {
       |   19|@private
       |   20|    NSUInteger		_flags;
       |   21|    id		        _cfBundle;
       |   22|    NSUInteger		_reserved2;
       |   23|    Class		_principalClass;
       |   24|    id                  _initialPath;
       |   25|    id                  _resolvedPath;
       |   26|    id                  _reserved3;
       |   27|    id                  _lock;
       |   28|}
       |   29|
       |   30|/* Methods for creating or retrieving bundle instances. */
       |   31|+ (NSBundle *)mainBundle;
       |   32|+ (nullable instancetype)bundleWithPath:(NSString *)path;
       |   33|- (nullable instancetype)initWithPath:(NSString *)path NS_DESIGNATED_INITIALIZER;
       |   34|
       |   35|+ (nullable instancetype)bundleWithURL:(NSURL *)url NS_AVAILABLE(10_6, 4_0);
       |   36|- (nullable instancetype)initWithURL:(NSURL *)url NS_AVAILABLE(10_6, 4_0);
       |   37|
       |   38|+ (NSBundle *)bundleForClass:(Class)aClass;
       |   39|+ (nullable NSBundle *)bundleWithIdentifier:(NSString *)identifier;
       |   40|
       |   41|+ (NSArray<NSBundle *> *)allBundles;
       |   42|+ (NSArray<NSBundle *> *)allFrameworks;
       |   43|
       |   44|/* Methods for loading and unloading bundles. */
       |   45|- (BOOL)load;
       |   46|@property (readonly, getter=isLoaded) BOOL loaded;
       |   47|- (BOOL)unload;
       |   48|
  ------------------
  | AFStringFromNetworkReachabilityStatus:
  |      0|   36|- (nullable instancetype)initWithURL:(NSURL *)url NS_AVAILABLE(10_6, 4_0);
  |      0|   37|
  |      0|   38|+ (NSBundle *)bundleForClass:(Class)aClass;
  |      0|   39|+ (nullable NSBundle *)bundleWithIdentifier:(NSString *)identifier;
  |      0|   40|
  |      0|   41|+ (NSArray<NSBundle *> *)allBundles;
  |      0|   42|+ (NSArray<NSBundle *> *)allFrameworks;
  |      0|   43|
  |      0|   44|/* Methods for loading and unloading bundles. */
  |      0|   45|- (BOOL)load;
  |      0|   46|@property (readonly, getter=isLoaded) BOOL loaded;
  |      0|   47|- (BOOL)unload;
  |      0|   48|
  ------------------
       |   49|- (BOOL)preflightAndReturnError:(NSError **)error NS_AVAILABLE(10_5, 2_0);
       |   50|- (BOOL)loadAndReturnError:(NSError **)error NS_AVAILABLE(10_5, 2_0);
       |   51|
       |   52|/* Methods for locating various components of a bundle. */
       |   53|@property (readonly, copy) NSURL *bundleURL NS_AVAILABLE(10_6, 4_0);
       |   54|@property (nullable, readonly, copy) NSURL *resourceURL NS_AVAILABLE(10_6, 4_0);
       |   55|@property (nullable, readonly, copy) NSURL *executableURL NS_AVAILABLE(10_6, 4_0);
       |   56|- (nullable NSURL *)URLForAuxiliaryExecutable:(NSString *)executableName NS_AVAILABLE(10_6, 4_0);
       |   57|
       |   58|@property (nullable, readonly, copy) NSURL *privateFrameworksURL NS_AVAILABLE(10_6, 4_0);
       |   59|@property (nullable, readonly, copy) NSURL *sharedFrameworksURL NS_AVAILABLE(10_6, 4_0);
       |   60|@property (nullable, readonly, copy) NSURL *sharedSupportURL NS_AVAILABLE(10_6, 4_0);
       |   61|@property (nullable, readonly, copy) NSURL *builtInPlugInsURL NS_AVAILABLE(10_6, 4_0);
       |   62|
       |   63|@property (nullable, readonly, copy) NSURL *appStoreReceiptURL NS_AVAILABLE(10_7, 7_0);
       |   64|
       |   65|@property (readonly, copy) NSString *bundlePath;
       |   66|@property (nullable, readonly, copy) NSString *resourcePath;
       |   67|@property (nullable, readonly, copy) NSString *executablePath;
       |   68|- (nullable NSString *)pathForAuxiliaryExecutable:(NSString *)executableName;
       |   69|
       |   70|@property (nullable, readonly, copy) NSString *privateFrameworksPath;
       |   71|@property (nullable, readonly, copy) NSString *sharedFrameworksPath;
       |   72|@property (nullable, readonly, copy) NSString *sharedSupportPath;
       |   73|@property (nullable, readonly, copy) NSString *builtInPlugInsPath;
       |   74|
       |   75|/* Methods for locating bundle resources.  Instance methods locate resources in the bundle indicated by the receiver; class methods take an argument pointing to a bundle on disk.  In the class methods, bundleURL is a URL pointing to the location of a bundle on disk, and may not be nil; bundlePath is the path equivalent of bundleURL, an absolute path pointing to the location of a bundle on disk.  By contrast, subpath is a relative path to a subdirectory inside the relevant global or localized resource directory, and should be nil if the resource file in question is not in a subdirectory.  Where appropriate, localizationName is the name of a .lproj directory in the bundle, minus the .lproj extension; passing nil for localizationName retrieves only global resources, whereas using a method without this argument retrieves both global and localized resources (using the standard localization search algorithm).  */
       |   76|
       |   77|+ (nullable NSURL *)URLForResource:(nullable NSString *)name withExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath inBundleWithURL:(NSURL *)bundleURL NS_AVAILABLE(10_6, 4_0);
       |   78|+ (nullable NSArray<NSURL *> *)URLsForResourcesWithExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath inBundleWithURL:(NSURL *)bundleURL NS_AVAILABLE(10_6, 4_0);
       |   79|
       |   80|- (nullable NSURL *)URLForResource:(nullable NSString *)name withExtension:(nullable NSString *)ext NS_AVAILABLE(10_6, 4_0);
       |   81|- (nullable NSURL *)URLForResource:(nullable NSString *)name withExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath NS_AVAILABLE(10_6, 4_0);
       |   82|- (nullable NSURL *)URLForResource:(nullable NSString *)name withExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath localization:(nullable NSString *)localizationName NS_AVAILABLE(10_6, 4_0);
       |   83|
       |   84|- (nullable NSArray<NSURL *> *)URLsForResourcesWithExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath NS_AVAILABLE(10_6, 4_0);
       |   85|- (nullable NSArray<NSURL *> *)URLsForResourcesWithExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath localization:(nullable NSString *)localizationName NS_AVAILABLE(10_6, 4_0);
       |   86|
       |   87|+ (nullable NSString *)pathForResource:(nullable NSString *)name ofType:(nullable NSString *)ext inDirectory:(NSString *)bundlePath;
       |   88|+ (NSArray<NSString *> *)pathsForResourcesOfType:(nullable NSString *)ext inDirectory:(NSString *)bundlePath;
       |   89|
       |   90|- (nullable NSString *)pathForResource:(nullable NSString *)name ofType:(nullable NSString *)ext;
       |   91|- (nullable NSString *)pathForResource:(nullable NSString *)name ofType:(nullable NSString *)ext inDirectory:(nullable NSString *)subpath;
       |   92|- (nullable NSString *)pathForResource:(nullable NSString *)name ofType:(nullable NSString *)ext inDirectory:(nullable NSString *)subpath forLocalization:(nullable NSString *)localizationName;
       |   93|
       |   94|- (NSArray<NSString *> *)pathsForResourcesOfType:(nullable NSString *)ext inDirectory:(nullable NSString *)subpath;
       |   95|- (NSArray<NSString *> *)pathsForResourcesOfType:(nullable NSString *)ext inDirectory:(nullable NSString *)subpath forLocalization:(nullable NSString *)localizationName;
       |   96|
       |   97|/* Method for retrieving localized strings. */
       |   98|- (NSString *)localizedStringForKey:(NSString *)key value:(nullable NSString *)value table:(nullable NSString *)tableName NS_FORMAT_ARGUMENT(1);
       |   99|
       |  100|/* Methods for obtaining various information about a bundle. */
       |  101|@property (nullable, readonly, copy) NSString *bundleIdentifier;
       |  102|@property (nullable, readonly, copy) NSDictionary<NSString *, id> *infoDictionary;
       |  103|@property (nullable, readonly, copy) NSDictionary<NSString *, id> *localizedInfoDictionary;
       |  104|- (nullable id)objectForInfoDictionaryKey:(NSString *)key;
       |  105|- (nullable Class)classNamed:(NSString *)className;
       |  106|@property (nullable, readonly) Class principalClass;
       |  107|
       |  108|/* Methods for dealing with localizations. */
       |  109|@property (readonly, copy) NSArray<NSString *> *preferredLocalizations;	// a subset of this bundle's localizations, re-ordered into the preferred order for this process's current execution environment; the main bundle's preferred localizations indicate the language (of text) the user is most likely seeing in the UI
       |  110|
       |  111|@property (readonly, copy) NSArray<NSString *> *localizations;		// list of language names this bundle appears to be localized to
       |  112|@property (nullable, readonly, copy) NSString *developmentLocalization;
       |  113|
       |  114|+ (NSArray<NSString *> *)preferredLocalizationsFromArray:(NSArray<NSString *> *)localizationsArray;
       |  115|+ (NSArray<NSString *> *)preferredLocalizationsFromArray:(NSArray<NSString *> *)localizationsArray forPreferences:(nullable NSArray<NSString *> *)preferencesArray;
       |  116|
       |  117|/* Method for determining executable architectures. */
       |  118|enum {
       |  119|    NSBundleExecutableArchitectureI386      = 0x00000007,
       |  120|    NSBundleExecutableArchitecturePPC       = 0x00000012,
       |  121|    NSBundleExecutableArchitectureX86_64    = 0x01000007,
       |  122|    NSBundleExecutableArchitecturePPC64     = 0x01000012
       |  123|};
       |  124|
       |  125|@property (nullable, readonly, copy) NSArray<NSNumber *> *executableArchitectures NS_AVAILABLE(10_5, 2_0);
       |  126|
       |  127|@end
       |  128|
       |  129|#define NSLocalizedString(key, comment) \
       |  130|	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:nil]
       |  131|#define NSLocalizedStringFromTable(key, tbl, comment) \
      0|  132|	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:(tbl)]
       |  133|#define NSLocalizedStringFromTableInBundle(key, tbl, bundle, comment) \
       |  134|	    [bundle localizedStringForKey:(key) value:@"" table:(tbl)]
       |  135|#define NSLocalizedStringWithDefaultValue(key, tbl, bundle, val, comment) \
       |  136|	    [bundle localizedStringForKey:(key) value:(val) table:(tbl)]
       |  137|
       |  138|@interface NSString (NSBundleExtensionMethods)
       |  139|
       |  140|/* For strings with length variations, such as from a stringsdict file, this method returns the variant at the given width. If there is no variant at the given width, the one for the next smaller width is returned. And if there are none smaller, the smallest available is returned. For strings without variations, this method returns self. The unit that width is expressed in is decided by the application or framework. But it is intended to be some measurement indicative of the context a string would fit best to avoid truncation and wasted space.
       |  141|*/ 
       |  142|- (NSString *)variantFittingPresentationWidth:(NSInteger)width NS_AVAILABLE(10_11, 9_0);
       |  143|
       |  144|@end
       |  145|
       |  146|FOUNDATION_EXPORT NSString * const NSBundleDidLoadNotification;
       |  147|FOUNDATION_EXPORT NSString * const NSLoadedClasses;	// notification key
       |  148|
       |  149|
       |  150|/*
       |  151| The NSBundleResourceRequest class is used to interact with the on demand resource loading system.
       |  152| 
       |  153| The purpose of the system is to allow an application to download certain resources on demand, when they are required. This also means that the system can purge a resource from disk when it is no longer required, which will save disk space. This class describes which resources are required, makes the request and reports progress, allows the app to specify how long during its execution that they are required.
       |  154| 
       |  155| Resources are downloaded into the application container, and are made available via the standard NSBundle resource lookup API.
       |  156| 
       |  157| The request object itself is lightweight. You may create as many as you need, for example to request the same set of tags in different components of your application.
  ------------------
  | -[AFHTTPResponseSerializer validateResponse:data:error:]:
  |      0|  113|
  |      0|  114|+ (NSArray<NSString *> *)preferredLocalizationsFromArray:(NSArray<NSString *> *)localizationsArray;
  |      0|  115|+ (NSArray<NSString *> *)preferredLocalizationsFromArray:(NSArray<NSString *> *)localizationsArray forPreferences:(nullable NSArray<NSString *> *)preferencesArray;
  |      0|  116|
  |      0|  117|/* Method for determining executable architectures. */
  |      0|  118|enum {
  |      0|  119|    NSBundleExecutableArchitectureI386      = 0x00000007,
  |      0|  120|    NSBundleExecutableArchitecturePPC       = 0x00000012,
  |      0|  121|    NSBundleExecutableArchitectureX86_64    = 0x01000007,
  |      0|  122|    NSBundleExecutableArchitecturePPC64     = 0x01000012
  |      0|  123|};
  |      0|  124|
  |      0|  125|@property (nullable, readonly, copy) NSArray<NSNumber *> *executableArchitectures NS_AVAILABLE(10_5, 2_0);
  |      0|  126|
  |      0|  127|@end
  |      0|  128|
  |      0|  129|#define NSLocalizedString(key, comment) \
  |      0|  130|	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:nil]
  |      0|  131|#define NSLocalizedStringFromTable(key, tbl, comment) \
  |      0|  132|	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:(tbl)]
  |      0|  133|#define NSLocalizedStringFromTableInBundle(key, tbl, bundle, comment) \
  |      0|  134|	    [bundle localizedStringForKey:(key) value:@"" table:(tbl)]
  |      0|  135|#define NSLocalizedStringWithDefaultValue(key, tbl, bundle, val, comment) \
  |      0|  136|	    [bundle localizedStringForKey:(key) value:(val) table:(tbl)]
  |      0|  137|
  |      0|  138|@interface NSString (NSBundleExtensionMethods)
  |      0|  139|
  |      0|  140|/* For strings with length variations, such as from a stringsdict file, this method returns the variant at the given width. If there is no variant at the given width, the one for the next smaller width is returned. And if there are none smaller, the smallest available is returned. For strings without variations, this method returns self. The unit that width is expressed in is decided by the application or framework. But it is intended to be some measurement indicative of the context a string would fit best to avoid truncation and wasted space.
  |      0|  141|*/ 
  |      0|  142|- (NSString *)variantFittingPresentationWidth:(NSInteger)width NS_AVAILABLE(10_11, 9_0);
  |      0|  143|
  |      0|  144|@end
  |      0|  145|
  |      0|  146|FOUNDATION_EXPORT NSString * const NSBundleDidLoadNotification;
  |      0|  147|FOUNDATION_EXPORT NSString * const NSLoadedClasses;	// notification key
  |      0|  148|
  |      0|  149|
  |      0|  150|/*
  |      0|  151| The NSBundleResourceRequest class is used to interact with the on demand resource loading system.
  |      0|  152| 
  |      0|  153| The purpose of the system is to allow an application to download certain resources on demand, when they are required. This also means that the system can purge a resource from disk when it is no longer required, which will save disk space. This class describes which resources are required, makes the request and reports progress, allows the app to specify how long during its execution that they are required.
  |      0|  154| 
  |      0|  155| Resources are downloaded into the application container, and are made available via the standard NSBundle resource lookup API.
  |      0|  156| 
  |      0|  157| The request object itself is lightweight. You may create as many as you need, for example to request the same set of tags in different components of your application.
  ------------------
       |  158|*/
       |  159|NS_CLASS_AVAILABLE(NA, 9_0)
       |  160|@interface NSBundleResourceRequest : NSObject <NSProgressReporting>
       |  161|
       |  162|- (instancetype)init NS_UNAVAILABLE;
       |  163|
       |  164|/*
       |  165| A tag and bundle are required arguments to the init methods. The tag argument is required and it must exist in the manifest of the specified bundle. The bundle argument describes an existing bundle which was built with on demand resources support. Any resources downloaded can be found using the standard NSBundle resource lookup API once the request is completed. If no bundle is specified then the main bundle is used.
       |  166| */
       |  167|- (instancetype)initWithTags:(NSSet<NSString *> *)tags;
       |  168|- (instancetype)initWithTags:(NSSet<NSString *> *)tags bundle:(NSBundle *)bundle NS_DESIGNATED_INITIALIZER;
       |  169|
       |  170|/*
       |  171| Provides a hint to the resource loading system as to the loading priority of this request. Values are limited to between 0 and 1, with 1 being the highest priority. The default priority is 0.5.
       |  172| 
       |  173| The exact meaning of the value is up to your application. The system will prefer to act on requests that have a higher priority (from the same application). You may change the priority at any time, even after a request has started. The system will make a best attempt to take the new priority into account.
       |  174| */
       |  175|@property double loadingPriority;
       |  176|
       |  177|/*
       |  178| The tags this request will load.
       |  179| */
       |  180|@property (readonly, copy) NSSet<NSString *> *tags;
       |  181|
       |  182|/*
       |  183| The bundle object that will hold the requested resources. After the -beginAccessingResourcesWithCompletionHandler: callback is invoked, you may use the standard bundle lookup APIs on this bundle object to find your resources.
       |  184| */
       |  185|@property (readonly, strong) NSBundle *bundle;
       |  186|
       |  187|/*
       |  188| Ask the system to fetch the resources that were part of the tag set in this request. Resources will not be purged while in use by the application (as indicated by the application using this begin API paired with a call to -endAccessingResources). If an application has too many fetched resources and the system is unable to reserve enough space for newly requested tags, the request may return an error.
       |  189| 
       |  190| When you are finished with the resources and they may be purged off the disk, invoke -endAccessingResources. If the request object is deallocated, it will also inform the system that the resources are no longer in use.
       |  191| 
       |  192| The completion block will be invoked on a non-main serial queue when the resources are available or an error has occurred. An example of a possible error that may be reported is the lack of a network connection or a problem connecting to the on-demand servers.
       |  193| 
       |  194| Fetch requests are reference counted across the application. So if you have two requests outstanding with the same set of tags, each may be used independently without having to know about any global state. However, each NSBundleResourceRequest object may only be used once.
       |  195| 
       |  196| If you cancel an outstanding request (via the cancel method on the NSProgress object, or cancelling a parent progress object you have created) the completion handler argument to this method will be called back with an NSUserCancelledError in the NSCocoaErrorDomain.
       |  197| 
       |  198| Be sure to always invoke the -endAccessingResources method to balance a call to the begin method, even in the case of an error in the completion handler.
       |  199| 
       |  200| If you want to access the resources again, create a new NSBundleResourceRequest object.
       |  201| */
       |  202|- (void)beginAccessingResourcesWithCompletionHandler:(void (^)(NSError * __nullable error))completionHandler;
       |  203|
       |  204|/*
       |  205| Inform the system that you wish to begin accessing the resources that are part of this request, but do not attempt to download any content over the network. The completion handler will be invoked with a YES argument if the resources are available.
       |  206| 
       |  207| If the resources were available, then you must invoke the -endAccessingResources method once you are done accessing them. If the resources were not available, then you may invoke the -beginAccessingResourcesWithCompletionHandler: method to initiate a download of the resources.
       |  208|*/
       |  209|- (void)conditionallyBeginAccessingResourcesWithCompletionHandler:(void (^)(BOOL resourcesAvailable))completionHandler;
       |  210|
       |  211|/*
       |  212| Informs the system that you are finished with the resources that were part of the tag set in this request. Call this after you no longer need the resources to be available on disk. It is important to invoke this method to make room for newly requested resources. This method may only be invoked if you have received a callback from -beginAccessingResourcesWithCompletionHandler:. To cancel an in-progress request, invoke cancel on the -progress property.
       |  213| */
       |  214|- (void)endAccessingResources;
       |  215|
       |  216|/*
       |  217| Progress for the request. The progress object will be valid at initialization and begin updating after the -beginAccessingResourcesWithCompletionHandler: method is called.
       |  218|*/
       |  219|@property (readonly, strong) NSProgress *progress;
       |  220|
       |  221|@end
       |  222|
       |  223|@interface NSBundle (NSBundleResourceRequestAdditions)
       |  224|
       |  225|/* Set a preservation priority for tags that are included in this bundle for the On Demand Resources system. Preservation priorities may be between 0.0 and 1.0, with higher values being the last choice for purging by the system. The exact meaning of this value is up to your application as it only has meaning within the set of tags your application uses.
       |  226|   
       |  227|   The default value is 0.0.
       |  228| 
       |  229|   This method will throw an exception if the receiver bundle has no on demand resource tag information.
       |  230|*/
       |  231|- (void)setPreservationPriority:(double)priority forTags:(NSSet<NSString *> *)tags NS_AVAILABLE(NA, 9_0);
       |  232|- (double)preservationPriorityForTag:(NSString *)tag NS_AVAILABLE(NA, 9_0);
       |  233|
       |  234|@end
       |  235|
       |  236|/*
       |  237| This notification is posted to the default notification center when the resource request system detects a low disk space condition.
       |  238| 
       |  239| If the application is in the background, the system needs more space, and the application does not free up enough in response to the notification then the application may be killed. The application can free up space by calling -endAccessingResources on any outstanding requests. This will inform the system that you are done with those resources and it may purge the content to make room for a new request.
       |  240| 
       |  241| Note that this notification may not be the same as low disk space on the system, as applications can have a smaller quota.
       |  242| */
       |  243|FOUNDATION_EXPORT NSString * const NSBundleResourceRequestLowDiskSpaceNotification NS_AVAILABLE(NA, 9_0);
       |  244|
       |  245|/* Use this value for the loadingPriority property if the user is doing nothing but waiting on the result of this request. The system will dedicate the maximum amount of resources available to finishing this request as soon as possible.
       |  246| */
       |  247|FOUNDATION_EXPORT double const NSBundleResourceRequestLoadingPriorityUrgent NS_AVAILABLE(NA, 9_0);
       |  248|
       |  249|NS_ASSUME_NONNULL_END

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/System/Library/Frameworks/Foundation.framework/Headers/NSException.h:
       |    1|/*	NSException.h
       |    2|	Copyright (c) 1994-2015, Apple Inc. All rights reserved.
       |    3|*/
       |    4|
       |    5|#import <Foundation/NSObject.h>
       |    6|#import <Foundation/NSString.h>
       |    7|#import <stdarg.h>
       |    8|#import <setjmp.h>
       |    9|
       |   10|@class NSString, NSDictionary, NSArray<ObjectType>, NSNumber;
       |   11|
       |   12|NS_ASSUME_NONNULL_BEGIN
       |   13|
       |   14|/***************	Generic Exception names		***************/
       |   15|
       |   16|FOUNDATION_EXPORT NSString * const NSGenericException;
       |   17|FOUNDATION_EXPORT NSString * const NSRangeException;
       |   18|FOUNDATION_EXPORT NSString * const NSInvalidArgumentException;
       |   19|FOUNDATION_EXPORT NSString * const NSInternalInconsistencyException;
       |   20|
       |   21|FOUNDATION_EXPORT NSString * const NSMallocException;
       |   22|
       |   23|FOUNDATION_EXPORT NSString * const NSObjectInaccessibleException;
       |   24|FOUNDATION_EXPORT NSString * const NSObjectNotAvailableException;
       |   25|FOUNDATION_EXPORT NSString * const NSDestinationInvalidException;
       |   26|    
       |   27|FOUNDATION_EXPORT NSString * const NSPortTimeoutException;
       |   28|FOUNDATION_EXPORT NSString * const NSInvalidSendPortException;
       |   29|FOUNDATION_EXPORT NSString * const NSInvalidReceivePortException;
       |   30|FOUNDATION_EXPORT NSString * const NSPortSendException;
       |   31|FOUNDATION_EXPORT NSString * const NSPortReceiveException;
       |   32|
       |   33|FOUNDATION_EXPORT NSString * const NSOldStyleException;
       |   34|
       |   35|/***************	Exception object	***************/
       |   36|
       |   37|#if __OBJC2__
       |   38|__attribute__((__objc_exception__))
       |   39|#endif
       |   40|@interface NSException : NSObject <NSCopying, NSCoding> {
       |   41|    @private
       |   42|    NSString		*name;
       |   43|    NSString		*reason;
       |   44|    NSDictionary	*userInfo;
       |   45|    id			reserved;
       |   46|}
       |   47|
       |   48|+ (NSException *)exceptionWithName:(NSString *)name reason:(nullable NSString *)reason userInfo:(nullable NSDictionary *)userInfo;
       |   49|- (instancetype)initWithName:(NSString *)aName reason:(nullable NSString *)aReason userInfo:(nullable NSDictionary *)aUserInfo NS_DESIGNATED_INITIALIZER;
       |   50|
       |   51|@property (readonly, copy) NSString *name;
       |   52|@property (nullable, readonly, copy) NSString *reason;
       |   53|@property (nullable, readonly, copy) NSDictionary *userInfo;
       |   54|
       |   55|@property (readonly, copy) NSArray<NSNumber *> *callStackReturnAddresses NS_AVAILABLE(10_5, 2_0);
       |   56|@property (readonly, copy) NSArray<NSString *> *callStackSymbols NS_AVAILABLE(10_6, 4_0);
       |   57|
       |   58|- (void)raise;
       |   59|
       |   60|@end
       |   61|
       |   62|@interface NSException (NSExceptionRaisingConveniences)
       |   63|
       |   64|+ (void)raise:(NSString *)name format:(NSString *)format, ... NS_FORMAT_FUNCTION(2,3);
       |   65|+ (void)raise:(NSString *)name format:(NSString *)format arguments:(va_list)argList NS_FORMAT_FUNCTION(2,0);
       |   66|
       |   67|@end
       |   68|
       |   69|
       |   70|#define NS_DURING		@try {
       |   71|#define NS_HANDLER		} @catch (NSException *localException) {
       |   72|#define NS_ENDHANDLER		}
       |   73|#define NS_VALUERETURN(v,t)	return (v)
       |   74|#define NS_VOIDRETURN		return
       |   75|
       |   76|
       |   77|typedef void NSUncaughtExceptionHandler(NSException *exception);
       |   78|
       |   79|FOUNDATION_EXPORT NSUncaughtExceptionHandler * __nullable NSGetUncaughtExceptionHandler(void);
       |   80|FOUNDATION_EXPORT void NSSetUncaughtExceptionHandler(NSUncaughtExceptionHandler * __nullable);
       |   81|
       |   82|
       |   83|#if __clang__
       |   84|#define __PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |   85|    _Pragma("clang diagnostic push") \
       |   86|    _Pragma("clang diagnostic ignored \"-Wformat-extra-args\"")
       |   87|
       |   88|#define __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS _Pragma("clang diagnostic pop")
       |   89|#else
       |   90|#define __PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS
       |   91|#define __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |   92|#endif
       |   93|
  ------------------
  | -[AFHTTPSessionManager setRequestSerializer:]:
  |      0|   89|#else
  |      0|   90|#define __PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS
  |      0|   91|#define __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
  |      0|   92|#endif
  |      0|   93|
  ------------------
       |   94|@class NSAssertionHandler;
       |   95|
       |   96|#if (defined(__STDC_VERSION__) && (199901L <= __STDC_VERSION__)) || (defined(__cplusplus) && (201103L <= __cplusplus))
       |   97|
       |   98|#if !defined(NS_BLOCK_ASSERTIONS)
       |   99|
  ------------------
  | -[AFHTTPSessionManager setResponseSerializer:]:
  |      0|   95|
  |      0|   96|#if (defined(__STDC_VERSION__) && (199901L <= __STDC_VERSION__)) || (defined(__cplusplus) && (201103L <= __cplusplus))
  |      0|   97|
  |      0|   98|#if !defined(NS_BLOCK_ASSERTIONS)
  |      0|   99|
  ------------------
       |  100|#if !defined(_NSAssertBody)
       |  101|#define NSAssert(condition, desc, ...)	\
      0|  102|    do {				\
      0|  103|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
      0|  104|	if (!(condition)) {		\
      0|  105|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
      0|  106|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
      0|  107|	    [[NSAssertionHandler currentHandler] handleFailureInMethod:_cmd \
      0|  108|		object:self file:__assert_file__ \
      0|  109|	    	lineNumber:__LINE__ description:(desc), ##__VA_ARGS__]; \
      0|  110|	}				\
      0|  111|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
      0|  112|    } while(0)
       |  113|#endif
       |  114|
       |  115|#if !defined(_NSCAssertBody)
       |  116|#define NSCAssert(condition, desc, ...) \
       |  117|    do {				\
       |  118|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  119|	if (!(condition)) {		\
       |  120|            NSString *__assert_fn__ = [NSString stringWithUTF8String:__PRETTY_FUNCTION__]; \
       |  121|            __assert_fn__ = __assert_fn__ ? __assert_fn__ : @"<Unknown Function>"; \
       |  122|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
       |  123|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
       |  124|	    [[NSAssertionHandler currentHandler] handleFailureInFunction:__assert_fn__ \
       |  125|		file:__assert_file__ \
       |  126|	    	lineNumber:__LINE__ description:(desc), ##__VA_ARGS__]; \
       |  127|	}				\
       |  128|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
       |  129|    } while(0)
       |  130|#endif
       |  131|
       |  132|#else // NS_BLOCK_ASSERTIONS defined
       |  133|
       |  134|#if !defined(_NSAssertBody)
       |  135|#define NSAssert(condition, desc, ...) do {} while (0)
       |  136|#endif
       |  137|
       |  138|#if !defined(_NSCAssertBody)
       |  139|#define NSCAssert(condition, desc, ...) do {} while (0)
       |  140|#endif
       |  141|
       |  142|#endif
       |  143|
       |  144|#if !defined(_NSAssertBody)
       |  145|#define NSAssert1(condition, desc, arg1) NSAssert((condition), (desc), (arg1))
       |  146|#define NSAssert2(condition, desc, arg1, arg2) NSAssert((condition), (desc), (arg1), (arg2))
       |  147|#define NSAssert3(condition, desc, arg1, arg2, arg3) NSAssert((condition), (desc), (arg1), (arg2), (arg3))
       |  148|#define NSAssert4(condition, desc, arg1, arg2, arg3, arg4) NSAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4))
       |  149|#define NSAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5) NSAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5))
      0|  150|#define NSParameterAssert(condition) NSAssert((condition), @"Invalid parameter not satisfying: %@", @#condition)
       |  151|#endif
       |  152|
       |  153|#if !defined(_NSCAssertBody)
       |  154|#define NSCAssert1(condition, desc, arg1) NSCAssert((condition), (desc), (arg1))
       |  155|#define NSCAssert2(condition, desc, arg1, arg2) NSCAssert((condition), (desc), (arg1), (arg2))
       |  156|#define NSCAssert3(condition, desc, arg1, arg2, arg3) NSCAssert((condition), (desc), (arg1), (arg2), (arg3))
  ------------------
  | -[UIWebView(AFNetworking) loadRequest:MIMEType:textEncodingName:progress:success:failure:]:
  |      0|  119|	if (!(condition)) {		\
  |      0|  120|            NSString *__assert_fn__ = [NSString stringWithUTF8String:__PRETTY_FUNCTION__]; \
  |      0|  121|            __assert_fn__ = __assert_fn__ ? __assert_fn__ : @"<Unknown Function>"; \
  |      0|  122|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
  |      0|  123|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
  |      0|  124|	    [[NSAssertionHandler currentHandler] handleFailureInFunction:__assert_fn__ \
  |      0|  125|		file:__assert_file__ \
  |      0|  126|	    	lineNumber:__LINE__ description:(desc), ##__VA_ARGS__]; \
  |      0|  127|	}				\
  |      0|  128|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
  |      0|  129|    } while(0)
  |      0|  130|#endif
  |      0|  131|
  |      0|  132|#else // NS_BLOCK_ASSERTIONS defined
  |      0|  133|
  |      0|  134|#if !defined(_NSAssertBody)
  |      0|  135|#define NSAssert(condition, desc, ...) do {} while (0)
  |      0|  136|#endif
  |      0|  137|
  |      0|  138|#if !defined(_NSCAssertBody)
  |      0|  139|#define NSCAssert(condition, desc, ...) do {} while (0)
  |      0|  140|#endif
  |      0|  141|
  |      0|  142|#endif
  |      0|  143|
  |      0|  144|#if !defined(_NSAssertBody)
  |      0|  145|#define NSAssert1(condition, desc, arg1) NSAssert((condition), (desc), (arg1))
  |      0|  146|#define NSAssert2(condition, desc, arg1, arg2) NSAssert((condition), (desc), (arg1), (arg2))
  |      0|  147|#define NSAssert3(condition, desc, arg1, arg2, arg3) NSAssert((condition), (desc), (arg1), (arg2), (arg3))
  |      0|  148|#define NSAssert4(condition, desc, arg1, arg2, arg3, arg4) NSAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4))
  |      0|  149|#define NSAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5) NSAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5))
  |      0|  150|#define NSParameterAssert(condition) NSAssert((condition), @"Invalid parameter not satisfying: %@", @#condition)
  |      0|  151|#endif
  |      0|  152|
  |      0|  153|#if !defined(_NSCAssertBody)
  |      0|  154|#define NSCAssert1(condition, desc, arg1) NSCAssert((condition), (desc), (arg1))
  |      0|  155|#define NSCAssert2(condition, desc, arg1, arg2) NSCAssert((condition), (desc), (arg1), (arg2))
  |      0|  156|#define NSCAssert3(condition, desc, arg1, arg2, arg3) NSCAssert((condition), (desc), (arg1), (arg2), (arg3))
  ------------------
       |  157|#define NSCAssert4(condition, desc, arg1, arg2, arg3, arg4) NSCAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4))
       |  158|#define NSCAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5) NSCAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5))
       |  159|#define NSCParameterAssert(condition) NSCAssert((condition), @"Invalid parameter not satisfying: %@", @#condition)
       |  160|#endif
       |  161|
       |  162|#endif
       |  163|
       |  164|
       |  165|/* Non-vararg implementation of asserts (ignore) */
       |  166|#if !defined(NS_BLOCK_ASSERTIONS)
       |  167|#if !defined(_NSAssertBody)
       |  168|#define _NSAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  169|    do {						\
       |  170|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  171|	if (!(condition)) {				\
       |  172|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
       |  173|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
       |  174|	    [[NSAssertionHandler currentHandler] handleFailureInMethod:_cmd object:self file:__assert_file__ \
       |  175|	    	lineNumber:__LINE__ description:(desc), (arg1), (arg2), (arg3), (arg4), (arg5)];	\
       |  176|	}						\
       |  177|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
       |  178|    } while(0)
       |  179|#endif
       |  180|#if !defined(_NSCAssertBody)
       |  181|#define _NSCAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  182|    do {						\
       |  183|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  184|	if (!(condition)) {				\
       |  185|            NSString *__assert_fn__ = [NSString stringWithUTF8String:__PRETTY_FUNCTION__]; \
       |  186|            __assert_fn__ = __assert_fn__ ? __assert_fn__ : @"<Unknown Function>"; \
       |  187|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
       |  188|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
       |  189|	    [[NSAssertionHandler currentHandler] handleFailureInFunction:__assert_fn__ file:__assert_file__ \
       |  190|	    	lineNumber:__LINE__ description:(desc), (arg1), (arg2), (arg3), (arg4), (arg5)];	\
       |  191|	}						\
       |  192|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
       |  193|    } while(0)
       |  194|#endif
       |  195|#else
       |  196|#if !defined(_NSAssertBody)
       |  197|#define _NSAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)
       |  198|#endif
       |  199|#if !defined(_NSCAssertBody)
       |  200|#define _NSCAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)
       |  201|#endif
       |  202|#endif
       |  203|
       |  204|
       |  205|/*
       |  206| * Asserts to use in Objective-C method bodies
       |  207| */
       |  208| 
       |  209|#if !defined(NSAssert)
       |  210|#define NSAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  211|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  212|    _NSAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5)) \
       |  213|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  214|
       |  215|#define NSAssert4(condition, desc, arg1, arg2, arg3, arg4)	\
       |  216|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  217|    _NSAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), 0) \
       |  218|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  219|
       |  220|#define NSAssert3(condition, desc, arg1, arg2, arg3)	\
       |  221|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  222|    _NSAssertBody((condition), (desc), (arg1), (arg2), (arg3), 0, 0) \
       |  223|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  224|
       |  225|#define NSAssert2(condition, desc, arg1, arg2)		\
       |  226|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  227|    _NSAssertBody((condition), (desc), (arg1), (arg2), 0, 0, 0) \
       |  228|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  229|
       |  230|#define NSAssert1(condition, desc, arg1)		\
       |  231|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  232|    _NSAssertBody((condition), (desc), (arg1), 0, 0, 0, 0) \
       |  233|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  234|
       |  235|#define NSAssert(condition, desc)			\
       |  236|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  237|    _NSAssertBody((condition), (desc), 0, 0, 0, 0, 0) \
       |  238|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  239|#endif
       |  240|
       |  241|#if !defined(NSParameterAssert)
       |  242|#define NSParameterAssert(condition)			\
       |  243|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  244|    _NSAssertBody((condition), @"Invalid parameter not satisfying: %s", #condition, 0, 0, 0, 0) \
       |  245|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  246|#endif
       |  247|
       |  248|
       |  249|#if !defined(NSCAssert)
       |  250|#define NSCAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  251|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  252|    _NSCAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5)) \
       |  253|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  254|
       |  255|#define NSCAssert4(condition, desc, arg1, arg2, arg3, arg4)	\
       |  256|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  257|    _NSCAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), 0) \
       |  258|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  259|
       |  260|#define NSCAssert3(condition, desc, arg1, arg2, arg3)	\
       |  261|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  262|    _NSCAssertBody((condition), (desc), (arg1), (arg2), (arg3), 0, 0) \
       |  263|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  264|
       |  265|#define NSCAssert2(condition, desc, arg1, arg2)	\
       |  266|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  267|    _NSCAssertBody((condition), (desc), (arg1), (arg2), 0, 0, 0) \
       |  268|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  269|
       |  270|#define NSCAssert1(condition, desc, arg1)		\
       |  271|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  272|    _NSCAssertBody((condition), (desc), (arg1), 0, 0, 0, 0) \
       |  273|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  274|
       |  275|#define NSCAssert(condition, desc)			\
       |  276|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  277|    _NSCAssertBody((condition), (desc), 0, 0, 0, 0, 0) \
       |  278|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  279|#endif
       |  280|
       |  281|#if !defined(NSCParameterAssert)
       |  282|#define NSCParameterAssert(condition)			\
       |  283|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  284|    _NSCAssertBody((condition), @"Invalid parameter not satisfying: %s", #condition, 0, 0, 0, 0) \
       |  285|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  286|#endif
       |  287|
       |  288|
       |  289|FOUNDATION_EXPORT NSString * const NSAssertionHandlerKey NS_AVAILABLE(10_6, 4_0);
       |  290|
       |  291|@interface NSAssertionHandler : NSObject {
       |  292|    @private
       |  293|    void *_reserved;
       |  294|}
       |  295|
       |  296|+ (NSAssertionHandler *)currentHandler;
       |  297|
       |  298|- (void)handleFailureInMethod:(SEL)selector object:(id)object file:(NSString *)fileName lineNumber:(NSInteger)line description:(nullable NSString *)format,... NS_FORMAT_FUNCTION(5,6);
       |  299|
       |  300|- (void)handleFailureInFunction:(NSString *)functionName file:(NSString *)fileName lineNumber:(NSInteger)line description:(nullable NSString *)format,... NS_FORMAT_FUNCTION(4,5);
       |  301|
       |  302|@end
       |  303|
       |  304|NS_ASSUME_NONNULL_END

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/System/Library/Frameworks/Foundation.framework/Headers/NSObjCRuntime.h:
       |    1|/*	NSObjCRuntime.h
       |    2|	Copyright (c) 1994-2015, Apple Inc. All rights reserved.
       |    3|*/
       |    4|
       |    5|#include <TargetConditionals.h>
       |    6|#include <Availability.h>
       |    7|
       |    8|#if (TARGET_OS_MAC && !(TARGET_OS_EMBEDDED || TARGET_OS_IPHONE)) || (TARGET_OS_EMBEDDED || TARGET_OS_IPHONE)
       |    9|#include <objc/NSObjCRuntime.h>
       |   10|#include <stdarg.h>
       |   11|#include <stdint.h>
       |   12|#include <limits.h>
       |   13|#include <AvailabilityMacros.h>
       |   14|#endif
       |   15|
       |   16|#if defined(__cplusplus)
       |   17|#define FOUNDATION_EXTERN extern "C"
       |   18|#else
       |   19|#define FOUNDATION_EXTERN extern
       |   20|#endif
       |   21|
       |   22|#if TARGET_OS_WIN32
       |   23|
       |   24|    #if defined(NSBUILDINGFOUNDATION)
       |   25|        #define FOUNDATION_EXPORT FOUNDATION_EXTERN __declspec(dllexport)
       |   26|    #else
       |   27|        #define FOUNDATION_EXPORT FOUNDATION_EXTERN __declspec(dllimport)
       |   28|    #endif
       |   29|
       |   30|    #define FOUNDATION_IMPORT FOUNDATION_EXTERN __declspec(dllimport)
       |   31|
       |   32|#else
       |   33|    #define FOUNDATION_EXPORT  FOUNDATION_EXTERN
       |   34|    #define FOUNDATION_IMPORT FOUNDATION_EXTERN
       |   35|#endif
       |   36|
       |   37|#if !defined(NS_INLINE)
       |   38|    #if defined(__GNUC__)
       |   39|        #define NS_INLINE static __inline__ __attribute__((always_inline))
       |   40|    #elif defined(__MWERKS__) || defined(__cplusplus)
       |   41|        #define NS_INLINE static inline
       |   42|    #elif defined(_MSC_VER)
       |   43|        #define NS_INLINE static __inline
       |   44|    #elif TARGET_OS_WIN32
       |   45|        #define NS_INLINE static __inline__
       |   46|    #endif
       |   47|#endif
       |   48|
       |   49|#if !defined(FOUNDATION_STATIC_INLINE)
       |   50|#define FOUNDATION_STATIC_INLINE static __inline__
       |   51|#endif
       |   52|
       |   53|#if !defined(FOUNDATION_EXTERN_INLINE)
       |   54|#define FOUNDATION_EXTERN_INLINE extern __inline__
       |   55|#endif
       |   56|
       |   57|#if !defined(NS_REQUIRES_NIL_TERMINATION)
       |   58|    #if TARGET_OS_WIN32
       |   59|        #define NS_REQUIRES_NIL_TERMINATION
       |   60|    #else
       |   61|        #if defined(__APPLE_CC__) && (__APPLE_CC__ >= 5549)
       |   62|            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel(0,1)))
       |   63|        #else
       |   64|            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel))
       |   65|        #endif
       |   66|    #endif
       |   67|#endif
       |   68|
       |   69|#if !defined(NS_BLOCKS_AVAILABLE)
       |   70|    #if __BLOCKS__ && (MAC_OS_X_VERSION_10_6 <= MAC_OS_X_VERSION_MAX_ALLOWED || __IPHONE_4_0 <= __IPHONE_OS_VERSION_MAX_ALLOWED)
       |   71|        #define NS_BLOCKS_AVAILABLE 1
       |   72|    #else
       |   73|        #define NS_BLOCKS_AVAILABLE 0
       |   74|    #endif
       |   75|#endif
       |   76|
       |   77|// Marks APIs whose iOS versions are nonatomic, that is cannot be set/get from multiple threads safely without additional synchronization
       |   78|#if !defined(NS_NONATOMIC_IOSONLY)
       |   79|    #if TARGET_OS_IPHONE
       |   80|	#define NS_NONATOMIC_IOSONLY nonatomic
  ------------------
  | AFPercentEscapedStringFromString:
  |      0|   47|#endif
  |      0|   48|
  |      0|   49|#if !defined(FOUNDATION_STATIC_INLINE)
  |      0|   50|#define FOUNDATION_STATIC_INLINE static __inline__
  |      0|   51|#endif
  |      0|   52|
  |      0|   53|#if !defined(FOUNDATION_EXTERN_INLINE)
  |      0|   54|#define FOUNDATION_EXTERN_INLINE extern __inline__
  |      0|   55|#endif
  |      0|   56|
  |      0|   57|#if !defined(NS_REQUIRES_NIL_TERMINATION)
  |      0|   58|    #if TARGET_OS_WIN32
  |      0|   59|        #define NS_REQUIRES_NIL_TERMINATION
  |      0|   60|    #else
  |      0|   61|        #if defined(__APPLE_CC__) && (__APPLE_CC__ >= 5549)
  |      0|   62|            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel(0,1)))
  |      0|   63|        #else
  |      0|   64|            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel))
  |      0|   65|        #endif
  |      0|   66|    #endif
  |      0|   67|#endif
  |      0|   68|
  |      0|   69|#if !defined(NS_BLOCKS_AVAILABLE)
  |      0|   70|    #if __BLOCKS__ && (MAC_OS_X_VERSION_10_6 <= MAC_OS_X_VERSION_MAX_ALLOWED || __IPHONE_4_0 <= __IPHONE_OS_VERSION_MAX_ALLOWED)
  |      0|   71|        #define NS_BLOCKS_AVAILABLE 1
  |      0|   72|    #else
  |      0|   73|        #define NS_BLOCKS_AVAILABLE 0
  |      0|   74|    #endif
  |      0|   75|#endif
  |      0|   76|
  |      0|   77|// Marks APIs whose iOS versions are nonatomic, that is cannot be set/get from multiple threads safely without additional synchronization
  |      0|   78|#if !defined(NS_NONATOMIC_IOSONLY)
  |      0|   79|    #if TARGET_OS_IPHONE
  |      0|   80|	#define NS_NONATOMIC_IOSONLY nonatomic
  ------------------
       |   81|    #else
       |   82|        #if __has_feature(objc_property_explicit_atomic)
       |   83|            #define NS_NONATOMIC_IOSONLY atomic
       |   84|        #else
       |   85|            #define NS_NONATOMIC_IOSONLY
       |   86|        #endif
       |   87|    #endif
       |   88|#endif
       |   89|
       |   90|// Use NS_NONATOMIC_IOSONLY instead of this older macro
       |   91|#if !defined(NS_NONATOMIC_IPHONEONLY)
       |   92|#define NS_NONATOMIC_IPHONEONLY NS_NONATOMIC_IOSONLY
       |   93|#endif
       |   94|
       |   95|// Marks APIs which format strings by taking a format string and optional varargs as arguments
       |   96|#if !defined(NS_FORMAT_FUNCTION)
       |   97|    #if (__GNUC__*10+__GNUC_MINOR__ >= 42) && (TARGET_OS_MAC || TARGET_OS_EMBEDDED)
       |   98|	#define NS_FORMAT_FUNCTION(F,A) __attribute__((format(__NSString__, F, A)))
       |   99|    #else
       |  100|	#define NS_FORMAT_FUNCTION(F,A)
       |  101|    #endif
       |  102|#endif
       |  103|
       |  104|// Marks APIs which are often used to process (take and return) format strings, so they can be used in place of a constant format string parameter in APIs
       |  105|#if !defined(NS_FORMAT_ARGUMENT)
       |  106|    #if defined(__clang__)
       |  107|	#define NS_FORMAT_ARGUMENT(A) __attribute__ ((format_arg(A)))
       |  108|    #else
       |  109|	#define NS_FORMAT_ARGUMENT(A)
       |  110|    #endif
       |  111|#endif
       |  112|
       |  113|// Some compilers provide the capability to test if certain features are available. This macro provides a compatibility path for other compilers.
       |  114|#ifndef __has_feature
       |  115|#define __has_feature(x) 0
       |  116|#endif
       |  117|
       |  118|#ifndef __has_extension
       |  119|#define __has_extension(x) 0
       |  120|#endif
       |  121|
       |  122|// Some compilers provide the capability to test if certain attributes are available. This macro provides a compatibility path for other compilers.
       |  123|#ifndef __has_attribute
       |  124|#define __has_attribute(x) 0
       |  125|#endif
       |  126|
       |  127|// Marks methods and functions which return an object that needs to be released by the caller but whose names are not consistent with Cocoa naming rules. The recommended fix to this is to rename the methods or functions, but this macro can be used to let the clang static analyzer know of any exceptions that cannot be fixed.
       |  128|// This macro is ONLY to be used in exceptional circumstances, not to annotate functions which conform to the Cocoa naming rules.
       |  129|#if __has_feature(attribute_ns_returns_retained)
       |  130|#define NS_RETURNS_RETAINED __attribute__((ns_returns_retained))
       |  131|#else
       |  132|#define NS_RETURNS_RETAINED
       |  133|#endif
       |  134|
       |  135|// Marks methods and functions which return an object that may need to be retained by the caller but whose names are not consistent with Cocoa naming rules. The recommended fix to this is to rename the methods or functions, but this macro can be used to let the clang static analyzer know of any exceptions that cannot be fixed.
       |  136|// This macro is ONLY to be used in exceptional circumstances, not to annotate functions which conform to the Cocoa naming rules.
       |  137|#if __has_feature(attribute_ns_returns_not_retained)
       |  138|#define NS_RETURNS_NOT_RETAINED __attribute__((ns_returns_not_retained))
       |  139|#else
       |  140|#define NS_RETURNS_NOT_RETAINED
       |  141|#endif
       |  142|
       |  143|#ifndef NS_RETURNS_INNER_POINTER
       |  144|#if __has_attribute(objc_returns_inner_pointer)
       |  145|#define NS_RETURNS_INNER_POINTER __attribute__((objc_returns_inner_pointer))
       |  146|#else
       |  147|#define NS_RETURNS_INNER_POINTER
       |  148|#endif
       |  149|#endif
       |  150|
       |  151|// Marks methods and functions which cannot be used when compiling in automatic reference counting mode.
       |  152|#if __has_feature(objc_arc)
       |  153|#define NS_AUTOMATED_REFCOUNT_UNAVAILABLE __attribute__((unavailable("not available in automatic reference counting mode")))
       |  154|#else
       |  155|#define NS_AUTOMATED_REFCOUNT_UNAVAILABLE
       |  156|#endif
       |  157|
       |  158|// Marks classes which cannot participate in the ARC weak reference feature.
       |  159|#if __has_attribute(objc_arc_weak_reference_unavailable)
       |  160|#define NS_AUTOMATED_REFCOUNT_WEAK_UNAVAILABLE __attribute__((objc_arc_weak_reference_unavailable))
       |  161|#else
       |  162|#define NS_AUTOMATED_REFCOUNT_WEAK_UNAVAILABLE
       |  163|#endif
       |  164|
       |  165|// Marks classes that must specify @dynamic or @synthesize for properties in their @implementation (property getters & setters will not be synthesized unless the @synthesize directive is used)
       |  166|#if __has_attribute(objc_requires_property_definitions)
       |  167|#define NS_REQUIRES_PROPERTY_DEFINITIONS __attribute__((objc_requires_property_definitions)) 
       |  168|#else
       |  169|#define NS_REQUIRES_PROPERTY_DEFINITIONS
       |  170|#endif
       |  171|
       |  172|// Decorates methods in which the receiver may be replaced with the result of the method. 
       |  173|#if __has_feature(attribute_ns_consumes_self)
       |  174|#define NS_REPLACES_RECEIVER __attribute__((ns_consumes_self)) NS_RETURNS_RETAINED
       |  175|#else
       |  176|#define NS_REPLACES_RECEIVER
       |  177|#endif
       |  178|
       |  179|#if __has_feature(attribute_ns_consumed)
       |  180|#define NS_RELEASES_ARGUMENT __attribute__((ns_consumed))
       |  181|#else
       |  182|#define NS_RELEASES_ARGUMENT
       |  183|#endif
       |  184|
       |  185|// Mark local variables of type 'id' or pointer-to-ObjC-object-type so that values stored into that local variable are not aggressively released by the compiler during optimization, but are held until either the variable is assigned to again, or the end of the scope (such as a compound statement, or method definition) of the local variable.
       |  186|#ifndef NS_VALID_UNTIL_END_OF_SCOPE
       |  187|#if __has_attribute(objc_precise_lifetime)
       |  188|#define NS_VALID_UNTIL_END_OF_SCOPE __attribute__((objc_precise_lifetime))
       |  189|#else
       |  190|#define NS_VALID_UNTIL_END_OF_SCOPE
       |  191|#endif
       |  192|#endif
       |  193|
       |  194|// Annotate classes which are root classes as really being root classes
       |  195|#ifndef NS_ROOT_CLASS
       |  196|#if __has_attribute(objc_root_class)
       |  197|#define NS_ROOT_CLASS __attribute__((objc_root_class))
       |  198|#else
       |  199|#define NS_ROOT_CLASS
       |  200|#endif
       |  201|#endif
       |  202|
       |  203|#ifndef NS_REQUIRES_SUPER
       |  204|#if __has_attribute(objc_requires_super)
       |  205|#define NS_REQUIRES_SUPER __attribute__((objc_requires_super))
       |  206|#else
       |  207|#define NS_REQUIRES_SUPER
       |  208|#endif
       |  209|#endif
       |  210|
       |  211|#ifndef NS_DESIGNATED_INITIALIZER
       |  212|#if __has_attribute(objc_designated_initializer)
       |  213|#define NS_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
       |  214|#else
       |  215|#define NS_DESIGNATED_INITIALIZER
       |  216|#endif
       |  217|#endif
       |  218|
       |  219|#ifndef NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION
       |  220|#if __has_attribute(objc_protocol_requires_explicit_implementation)
       |  221|#define NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION __attribute__((objc_protocol_requires_explicit_implementation))
       |  222|#else
       |  223|#define NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION
       |  224|#endif
       |  225|#endif
       |  226|
       |  227|#if !__has_feature(objc_instancetype)
       |  228|#undef instancetype
       |  229|#define instancetype id
       |  230|#endif
       |  231|
       |  232|#if !defined(NS_UNAVAILABLE)
       |  233|#define NS_UNAVAILABLE UNAVAILABLE_ATTRIBUTE
       |  234|#endif
       |  235|
       |  236|#if !defined(__unsafe_unretained)
       |  237|#define __unsafe_unretained
       |  238|#endif
       |  239|
       |  240|#if TARGET_OS_WIN32
       |  241|#import <objc/objc.h>
       |  242|#include <stdarg.h>
       |  243|#include <stdint.h>
       |  244|#include <limits.h>
       |  245|#endif
       |  246|
       |  247|#include <CoreFoundation/CFAvailability.h>
       |  248|
       |  249|#define NS_AVAILABLE(_mac, _ios) CF_AVAILABLE(_mac, _ios)
       |  250|#define NS_AVAILABLE_MAC(_mac) CF_AVAILABLE_MAC(_mac)
       |  251|#define NS_AVAILABLE_IOS(_ios) CF_AVAILABLE_IOS(_ios)
       |  252|
       |  253|#define NS_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, ...) CF_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, __VA_ARGS__)
       |  254|#define NS_DEPRECATED_MAC(_macIntro, _macDep, ...) CF_DEPRECATED_MAC(_macIntro, _macDep, __VA_ARGS__)
       |  255|#define NS_DEPRECATED_IOS(_iosIntro, _iosDep, ...) CF_DEPRECATED_IOS(_iosIntro, _iosDep, __VA_ARGS__)
       |  256|
       |  257|#define NS_ENUM_AVAILABLE(_mac, _ios) CF_ENUM_AVAILABLE(_mac, _ios)
       |  258|#define NS_ENUM_AVAILABLE_MAC(_mac) CF_ENUM_AVAILABLE_MAC(_mac)
       |  259|#define NS_ENUM_AVAILABLE_IOS(_ios) CF_ENUM_AVAILABLE_IOS(_ios)
       |  260|
       |  261|#define NS_ENUM_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, ...) CF_ENUM_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, __VA_ARGS__)
       |  262|#define NS_ENUM_DEPRECATED_MAC(_macIntro, _macDep, ...) CF_ENUM_DEPRECATED_MAC(_macIntro, _macDep, __VA_ARGS__)
       |  263|#define NS_ENUM_DEPRECATED_IOS(_iosIntro, _iosDep, ...) CF_ENUM_DEPRECATED_IOS(_iosIntro, _iosDep, __VA_ARGS__)
       |  264|
       |  265|#define NS_AVAILABLE_IPHONE(_ios) CF_AVAILABLE_IOS(_ios)
       |  266|#define NS_DEPRECATED_IPHONE(_iosIntro, _iosDep) CF_DEPRECATED_IOS(_iosIntro, _iosDep)
       |  267|
       |  268|/* NS_ENUM supports the use of one or two arguments. The first argument is always the integer type used for the values of the enum. The second argument is an optional type name for the macro. When specifying a type name, you must precede the macro with 'typedef' like so:
       |  269| 
       |  270|typedef NS_ENUM(NSInteger, NSComparisonResult) {
       |  271|    ...
       |  272|};
       |  273| 
       |  274|If you do not specify a type name, do not use 'typedef'. For example:
       |  275| 
       |  276|NS_ENUM(NSInteger) {
       |  277|    ...
       |  278|};
       |  279|*/
       |  280|#define NS_ENUM(...) CF_ENUM(__VA_ARGS__)
       |  281|#define NS_OPTIONS(_type, _name) CF_OPTIONS(_type, _name)
       |  282|
       |  283|// This macro is to be used by system frameworks to support the weak linking of classes. Weak linking is supported on iOS 3.1 and Mac OS X 10.6.8 or later.
       |  284|#if (__MAC_OS_X_VERSION_MIN_REQUIRED >= __MAC_10_6 || __IPHONE_OS_VERSION_MIN_REQUIRED >= __IPHONE_3_1) && \
       |  285|    ((__has_feature(objc_weak_class) || \
       |  286|     (defined(__llvm__) && defined(__APPLE_CC__) && (__APPLE_CC__ >= 5658)) || \
       |  287|     (defined(__APPLE_CC__) && (__APPLE_CC__ >= 5666))))
       |  288|#define NS_CLASS_AVAILABLE(_mac, _ios) __attribute__((visibility("default"))) NS_AVAILABLE(_mac, _ios)
       |  289|#define NS_CLASS_DEPRECATED(_mac, _macDep, _ios, _iosDep, ...) __attribute__((visibility("default"))) NS_DEPRECATED(_mac, _macDep, _ios, _iosDep, __VA_ARGS__)
       |  290|#else
       |  291|// class weak import is not supported
       |  292|#define NS_CLASS_AVAILABLE(_mac, _ios)
       |  293|#define NS_CLASS_DEPRECATED(_mac, _macDep, _ios, _iosDep, ...)
       |  294|#endif
       |  295|
       |  296|#define NS_CLASS_AVAILABLE_IOS(_ios) NS_CLASS_AVAILABLE(NA, _ios)
       |  297|#define NS_CLASS_AVAILABLE_MAC(_mac) NS_CLASS_AVAILABLE(_mac, NA)
       |  298|#define NS_CLASS_DEPRECATED_MAC(_macIntro, _macDep, ...) NS_CLASS_DEPRECATED(_macIntro, _macDep, NA, NA, __VA_ARGS__)
       |  299|#define NS_CLASS_DEPRECATED_IOS(_iosIntro, _iosDep, ...) NS_CLASS_DEPRECATED(NA, NA, _iosIntro, _iosDep, __VA_ARGS__)
       |  300|
       |  301|#define NS_EXTENSION_UNAVAILABLE(_msg)      __OS_EXTENSION_UNAVAILABLE(_msg)
       |  302|#define NS_EXTENSION_UNAVAILABLE_MAC(_msg)  __OSX_EXTENSION_UNAVAILABLE(_msg)
       |  303|#define NS_EXTENSION_UNAVAILABLE_IOS(_msg)  __IOS_EXTENSION_UNAVAILABLE(_msg)
       |  304|
       |  305|#define NS_SWIFT_UNAVAILABLE(_msg) CF_SWIFT_UNAVAILABLE(_msg)
       |  306|
       |  307|#define NS_ASSUME_NONNULL_BEGIN _Pragma("clang assume_nonnull begin")
       |  308|#define NS_ASSUME_NONNULL_END   _Pragma("clang assume_nonnull end")
       |  309|
       |  310|#define NS_REFINED_FOR_SWIFT CF_REFINED_FOR_SWIFT
       |  311|
       |  312|#define NS_SWIFT_NAME(_name) CF_SWIFT_NAME(_name)
       |  313|
       |  314|#if __has_attribute(swift_error)
       |  315|#define NS_SWIFT_NOTHROW __attribute__((swift_error(none)))
       |  316|#else
       |  317|#define NS_SWIFT_NOTHROW
       |  318|#endif
       |  319|
       |  320|
       |  321|NS_ASSUME_NONNULL_BEGIN
       |  322|
       |  323|FOUNDATION_EXPORT double NSFoundationVersionNumber;
       |  324|
       |  325|#if TARGET_OS_MAC
       |  326|#define NSFoundationVersionNumber10_0	397.40
       |  327|#define NSFoundationVersionNumber10_1	425.00
       |  328|#define NSFoundationVersionNumber10_1_1	425.00
       |  329|#define NSFoundationVersionNumber10_1_2	425.00
       |  330|#define NSFoundationVersionNumber10_1_3	425.00
       |  331|#define NSFoundationVersionNumber10_1_4	425.00
       |  332|#define NSFoundationVersionNumber10_2	462.00
       |  333|#define NSFoundationVersionNumber10_2_1	462.00
       |  334|#define NSFoundationVersionNumber10_2_2	462.00
       |  335|#define NSFoundationVersionNumber10_2_3	462.00
       |  336|#define NSFoundationVersionNumber10_2_4	462.00
       |  337|#define NSFoundationVersionNumber10_2_5	462.00
       |  338|#define NSFoundationVersionNumber10_2_6	462.00
       |  339|#define NSFoundationVersionNumber10_2_7	462.70
       |  340|#define NSFoundationVersionNumber10_2_8	462.70
       |  341|#define NSFoundationVersionNumber10_3	500.00
       |  342|#define NSFoundationVersionNumber10_3_1	500.00
       |  343|#define NSFoundationVersionNumber10_3_2	500.30
       |  344|#define NSFoundationVersionNumber10_3_3	500.54
       |  345|#define NSFoundationVersionNumber10_3_4	500.56
       |  346|#define NSFoundationVersionNumber10_3_5	500.56
       |  347|#define NSFoundationVersionNumber10_3_6	500.56
       |  348|#define NSFoundationVersionNumber10_3_7	500.56
       |  349|#define NSFoundationVersionNumber10_3_8	500.56
       |  350|#define NSFoundationVersionNumber10_3_9	500.58
       |  351|#define NSFoundationVersionNumber10_4	567.00
       |  352|#define NSFoundationVersionNumber10_4_1	567.00
       |  353|#define NSFoundationVersionNumber10_4_2	567.12
       |  354|#define NSFoundationVersionNumber10_4_3	567.21
       |  355|#define NSFoundationVersionNumber10_4_4_Intel	567.23
       |  356|#define NSFoundationVersionNumber10_4_4_PowerPC	567.21
       |  357|#define NSFoundationVersionNumber10_4_5	567.25
       |  358|#define NSFoundationVersionNumber10_4_6	567.26
       |  359|#define NSFoundationVersionNumber10_4_7	567.27
       |  360|#define NSFoundationVersionNumber10_4_8	567.28
       |  361|#define NSFoundationVersionNumber10_4_9	567.29
       |  362|#define NSFoundationVersionNumber10_4_10	567.29
       |  363|#define NSFoundationVersionNumber10_4_11	567.36
       |  364|#define NSFoundationVersionNumber10_5	677.00
       |  365|#define NSFoundationVersionNumber10_5_1	677.10
       |  366|#define NSFoundationVersionNumber10_5_2 677.15
       |  367|#define NSFoundationVersionNumber10_5_3 677.19
       |  368|#define NSFoundationVersionNumber10_5_4 677.19
       |  369|#define NSFoundationVersionNumber10_5_5 677.21
       |  370|#define NSFoundationVersionNumber10_5_6 677.22
       |  371|#define NSFoundationVersionNumber10_5_7 677.24
       |  372|#define NSFoundationVersionNumber10_5_8 677.26
       |  373|#define NSFoundationVersionNumber10_6 751.00
       |  374|#define NSFoundationVersionNumber10_6_1 751.00
       |  375|#define NSFoundationVersionNumber10_6_2 751.14
       |  376|#define NSFoundationVersionNumber10_6_3 751.21
       |  377|#define NSFoundationVersionNumber10_6_4 751.29
       |  378|#define NSFoundationVersionNumber10_6_5 751.42
       |  379|#define NSFoundationVersionNumber10_6_6 751.53
       |  380|#define NSFoundationVersionNumber10_6_7 751.53
       |  381|#define NSFoundationVersionNumber10_6_8 751.62
       |  382|#define NSFoundationVersionNumber10_7 833.10
       |  383|#define NSFoundationVersionNumber10_7_1 833.10
       |  384|#define NSFoundationVersionNumber10_7_2 833.20
       |  385|#define NSFoundationVersionNumber10_7_3 833.24
       |  386|#define NSFoundationVersionNumber10_7_4 833.25
       |  387|#define NSFoundationVersionNumber10_8 945.00
       |  388|#define NSFoundationVersionNumber10_8_1 945.00
       |  389|#define NSFoundationVersionNumber10_8_2 945.11
       |  390|#define NSFoundationVersionNumber10_8_3 945.16
       |  391|#define NSFoundationVersionNumber10_8_4 945.18
       |  392|#define NSFoundationVersionNumber10_9 1056
       |  393|#define NSFoundationVersionNumber10_9_1 1056
       |  394|#define NSFoundationVersionNumber10_9_2 1056.13
       |  395|#define NSFoundationVersionNumber10_10 1151.16
       |  396|#define NSFoundationVersionNumber10_10_1 1151.16
       |  397|#define NSFoundationVersionNumber10_10_2 1152.14
       |  398|#define NSFoundationVersionNumber10_10_3 1153.20
       |  399|#endif
       |  400|
       |  401|#if TARGET_OS_IPHONE
       |  402|#define NSFoundationVersionNumber_iPhoneOS_2_0	678.24
       |  403|#define NSFoundationVersionNumber_iPhoneOS_2_1  678.26
       |  404|#define NSFoundationVersionNumber_iPhoneOS_2_2  678.29
       |  405|#define NSFoundationVersionNumber_iPhoneOS_3_0  678.47
       |  406|#define NSFoundationVersionNumber_iPhoneOS_3_1  678.51
       |  407|#define NSFoundationVersionNumber_iPhoneOS_3_2  678.60
       |  408|#define NSFoundationVersionNumber_iOS_4_0  751.32
       |  409|#define NSFoundationVersionNumber_iOS_4_1  751.37
       |  410|#define NSFoundationVersionNumber_iOS_4_2  751.49
       |  411|#define NSFoundationVersionNumber_iOS_4_3  751.49
       |  412|#define NSFoundationVersionNumber_iOS_5_0  881.00
       |  413|#define NSFoundationVersionNumber_iOS_5_1  890.10
       |  414|#define NSFoundationVersionNumber_iOS_6_0  992.00
       |  415|#define NSFoundationVersionNumber_iOS_6_1  993.00
       |  416|#define NSFoundationVersionNumber_iOS_7_0 1047.20
       |  417|#define NSFoundationVersionNumber_iOS_7_1 1047.25
      0|  418|#define NSFoundationVersionNumber_iOS_8_0 1140.11
       |  419|#define NSFoundationVersionNumber_iOS_8_1 1141.1
       |  420|#define NSFoundationVersionNumber_iOS_8_2 1142.14
       |  421|#define NSFoundationVersionNumber_iOS_8_3 1144.17
       |  422|#define NSFoundationVersionNumber_iOS_8_4 1144.17
       |  423|#endif
       |  424|
       |  425|#if TARGET_OS_WIN32
       |  426|typedef long NSInteger;
       |  427|typedef unsigned long NSUInteger;
       |  428|
       |  429|#define NSIntegerMax    LONG_MAX
       |  430|#define NSIntegerMin    LONG_MIN
       |  431|#define NSUIntegerMax   ULONG_MAX
       |  432|
       |  433|#define NSINTEGER_DEFINED 1
       |  434|#endif
       |  435|
       |  436|@class NSString, Protocol;
       |  437|
       |  438|FOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);
       |  439|FOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);
       |  440|
       |  441|FOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);
       |  442|FOUNDATION_EXPORT Class __nullable NSClassFromString(NSString *aClassName);
       |  443|
       |  444|FOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) NS_AVAILABLE(10_5, 2_0);
       |  445|FOUNDATION_EXPORT Protocol * __nullable NSProtocolFromString(NSString *namestr) NS_AVAILABLE(10_5, 2_0);
       |  446|
       |  447|FOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * __nullable sizep, NSUInteger * __nullable alignp);
       |  448|
       |  449|FOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2);
       |  450|FOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0);
       |  451|
       |  452|typedef NS_ENUM(NSInteger, NSComparisonResult) {NSOrderedAscending = -1L, NSOrderedSame, NSOrderedDescending};
       |  453|
       |  454|#if NS_BLOCKS_AVAILABLE
       |  455|typedef NSComparisonResult (^NSComparator)(id obj1, id obj2);
       |  456|#endif
       |  457|
       |  458|typedef NS_OPTIONS(NSUInteger, NSEnumerationOptions) {
       |  459|    NSEnumerationConcurrent = (1UL << 0),
       |  460|    NSEnumerationReverse = (1UL << 1),
       |  461|};
       |  462|
       |  463|typedef NS_OPTIONS(NSUInteger, NSSortOptions) {
       |  464|    NSSortConcurrent = (1UL << 0),
       |  465|    NSSortStable = (1UL << 4),
       |  466|};
       |  467|
       |  468|/* The following Quality of Service (QoS) classifications are used to indicate to the system the nature and importance of work.  They are used by the system to manage a variety of resources.  Higher QoS classes receive more resources than lower ones during resource contention. */
       |  469|typedef NS_ENUM(NSInteger, NSQualityOfService) {
       |  470|    /* UserInteractive QoS is used for work directly involved in providing an interactive UI such as processing events or drawing to the screen. */
       |  471|    NSQualityOfServiceUserInteractive = 0x21,
       |  472|    
       |  473|    /* UserInitiated QoS is used for performing work that has been explicitly requested by the user and for which results must be immediately presented in order to allow for further user interaction.  For example, loading an email after a user has selected it in a message list. */
       |  474|    NSQualityOfServiceUserInitiated = 0x19,
       |  475|    
       |  476|    /* Utility QoS is used for performing work which the user is unlikely to be immediately waiting for the results.  This work may have been requested by the user or initiated automatically, does not prevent the user from further interaction, often operates at user-visible timescales and may have its progress indicated to the user by a non-modal progress indicator.  This work will run in an energy-efficient manner, in deference to higher QoS work when resources are constrained.  For example, periodic content updates or bulk file operations such as media import. */
       |  477|    NSQualityOfServiceUtility = 0x11,
       |  478|    
       |  479|    /* Background QoS is used for work that is not user initiated or visible.  In general, a user is unaware that this work is even happening and it will run in the most efficient manner while giving the most deference to higher QoS work.  For example, pre-fetching content, search indexing, backups, and syncing of data with external systems. */
       |  480|    NSQualityOfServiceBackground = 0x09,
       |  481|
       |  482|    /* Default QoS indicates the absence of QoS information.  Whenever possible QoS information will be inferred from other sources.  If such inference is not possible, a QoS between UserInitiated and Utility will be used. */
       |  483|    NSQualityOfServiceDefault = -1
       |  484|} NS_ENUM_AVAILABLE(10_10, 8_0);
       |  485|
       |  486|static const NSInteger NSNotFound = NSIntegerMax;
       |  487|
       |  488|NS_ASSUME_NONNULL_END
       |  489|
       |  490|#if !defined(YES)
       |  491|    #define YES	(BOOL)1
       |  492|#endif
       |  493|
       |  494|#if !defined(NO)
       |  495|    #define NO	(BOOL)0
       |  496|#endif
       |  497|
       |  498|#if !defined(NS_SUPPRESS_MIN_MAX_ABS)
       |  499|
       |  500|#if (defined(__GNUC__) || defined(__clang__)) && !defined(__STRICT_ANSI__)
       |  501|
       |  502|#if __clang__
       |  503|
      0|  504|#define __NSX_PASTE__(A,B) A##B
       |  505|
       |  506|#if !defined(MIN)
      0|  507|    #define __NSMIN_IMPL__(A,B,L) ({ __typeof__(A) __NSX_PASTE__(__a,L) = (A); __typeof__(B) __NSX_PASTE__(__b,L) = (B); (__NSX_PASTE__(__a,L) < __NSX_PASTE__(__b,L)) ? __NSX_PASTE__(__a,L) : __NSX_PASTE__(__b,L); })
      0|  508|    #define MIN(A,B) __NSMIN_IMPL__(A,B,__COUNTER__)
       |  509|#endif
       |  510|
       |  511|#if !defined(MAX)
      0|  512|    #define __NSMAX_IMPL__(A,B,L) ({ __typeof__(A) __NSX_PASTE__(__a,L) = (A); __typeof__(B) __NSX_PASTE__(__b,L) = (B); (__NSX_PASTE__(__a,L) < __NSX_PASTE__(__b,L)) ? __NSX_PASTE__(__b,L) : __NSX_PASTE__(__a,L); })
      0|  513|    #define MAX(A,B) __NSMAX_IMPL__(A,B,__COUNTER__)
       |  514|#endif
       |  515|
       |  516|#if !defined(ABS)
       |  517|    #define __NSABS_IMPL__(A,L) ({ __typeof__(A) __NSX_PASTE__(__a,L) = (A); (__NSX_PASTE__(__a,L) < 0) ? - __NSX_PASTE__(__a,L) : __NSX_PASTE__(__a,L); })
       |  518|    #define ABS(A) __NSABS_IMPL__(A,__COUNTER__)
       |  519|#endif
       |  520|
       |  521|#else
       |  522|
       |  523|#if !defined(MIN)
       |  524|    #define MIN(A,B)	({ __typeof__(A) __a = (A); __typeof__(B) __b = (B); __a < __b ? __a : __b; })
       |  525|#endif
       |  526|
       |  527|#if !defined(MAX)
       |  528|    #define MAX(A,B)	({ __typeof__(A) __a = (A); __typeof__(B) __b = (B); __a < __b ? __b : __a; })
       |  529|#endif
       |  530|
       |  531|#if !defined(ABS)
       |  532|    #define ABS(A)	({ __typeof__(A) __a = (A); __a < 0 ? -__a : __a; })
       |  533|#endif
       |  534|
       |  535|#endif
       |  536|
       |  537|#else
       |  538|
       |  539|#if !defined(MIN)
       |  540|    #define MIN(A,B)	((A) < (B) ? (A) : (B))
       |  541|#endif
       |  542|
       |  543|#if !defined(MAX)
       |  544|    #define MAX(A,B)	((A) > (B) ? (A) : (B))
       |  545|#endif
       |  546|
       |  547|#if !defined(ABS)
       |  548|    #define ABS(A)	((A) < 0 ? (-(A)) : (A))
       |  549|#endif
       |  550|
       |  551|#endif
       |  552|
       |  553|#endif
       |  554|

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/AssertMacros.h:
       |    1|/*
       |    2| * Copyright (c) 2002-2008 by Apple Inc.. All rights reserved.
       |    3| *
       |    4| * @APPLE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. Please obtain a copy of the License at
       |   10| * http://www.opensource.apple.com/apsl/ and read it before using this
       |   11| * file.
       |   12| * 
       |   13| * The Original Code and all software distributed under the License are
       |   14| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   15| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   16| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   18| * Please see the License for the specific language governing rights and
       |   19| * limitations under the License.
       |   20| * 
       |   21| * @APPLE_LICENSE_HEADER_END@
       |   22| */
       |   23|
       |   24|
       |   25|/*
       |   26|	File:       AssertMacros.h
       |   27| 
       |   28|	Contains:   This file defines structured error handling and assertion macros for
       |   29|				programming in C. Originally used in QuickDraw GX and later enhanced.
       |   30|				These macros are used throughout Apple's software.
       |   31|	
       |   32|				New code may not want to begin adopting these macros and instead use
       |   33|				existing language functionality.
       |   34|	
       |   35|				See "Living In an Exceptional World" by Sean Parent
       |   36|				(develop, The Apple Technical Journal, Issue 11, August/September 1992)
       |   37|				<http://developer.apple.com/dev/techsupport/develop/issue11toc.shtml> or
       |   38|				<http://www.mactech.com/articles/develop/issue_11/Parent_final.html>
       |   39|				for the methodology behind these error handling and assertion macros.
       |   40|	
       |   41|	Bugs?:      For bug reports, consult the following page on
       |   42|				the World Wide Web:
       |   43|
       |   44|	 http://developer.apple.com/bugreporter/ 
       |   45|*/
       |   46|#ifndef __ASSERTMACROS__
       |   47|#define __ASSERTMACROS__
       |   48|
       |   49|/*
       |   50| *  Macro overview:
       |   51| *  
       |   52| *      check(assertion)
       |   53| *         In production builds, pre-processed away  
       |   54| *         In debug builds, if assertion evaluates to false, calls DEBUG_ASSERT_MESSAGE
       |   55| *  
       |   56| *      verify(assertion)
       |   57| *         In production builds, evaluates assertion and does nothing
       |   58| *         In debug builds, if assertion evaluates to false, calls DEBUG_ASSERT_MESSAGE
       |   59| *  
       |   60| *      require(assertion, exceptionLabel)
       |   61| *         In production builds, if the assertion expression evaluates to false, goto exceptionLabel
       |   62| *         In debug builds, if the assertion expression evaluates to false, calls DEBUG_ASSERT_MESSAGE
       |   63| *                          and jumps to exceptionLabel
       |   64| *  
       |   65| *      In addition the following suffixes are available:
       |   66| * 
       |   67| *         _noerr     Adds "!= 0" to assertion.  Useful for asserting and OSStatus or OSErr is noErr (zero)
       |   68| *         _action    Adds statement to be executued if assertion fails
       |   69| *         _quiet     Suppress call to DEBUG_ASSERT_MESSAGE
       |   70| *         _string    Allows you to add explanitory message to DEBUG_ASSERT_MESSAGE
       |   71| *  
       |   72| *        For instance, require_noerr_string(resultCode, label, msg) will do nothing if 
       |   73| *        resultCode is zero, otherwise it will call DEBUG_ASSERT_MESSAGE with msg
       |   74| *        and jump to label.
       |   75| *
       |   76| *  Configuration:
       |   77| *
       |   78| *      By default all macros generate "production code" (i.e non-debug).  If  
       |   79| *      DEBUG_ASSERT_PRODUCTION_CODE is defined to zero or DEBUG is defined to non-zero
       |   80| *      while this header is included, the macros will generated debug code.
       |   81| *
       |   82| *      If DEBUG_ASSERT_COMPONENT_NAME_STRING is defined, all debug messages will
       |   83| *      be prefixed with it.
       |   84| *
       |   85| *      By default, all messages write to stderr.  If you would like to write a custom
       |   86| *      error message formater, defined DEBUG_ASSERT_MESSAGE to your function name.
       |   87| *
       |   88| *      Each individual macro will only be defined if it is not already defined, so
       |   89| *      you can redefine their behavior singly by providing your own definition before
       |   90| *      this file is included.
       |   91| *
       |   92| *      If you define __ASSERTMACROS__ before this file is included, then nothing in
       |   93| *      this file will take effect.
       |   94| *
       |   95| *      Prior to Mac OS X 10.6 the macro names used in this file conflicted with some
       |   96| *      user code, including libraries in boost and the proposed C++ standards efforts,
       |   97| *      and there was no way for a client of this header to resolve this conflict. Because
       |   98| *      of this, most of the macros have been changed so that they are prefixed with 
       |   99| *      __ and contain at least one capital letter, which should alleviate the current
       |  100| *      and future conflicts.  However, to allow current sources to continue to compile,
       |  101| *      compatibility macros are defined at the end with the old names.  A tops script 
  ------------------
  | AFServerTrustIsValid:
  |      0|   92| *      If you define __ASSERTMACROS__ before this file is included, then nothing in
  |      0|   93| *      this file will take effect.
  |      0|   94| *
  |      0|   95| *      Prior to Mac OS X 10.6 the macro names used in this file conflicted with some
  |      0|   96| *      user code, including libraries in boost and the proposed C++ standards efforts,
  |      0|   97| *      and there was no way for a client of this header to resolve this conflict. Because
  |      0|   98| *      of this, most of the macros have been changed so that they are prefixed with 
  |      0|   99| *      __ and contain at least one capital letter, which should alleviate the current
  |      0|  100| *      and future conflicts.  However, to allow current sources to continue to compile,
  |      0|  101| *      compatibility macros are defined at the end with the old names.  A tops script 
  ------------------
       |  102| *      at the end of this file will convert all of the old macro names used in a directory
       |  103| *      to the new names.  Clients are recommended to migrate over to these new macros as
       |  104| *      they update their sources because a future release of Mac OS X will remove the
       |  105| *      old macro definitions ( without the double-underscore prefix ).  Clients who
       |  106| *      want to compile without the old macro definitions can define the macro
       |  107| *      __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES to 0 before this file is
       |  108| *      included.
       |  109| */
       |  110|
       |  111|
       |  112|/*
       |  113| *  Before including this file, #define DEBUG_ASSERT_COMPONENT_NAME_STRING to
       |  114| *  a C-string containing the name of your client. This string will be passed to
       |  115| *  the DEBUG_ASSERT_MESSAGE macro for inclusion in any assertion messages.
       |  116| *
       |  117| *  If you do not define DEBUG_ASSERT_COMPONENT_NAME_STRING, the default
       |  118| *  DEBUG_ASSERT_COMPONENT_NAME_STRING value, an empty string, will be used by
       |  119| *  the assertion macros.
       |  120| */
       |  121|#ifndef DEBUG_ASSERT_COMPONENT_NAME_STRING
       |  122|    #define DEBUG_ASSERT_COMPONENT_NAME_STRING ""
       |  123|#endif
       |  124|
       |  125|
       |  126|/*
       |  127| *  To activate the additional assertion code and messages for non-production builds,
       |  128| *  #define DEBUG_ASSERT_PRODUCTION_CODE to zero before including this file.
       |  129| *
       |  130| *  If you do not define DEBUG_ASSERT_PRODUCTION_CODE, the default value 1 will be used
       |  131| *  (production code = no assertion code and no messages).
       |  132| */
       |  133|#ifndef DEBUG_ASSERT_PRODUCTION_CODE
       |  134|   #define DEBUG_ASSERT_PRODUCTION_CODE !DEBUG
       |  135|#endif
       |  136|
       |  137|
       |  138|/*
       |  139| *  DEBUG_ASSERT_MESSAGE(component, assertion, label, error, file, line, errorCode)
       |  140| *
       |  141| *  Summary:
       |  142| *    All assertion messages are routed through this macro. If you wish to use your
       |  143| *    own routine to display assertion messages, you can override DEBUG_ASSERT_MESSAGE
       |  144| *    by #defining DEBUG_ASSERT_MESSAGE before including this file.
       |  145| *
       |  146| *  Parameters:
       |  147| *
  ------------------
  | AFPublicKeyTrustChainForServerTrust:
  |      0|  115| *  the DEBUG_ASSERT_MESSAGE macro for inclusion in any assertion messages.
  |      0|  116| *
  |      0|  117| *  If you do not define DEBUG_ASSERT_COMPONENT_NAME_STRING, the default
  |      0|  118| *  DEBUG_ASSERT_COMPONENT_NAME_STRING value, an empty string, will be used by
  |      0|  119| *  the assertion macros.
  |      0|  120| */
  |      0|  121|#ifndef DEBUG_ASSERT_COMPONENT_NAME_STRING
  |      0|  122|    #define DEBUG_ASSERT_COMPONENT_NAME_STRING ""
  |      0|  123|#endif
  |      0|  124|
  |      0|  125|
  |      0|  126|/*
  |      0|  127| *  To activate the additional assertion code and messages for non-production builds,
  |      0|  128| *  #define DEBUG_ASSERT_PRODUCTION_CODE to zero before including this file.
  |      0|  129| *
  |      0|  130| *  If you do not define DEBUG_ASSERT_PRODUCTION_CODE, the default value 1 will be used
  |      0|  131| *  (production code = no assertion code and no messages).
  |      0|  132| */
  |      0|  133|#ifndef DEBUG_ASSERT_PRODUCTION_CODE
  |      0|  134|   #define DEBUG_ASSERT_PRODUCTION_CODE !DEBUG
  |      0|  135|#endif
  |      0|  136|
  |      0|  137|
  |      0|  138|/*
  |      0|  139| *  DEBUG_ASSERT_MESSAGE(component, assertion, label, error, file, line, errorCode)
  |      0|  140| *
  |      0|  141| *  Summary:
  |      0|  142| *    All assertion messages are routed through this macro. If you wish to use your
  |      0|  143| *    own routine to display assertion messages, you can override DEBUG_ASSERT_MESSAGE
  |      0|  144| *    by #defining DEBUG_ASSERT_MESSAGE before including this file.
  |      0|  145| *
  |      0|  146| *  Parameters:
  |      0|  147| *
  ------------------
       |  148| *    componentNameString:
       |  149| *      A pointer to a string constant containing the name of the
       |  150| *      component this code is part of. This must be a string constant
       |  151| *      (and not a string variable or NULL) because the preprocessor
       |  152| *      concatenates it with other string constants.
       |  153| *
       |  154| *    assertionString:
       |  155| *      A pointer to a string constant containing the assertion.
       |  156| *      This must be a string constant (and not a string variable or
       |  157| *      NULL) because the Preprocessor concatenates it with other
       |  158| *      string constants.
       |  159| *    
       |  160| *    exceptionLabelString:
       |  161| *      A pointer to a string containing the exceptionLabel, or NULL.
       |  162| *    
       |  163| *    errorString:
       |  164| *      A pointer to the error string, or NULL. DEBUG_ASSERT_MESSAGE macros
       |  165| *      must not attempt to concatenate this string with constant
       |  166| *      character strings.
       |  167| *    
       |  168| *    fileName:
       |  169| *      A pointer to the fileName or pathname (generated by the
       |  170| *      preprocessor __FILE__ identifier), or NULL.
       |  171| *    
       |  172| *    lineNumber:
       |  173| *      The line number in the file (generated by the preprocessor
       |  174| *      __LINE__ identifier), or 0 (zero).
       |  175| *    
       |  176| *    errorCode:
       |  177| *      A value associated with the assertion, or 0.
       |  178| *
       |  179| *  Here is an example of a DEBUG_ASSERT_MESSAGE macro and a routine which displays
       |  180| *  assertion messsages:
       |  181| *
       |  182| *      #define DEBUG_ASSERT_COMPONENT_NAME_STRING "MyCoolProgram"
       |  183| *
       |  184| *      #define DEBUG_ASSERT_MESSAGE(componentNameString, assertionString,                           \
       |  185| *                                   exceptionLabelString, errorString, fileName, lineNumber, errorCode) \
       |  186| *              MyProgramDebugAssert(componentNameString, assertionString,                           \
       |  187| *                                   exceptionLabelString, errorString, fileName, lineNumber, errorCode)
       |  188| *
       |  189| *      static void
       |  190| *      MyProgramDebugAssert(const char *componentNameString, const char *assertionString, 
       |  191| *                           const char *exceptionLabelString, const char *errorString, 
       |  192| *                           const char *fileName, long lineNumber, int errorCode)
       |  193| *      {
       |  194| *          if ( (assertionString != NULL) && (*assertionString != '\0') )
       |  195| *              fprintf(stderr, "Assertion failed: %s: %s\n", componentNameString, assertionString);
       |  196| *          else
       |  197| *              fprintf(stderr, "Check failed: %s:\n", componentNameString);
       |  198| *          if ( exceptionLabelString != NULL )
       |  199| *              fprintf(stderr, "    %s\n", exceptionLabelString);
       |  200| *          if ( errorString != NULL )
       |  201| *              fprintf(stderr, "    %s\n", errorString);
       |  202| *          if ( fileName != NULL )
       |  203| *              fprintf(stderr, "    file: %s\n", fileName);
       |  204| *          if ( lineNumber != 0 )
       |  205| *              fprintf(stderr, "    line: %ld\n", lineNumber);
       |  206| *          if ( errorCode != 0 )
       |  207| *              fprintf(stderr, "    error: %d\n", errorCode);
       |  208| *      }
       |  209| *
       |  210| *  If you do not define DEBUG_ASSERT_MESSAGE, a simple printf to stderr will be used.
       |  211| */
       |  212|#ifndef DEBUG_ASSERT_MESSAGE
       |  213|   #ifdef KERNEL
       |  214|      #include <libkern/libkern.h>
       |  215|      #define DEBUG_ASSERT_MESSAGE(name, assertion, label, message, file, line, value) \
       |  216|                                  printf( "AssertMacros: %s, %s file: %s, line: %d\n", assertion, (message!=0) ? message : "", file, line);
       |  217|   #else
       |  218|      #include <stdio.h>
       |  219|      #define DEBUG_ASSERT_MESSAGE(name, assertion, label, message, file, line, value) \
       |  220|                                  fprintf(stderr, "AssertMacros: %s, %s file: %s, line: %d\n", assertion, (message!=0) ? message : "", file, line);
       |  221|   #endif
       |  222|#endif
       |  223|
       |  224|
       |  225|
       |  226|
       |  227|
       |  228|/*
       |  229| *  __Debug_String(message)
       |  230| *
       |  231| *  Summary:
       |  232| *    Production builds: does nothing and produces no code.
       |  233| *
       |  234| *    Non-production builds: call DEBUG_ASSERT_MESSAGE.
       |  235| *
       |  236| *  Parameters:
       |  237| *
       |  238| *    message:
       |  239| *      The C string to display.
       |  240| *
       |  241| */
       |  242|#ifndef __Debug_String
       |  243|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  244|	   #define __Debug_String(message)
       |  245|	#else
       |  246|	   #define __Debug_String(message)                                             \
       |  247|		  do                                                                      \
       |  248|		  {                                                                       \
       |  249|			  DEBUG_ASSERT_MESSAGE(                                               \
       |  250|				  DEBUG_ASSERT_COMPONENT_NAME_STRING,                             \
       |  251|				  "",                                                             \
       |  252|				  0,                                                              \
       |  253|				  message,                                                        \
       |  254|				  __FILE__,                                                       \
       |  255|				  __LINE__,                                                       \
       |  256|				  0);                                                             \
       |  257|		  } while ( 0 )
       |  258|	#endif
       |  259|#endif
       |  260|
       |  261|/*
       |  262| *  __Check(assertion)
       |  263| *
       |  264| *  Summary:
       |  265| *    Production builds: does nothing and produces no code.
       |  266| *
       |  267| *    Non-production builds: if the assertion expression evaluates to false,
       |  268| *    call DEBUG_ASSERT_MESSAGE.
       |  269| *
       |  270| *  Parameters:
       |  271| *
       |  272| *    assertion:
       |  273| *      The assertion expression.
       |  274| */
       |  275|#ifndef __Check
       |  276|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  277|	   #define __Check(assertion)
       |  278|	#else
       |  279|	   #define __Check(assertion)                                                 \
       |  280|		  do                                                                      \
       |  281|		  {                                                                       \
       |  282|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  283|			  {                                                                   \
       |  284|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  285|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  286|					  #assertion, 0, 0, __FILE__, __LINE__, 0 );                  \
       |  287|			  }                                                                   \
       |  288|		  } while ( 0 )
       |  289|	#endif
       |  290|#endif
       |  291|
       |  292|#ifndef __nCheck
       |  293|	#define __nCheck(assertion)  __Check(!(assertion))
       |  294|#endif
       |  295|
       |  296|/*
       |  297| *  __Check_String(assertion, message)
       |  298| *
       |  299| *  Summary:
       |  300| *    Production builds: does nothing and produces no code.
       |  301| *
       |  302| *    Non-production builds: if the assertion expression evaluates to false,
       |  303| *    call DEBUG_ASSERT_MESSAGE.
       |  304| *
       |  305| *  Parameters:
       |  306| *
       |  307| *    assertion:
       |  308| *      The assertion expression.
       |  309| *
       |  310| *    message:
       |  311| *      The C string to display.
       |  312| */
       |  313|#ifndef __Check_String
       |  314|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  315|	   #define __Check_String(assertion, message)
       |  316|	#else
       |  317|	   #define __Check_String(assertion, message)                                 \
       |  318|		  do                                                                      \
       |  319|		  {                                                                       \
       |  320|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  321|			  {                                                                   \
       |  322|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  323|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  324|					  #assertion, 0, message, __FILE__, __LINE__, 0 );            \
       |  325|			  }                                                                   \
       |  326|		  } while ( 0 )
       |  327|	#endif
       |  328|#endif
       |  329|
       |  330|#ifndef __nCheck_String
       |  331|	#define __nCheck_String(assertion, message)  __Check_String(!(assertion), message)
       |  332|#endif
       |  333|
       |  334|/*
       |  335| *  __Check_noErr(errorCode)
       |  336| *
       |  337| *  Summary:
       |  338| *    Production builds: does nothing and produces no code.
       |  339| *
       |  340| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  341| *    call DEBUG_ASSERT_MESSAGE.
       |  342| *
       |  343| *  Parameters:
       |  344| *
       |  345| *    errorCode:
       |  346| *      The errorCode expression to compare with 0.
       |  347| */
       |  348|#ifndef __Check_noErr
       |  349|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  350|	   #define __Check_noErr(errorCode)
       |  351|	#else
       |  352|	   #define __Check_noErr(errorCode)                                           \
       |  353|		  do                                                                      \
       |  354|		  {                                                                       \
       |  355|			  long evalOnceErrorCode = (errorCode);                               \
       |  356|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       |  357|			  {                                                                   \
       |  358|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  359|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  360|					  #errorCode " == 0 ", 0, 0, __FILE__, __LINE__, evalOnceErrorCode ); \
       |  361|			  }                                                                   \
       |  362|		  } while ( 0 )
       |  363|	#endif
       |  364|#endif
       |  365|
       |  366|/*
       |  367| *  __Check_noErr_String(errorCode, message)
       |  368| *
       |  369| *  Summary:
       |  370| *    Production builds: check_noerr_string() does nothing and produces
       |  371| *    no code.
       |  372| *
       |  373| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  374| *    call DEBUG_ASSERT_MESSAGE.
       |  375| *
       |  376| *  Parameters:
       |  377| *
       |  378| *    errorCode:
       |  379| *      The errorCode expression to compare to 0.
       |  380| *
       |  381| *    message:
       |  382| *      The C string to display.
       |  383| */
       |  384|#ifndef __Check_noErr_String
       |  385|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  386|	   #define __Check_noErr_String(errorCode, message)
       |  387|	#else
       |  388|	   #define __Check_noErr_String(errorCode, message)                           \
       |  389|		  do                                                                      \
       |  390|		  {                                                                       \
       |  391|			  long evalOnceErrorCode = (errorCode);                               \
       |  392|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       |  393|			  {                                                                   \
       |  394|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  395|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  396|					  #errorCode " == 0 ", 0, message, __FILE__, __LINE__, evalOnceErrorCode ); \
       |  397|			  }                                                                   \
       |  398|		  } while ( 0 )
       |  399|	#endif
       |  400|#endif
       |  401|
       |  402|/*
       |  403| *  __Verify(assertion)
       |  404| *
       |  405| *  Summary:
       |  406| *    Production builds: evaluate the assertion expression, but ignore
       |  407| *    the result.
       |  408| *
       |  409| *    Non-production builds: if the assertion expression evaluates to false,
       |  410| *    call DEBUG_ASSERT_MESSAGE.
       |  411| *
       |  412| *  Parameters:
       |  413| *
       |  414| *    assertion:
       |  415| *      The assertion expression.
       |  416| */
       |  417|#ifndef __Verify
       |  418|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  419|	   #define __Verify(assertion)                                                \
       |  420|		  do                                                                      \
       |  421|		  {                                                                       \
       |  422|			  if ( !(assertion) )                                                 \
       |  423|			  {                                                                   \
       |  424|			  }                                                                   \
       |  425|		  } while ( 0 )
       |  426|	#else
       |  427|	   #define __Verify(assertion)                                                \
       |  428|		  do                                                                      \
       |  429|		  {                                                                       \
       |  430|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  431|			  {                                                                   \
       |  432|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  433|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  434|					  #assertion, 0, 0, __FILE__, __LINE__, 0 );                  \
       |  435|			  }                                                                   \
       |  436|		  } while ( 0 )
       |  437|	#endif
       |  438|#endif
       |  439|
       |  440|#ifndef __nVerify
       |  441|	#define __nVerify(assertion)	__Verify(!(assertion))
       |  442|#endif
       |  443|
       |  444|/*
       |  445| *  __Verify_String(assertion, message)
       |  446| *
       |  447| *  Summary:
       |  448| *    Production builds: evaluate the assertion expression, but ignore
       |  449| *    the result.
       |  450| *
       |  451| *    Non-production builds: if the assertion expression evaluates to false,
       |  452| *    call DEBUG_ASSERT_MESSAGE.
       |  453| *
       |  454| *  Parameters:
       |  455| *
       |  456| *    assertion:
       |  457| *      The assertion expression.
       |  458| *
       |  459| *    message:
       |  460| *      The C string to display.
       |  461| */
       |  462|#ifndef __Verify_String
       |  463|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  464|	   #define __Verify_String(assertion, message)                                \
       |  465|		  do                                                                      \
       |  466|		  {                                                                       \
       |  467|			  if ( !(assertion) )                                                 \
       |  468|			  {                                                                   \
       |  469|			  }                                                                   \
       |  470|		  } while ( 0 )
       |  471|	#else
       |  472|	   #define __Verify_String(assertion, message)                                \
       |  473|		  do                                                                      \
       |  474|		  {                                                                       \
       |  475|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  476|			  {                                                                   \
       |  477|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  478|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  479|					  #assertion, 0, message, __FILE__, __LINE__, 0 );            \
       |  480|			  }                                                                   \
       |  481|		  } while ( 0 )
       |  482|	#endif
       |  483|#endif
       |  484|
       |  485|#ifndef __nVerify_String
       |  486|	#define __nVerify_String(assertion, message)  __Verify_String(!(assertion), message)
       |  487|#endif
       |  488|
       |  489|/*
       |  490| *  __Verify_noErr(errorCode)
       |  491| *
       |  492| *  Summary:
       |  493| *    Production builds: evaluate the errorCode expression, but ignore
       |  494| *    the result.
       |  495| *
       |  496| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  497| *    call DEBUG_ASSERT_MESSAGE.
       |  498| *
       |  499| *  Parameters:
       |  500| *
       |  501| *    errorCode:
       |  502| *      The expression to compare to 0.
       |  503| */
       |  504|#ifndef __Verify_noErr
       |  505|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  506|	   #define __Verify_noErr(errorCode)                                          \
       |  507|		  do                                                                      \
       |  508|		  {                                                                       \
       |  509|			  if ( 0 != (errorCode) )                                             \
       |  510|			  {                                                                   \
       |  511|			  }                                                                   \
       |  512|		  } while ( 0 )
       |  513|	#else
       |  514|	   #define __Verify_noErr(errorCode)                                          \
       |  515|		  do                                                                      \
       |  516|		  {                                                                       \
       |  517|			  long evalOnceErrorCode = (errorCode);                               \
       |  518|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       |  519|			  {                                                                   \
       |  520|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  521|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  522|					  #errorCode " == 0 ", 0, 0, __FILE__, __LINE__, evalOnceErrorCode ); \
       |  523|			  }                                                                   \
       |  524|		  } while ( 0 )
       |  525|	#endif
       |  526|#endif
       |  527|
       |  528|/*
       |  529| *  __Verify_noErr_String(errorCode, message)
       |  530| *
       |  531| *  Summary:
       |  532| *    Production builds: evaluate the errorCode expression, but ignore
       |  533| *    the result.
       |  534| *
       |  535| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  536| *    call DEBUG_ASSERT_MESSAGE.
       |  537| *
       |  538| *  Parameters:
       |  539| *
       |  540| *    errorCode:
       |  541| *      The expression to compare to 0.
       |  542| *
       |  543| *    message:
       |  544| *      The C string to display.
       |  545| */
       |  546|#ifndef __Verify_noErr_String
       |  547|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  548|	   #define __Verify_noErr_String(errorCode, message)                          \
       |  549|		  do                                                                      \
       |  550|		  {                                                                       \
       |  551|			  if ( 0 != (errorCode) )                                             \
       |  552|			  {                                                                   \
       |  553|			  }                                                                   \
       |  554|		  } while ( 0 )
       |  555|	#else
       |  556|	   #define __Verify_noErr_String(errorCode, message)                          \
       |  557|		  do                                                                      \
       |  558|		  {                                                                       \
       |  559|			  long evalOnceErrorCode = (errorCode);                               \
       |  560|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       |  561|			  {                                                                   \
       |  562|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  563|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  564|					  #errorCode " == 0 ", 0, message, __FILE__, __LINE__, evalOnceErrorCode ); \
       |  565|			  }                                                                   \
       |  566|		  } while ( 0 )
       |  567|	#endif
       |  568|#endif
       |  569|
       |  570|/*
       |  571| *  __Verify_noErr_Action(errorCode, action)
       |  572| *
       |  573| *  Summary:
       |  574| *    Production builds: if the errorCode expression does not equal 0 (noErr),
       |  575| *    execute the action statement or compound statement (block).
       |  576| *
       |  577| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  578| *    call DEBUG_ASSERT_MESSAGE and then execute the action statement or compound
       |  579| *    statement (block).
       |  580| *
       |  581| *  Parameters:
       |  582| *
       |  583| *    errorCode:
       |  584| *      The expression to compare to 0.
       |  585| *
       |  586| *    action:
       |  587| *      The statement or compound statement (block).
       |  588| */
       |  589|#ifndef __Verify_noErr_Action
       |  590|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  591|	   #define __Verify_noErr_Action(errorCode, action)                          \
       |  592|		  if ( 0 != (errorCode) ) {                                              \
       |  593|			  action;                                                            \
       |  594|		  }                                                                      \
       |  595|		  else do {} while (0)
       |  596|	#else
       |  597|	   #define __Verify_noErr_Action(errorCode, action)                          \
       |  598|               do {                                                                   \
       |  599|		  long evalOnceErrorCode = (errorCode);                                  \
       |  600|		  if ( __builtin_expect(0 != evalOnceErrorCode, 0) ) {                   \
       |  601|			  DEBUG_ASSERT_MESSAGE(                                              \
       |  602|				  DEBUG_ASSERT_COMPONENT_NAME_STRING,                            \
       |  603|				  #errorCode " == 0 ", 0, 0, __FILE__, __LINE__, evalOnceErrorCode );            \
       |  604|			  action;                                                            \
       |  605|		  }                                                                      \
       |  606|	       } while (0)
       |  607|	#endif
       |  608|#endif
       |  609|
       |  610|/*
       |  611| *  __Verify_Action(assertion, action)
       |  612| *
       |  613| *  Summary:
       |  614| *    Production builds: if the assertion expression evaluates to false,
       |  615| *    then execute the action statement or compound statement (block).
       |  616| *
       |  617| *    Non-production builds: if the assertion expression evaluates to false,
       |  618| *    call DEBUG_ASSERT_MESSAGE and then execute the action statement or compound
       |  619| *    statement (block).
       |  620| *
       |  621| *  Parameters:
       |  622| *
       |  623| *    assertion:
       |  624| *      The assertion expression.
       |  625| *
       |  626| *    action:
       |  627| *      The statement or compound statement (block).
       |  628| */
       |  629|#ifndef __Verify_Action
       |  630|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  631|	   #define __Verify_Action(assertion, action)                                \
       |  632|		  if ( __builtin_expect(!(assertion), 0) ) {                             \
       |  633|			action;                                                              \
       |  634|		  }                                                                      \
       |  635|		  else do {} while (0)
       |  636|	#else
       |  637|	   #define __Verify_Action(assertion, action)                                \
       |  638|		  if ( __builtin_expect(!(assertion), 0) ) {                             \
       |  639|			  DEBUG_ASSERT_MESSAGE(                                              \
       |  640|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                        \
       |  641|					  #assertion, 0, 0, __FILE__, __LINE__, 0 );                 \
       |  642|			  action;                                                            \
       |  643|		  }                                                                      \
       |  644|		  else do {} while (0)
       |  645|	#endif
       |  646|#endif
       |  647|
       |  648|/*
       |  649| *  __Require(assertion, exceptionLabel)
       |  650| *
       |  651| *  Summary:
       |  652| *    Production builds: if the assertion expression evaluates to false,
       |  653| *    goto exceptionLabel.
       |  654| *
       |  655| *    Non-production builds: if the assertion expression evaluates to false,
       |  656| *    call DEBUG_ASSERT_MESSAGE and then goto exceptionLabel.
       |  657| *
       |  658| *  Parameters:
       |  659| *
       |  660| *    assertion:
       |  661| *      The assertion expression.
       |  662| *
       |  663| *    exceptionLabel:
       |  664| *      The label.
       |  665| */
       |  666|#ifndef __Require
       |  667|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  668|	   #define __Require(assertion, exceptionLabel)                               \
       |  669|		  do                                                                      \
       |  670|		  {                                                                       \
       |  671|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  672|			  {                                                                   \
       |  673|				  goto exceptionLabel;                                            \
       |  674|			  }                                                                   \
       |  675|		  } while ( 0 )
       |  676|	#else
       |  677|	   #define __Require(assertion, exceptionLabel)                               \
       |  678|		  do                                                                      \
       |  679|		  {                                                                       \
       |  680|			  if ( __builtin_expect(!(assertion), 0) ) {                          \
       |  681|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  682|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  683|					  #assertion, #exceptionLabel, 0, __FILE__, __LINE__,  0);    \
       |  684|				  goto exceptionLabel;                                            \
       |  685|			  }                                                                   \
       |  686|		  } while ( 0 )
       |  687|	#endif
       |  688|#endif
       |  689|
       |  690|#ifndef __nRequire
       |  691|	#define __nRequire(assertion, exceptionLabel)  __Require(!(assertion), exceptionLabel)
       |  692|#endif
       |  693|
       |  694|/*
       |  695| *  __Require_Action(assertion, exceptionLabel, action)
       |  696| *
       |  697| *  Summary:
       |  698| *    Production builds: if the assertion expression evaluates to false,
       |  699| *    execute the action statement or compound statement (block) and then
       |  700| *    goto exceptionLabel.
       |  701| *
       |  702| *    Non-production builds: if the assertion expression evaluates to false,
       |  703| *    call DEBUG_ASSERT_MESSAGE, execute the action statement or compound
       |  704| *    statement (block), and then goto exceptionLabel.
       |  705| *
       |  706| *  Parameters:
       |  707| *
       |  708| *    assertion:
       |  709| *      The assertion expression.
       |  710| *
       |  711| *    exceptionLabel:
       |  712| *      The label.
       |  713| *
       |  714| *    action:
       |  715| *      The statement or compound statement (block).
       |  716| */
       |  717|#ifndef __Require_Action
       |  718|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  719|	   #define __Require_Action(assertion, exceptionLabel, action)                \
       |  720|		  do                                                                      \
       |  721|		  {                                                                       \
       |  722|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  723|			  {                                                                   \
       |  724|				  {                                                               \
       |  725|					  action;                                                     \
       |  726|				  }                                                               \
       |  727|				  goto exceptionLabel;                                            \
       |  728|			  }                                                                   \
       |  729|		  } while ( 0 )
       |  730|	#else
       |  731|	   #define __Require_Action(assertion, exceptionLabel, action)                \
       |  732|		  do                                                                      \
       |  733|		  {                                                                       \
       |  734|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  735|			  {                                                                   \
       |  736|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  737|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  738|					  #assertion, #exceptionLabel, 0,   __FILE__, __LINE__, 0);   \
       |  739|				  {                                                               \
       |  740|					  action;                                                     \
       |  741|				  }                                                               \
       |  742|				  goto exceptionLabel;                                            \
       |  743|			  }                                                                   \
       |  744|		  } while ( 0 )
       |  745|	#endif
       |  746|#endif
       |  747|
       |  748|#ifndef __nRequire_Action
       |  749|	#define __nRequire_Action(assertion, exceptionLabel, action)                  \
       |  750|	__Require_Action(!(assertion), exceptionLabel, action)
       |  751|#endif
       |  752|
       |  753|/*
       |  754| *  __Require_Quiet(assertion, exceptionLabel)
       |  755| *
       |  756| *  Summary:
       |  757| *    If the assertion expression evaluates to false, goto exceptionLabel.
       |  758| *
       |  759| *  Parameters:
       |  760| *
       |  761| *    assertion:
       |  762| *      The assertion expression.
       |  763| *
       |  764| *    exceptionLabel:
       |  765| *      The label.
       |  766| */
       |  767|#ifndef __Require_Quiet
       |  768|	#define __Require_Quiet(assertion, exceptionLabel)                            \
      0|  769|	  do                                                                          \
      0|  770|	  {                                                                           \
      0|  771|		  if ( __builtin_expect(!(assertion), 0) )                                \
      0|  772|		  {                                                                       \
      0|  773|			  goto exceptionLabel;                                                \
      0|  774|		  }                                                                       \
      0|  775|	  } while ( 0 )
       |  776|#endif
       |  777|
       |  778|#ifndef __nRequire_Quiet
       |  779|	#define __nRequire_Quiet(assertion, exceptionLabel)  __Require_Quiet(!(assertion), exceptionLabel)
       |  780|#endif
       |  781|
       |  782|/*
       |  783| *  __Require_Action_Quiet(assertion, exceptionLabel, action)
       |  784| *
       |  785| *  Summary:
       |  786| *    If the assertion expression evaluates to false, execute the action
       |  787| *    statement or compound statement (block), and goto exceptionLabel.
       |  788| *
       |  789| *  Parameters:
       |  790| *
       |  791| *    assertion:
       |  792| *      The assertion expression.
       |  793| *
       |  794| *    exceptionLabel:
       |  795| *      The label.
       |  796| *
       |  797| *    action:
       |  798| *      The statement or compound statement (block).
       |  799| */
       |  800|#ifndef __Require_Action_Quiet
       |  801|	#define __Require_Action_Quiet(assertion, exceptionLabel, action)             \
       |  802|	  do                                                                          \
       |  803|	  {                                                                           \
       |  804|		  if ( __builtin_expect(!(assertion), 0) )                                \
       |  805|		  {                                                                       \
       |  806|			  {                                                                   \
       |  807|				  action;                                                         \
       |  808|			  }                                                                   \
       |  809|			  goto exceptionLabel;                                                \
       |  810|		  }                                                                       \
       |  811|	  } while ( 0 )
       |  812|#endif
       |  813|
       |  814|#ifndef __nRequire_Action_Quiet
       |  815|	#define __nRequire_Action_Quiet(assertion, exceptionLabel, action)              \
       |  816|		__Require_Action_Quiet(!(assertion), exceptionLabel, action)
       |  817|#endif
       |  818|
       |  819|/*
       |  820| *  __Require_String(assertion, exceptionLabel, message)
       |  821| *
       |  822| *  Summary:
       |  823| *    Production builds: if the assertion expression evaluates to false,
       |  824| *    goto exceptionLabel.
       |  825| *
       |  826| *    Non-production builds: if the assertion expression evaluates to false,
       |  827| *    call DEBUG_ASSERT_MESSAGE, and then goto exceptionLabel.
       |  828| *
       |  829| *  Parameters:
       |  830| *
       |  831| *    assertion:
       |  832| *      The assertion expression.
       |  833| *
       |  834| *    exceptionLabel:
       |  835| *      The label.
       |  836| *
       |  837| *    message:
       |  838| *      The C string to display.
       |  839| */
       |  840|#ifndef __Require_String
       |  841|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  842|	   #define __Require_String(assertion, exceptionLabel, message)               \
       |  843|		  do                                                                      \
       |  844|		  {                                                                       \
       |  845|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  846|			  {                                                                   \
       |  847|				  goto exceptionLabel;                                            \
       |  848|			  }                                                                   \
       |  849|		  } while ( 0 )
       |  850|	#else
       |  851|	   #define __Require_String(assertion, exceptionLabel, message)               \
       |  852|		  do                                                                      \
       |  853|		  {                                                                       \
       |  854|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  855|			  {                                                                   \
       |  856|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  857|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  858|					  #assertion, #exceptionLabel,  message,  __FILE__, __LINE__, 0); \
       |  859|				  goto exceptionLabel;                                            \
       |  860|			  }                                                                   \
       |  861|		  } while ( 0 )
       |  862|	#endif
       |  863|#endif
       |  864|
       |  865|#ifndef __nRequire_String
       |  866|	#define __nRequire_String(assertion, exceptionLabel, string)                  \
       |  867|		__Require_String(!(assertion), exceptionLabel, string)
       |  868|#endif
       |  869|
       |  870|/*
       |  871| *  __Require_Action_String(assertion, exceptionLabel, action, message)
       |  872| *
       |  873| *  Summary:
       |  874| *    Production builds: if the assertion expression evaluates to false,
       |  875| *    execute the action statement or compound statement (block), and then
       |  876| *    goto exceptionLabel.
       |  877| *
       |  878| *    Non-production builds: if the assertion expression evaluates to false,
       |  879| *    call DEBUG_ASSERT_MESSAGE, execute the action statement or compound
       |  880| *    statement (block), and then goto exceptionLabel.
       |  881| *
       |  882| *  Parameters:
       |  883| *
       |  884| *    assertion:
       |  885| *      The assertion expression.
       |  886| *
       |  887| *    exceptionLabel:
       |  888| *      The label.
       |  889| *
       |  890| *    action:
       |  891| *      The statement or compound statement (block).
       |  892| *
       |  893| *    message:
       |  894| *      The C string to display.
       |  895| */
       |  896|#ifndef __Require_Action_String
       |  897|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  898|	   #define __Require_Action_String(assertion, exceptionLabel, action, message)  \
       |  899|		  do                                                                      \
       |  900|		  {                                                                       \
       |  901|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  902|			  {                                                                   \
       |  903|				  {                                                               \
       |  904|					  action;                                                     \
       |  905|				  }                                                               \
       |  906|				  goto exceptionLabel;                                            \
       |  907|			  }                                                                   \
       |  908|		  } while ( 0 )
       |  909|	#else
       |  910|	   #define __Require_Action_String(assertion, exceptionLabel, action, message)  \
       |  911|		  do                                                                      \
       |  912|		  {                                                                       \
       |  913|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  914|			  {                                                                   \
       |  915|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  916|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  917|					  #assertion, #exceptionLabel,  message,  __FILE__,  __LINE__, 0); \
       |  918|				  {                                                               \
       |  919|					  action;                                                     \
       |  920|				  }                                                               \
       |  921|				  goto exceptionLabel;                                            \
       |  922|			  }                                                                   \
       |  923|		  } while ( 0 )
       |  924|	#endif
       |  925|#endif
       |  926|
       |  927|#ifndef __nRequire_Action_String
       |  928|	#define __nRequire_Action_String(assertion, exceptionLabel, action, message)    \
       |  929|		__Require_Action_String(!(assertion), exceptionLabel, action, message)
       |  930|#endif
       |  931|
       |  932|/*
       |  933| *  __Require_noErr(errorCode, exceptionLabel)
       |  934| *
       |  935| *  Summary:
       |  936| *    Production builds: if the errorCode expression does not equal 0 (noErr),
       |  937| *    goto exceptionLabel.
       |  938| *
       |  939| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  940| *    call DEBUG_ASSERT_MESSAGE and then goto exceptionLabel.
       |  941| *
       |  942| *  Parameters:
       |  943| *
       |  944| *    errorCode:
       |  945| *      The expression to compare to 0.
       |  946| *
       |  947| *    exceptionLabel:
       |  948| *      The label.
       |  949| */
       |  950|#ifndef __Require_noErr
       |  951|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  952|	   #define __Require_noErr(errorCode, exceptionLabel)                         \
       |  953|		  do                                                                      \
       |  954|		  {                                                                       \
       |  955|			  if ( __builtin_expect(0 != (errorCode), 0) )                        \
       |  956|			  {                                                                   \
       |  957|				  goto exceptionLabel;                                            \
       |  958|			  }                                                                   \
       |  959|		  } while ( 0 )
       |  960|	#else
       |  961|	   #define __Require_noErr(errorCode, exceptionLabel)                         \
       |  962|		  do                                                                      \
       |  963|		  {                                                                       \
       |  964|			  long evalOnceErrorCode = (errorCode);                               \
       |  965|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       |  966|			  {                                                                   \
       |  967|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  968|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  969|					  #errorCode " == 0 ",  #exceptionLabel,  0,  __FILE__, __LINE__, evalOnceErrorCode); \
       |  970|				  goto exceptionLabel;                                            \
       |  971|			  }                                                                   \
       |  972|		  } while ( 0 )
       |  973|	#endif
       |  974|#endif
       |  975|
       |  976|/*
       |  977| *  __Require_noErr_Action(errorCode, exceptionLabel, action)
       |  978| *
       |  979| *  Summary:
       |  980| *    Production builds: if the errorCode expression does not equal 0 (noErr),
       |  981| *    execute the action statement or compound statement (block) and
       |  982| *    goto exceptionLabel.
       |  983| *
       |  984| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  985| *    call DEBUG_ASSERT_MESSAGE, execute the action statement or
       |  986| *    compound statement (block), and then goto exceptionLabel.
       |  987| *
       |  988| *  Parameters:
       |  989| *
       |  990| *    errorCode:
       |  991| *      The expression to compare to 0.
       |  992| *
       |  993| *    exceptionLabel:
       |  994| *      The label.
       |  995| *
       |  996| *    action:
       |  997| *      The statement or compound statement (block).
       |  998| */
       |  999|#ifndef __Require_noErr_Action
       | 1000|	#if DEBUG_ASSERT_PRODUCTION_CODE
       | 1001|	   #define __Require_noErr_Action(errorCode, exceptionLabel, action)          \
       | 1002|		  do                                                                      \
       | 1003|		  {                                                                       \
       | 1004|			  if ( __builtin_expect(0 != (errorCode), 0) )                        \
       | 1005|			  {                                                                   \
       | 1006|				  {                                                               \
       | 1007|					  action;                                                     \
       | 1008|				  }                                                               \
       | 1009|				  goto exceptionLabel;                                            \
       | 1010|			  }                                                                   \
       | 1011|		  } while ( 0 )
       | 1012|	#else
       | 1013|	   #define __Require_noErr_Action(errorCode, exceptionLabel, action)          \
       | 1014|		  do                                                                      \
       | 1015|		  {                                                                       \
       | 1016|			  long evalOnceErrorCode = (errorCode);                               \
       | 1017|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       | 1018|			  {                                                                   \
       | 1019|				  DEBUG_ASSERT_MESSAGE(                                           \
       | 1020|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       | 1021|					  #errorCode " == 0 ", #exceptionLabel,  0,  __FILE__, __LINE__,  evalOnceErrorCode); \
       | 1022|				  {                                                               \
       | 1023|					  action;                                                     \
       | 1024|				  }                                                               \
       | 1025|				  goto exceptionLabel;                                            \
       | 1026|			  }                                                                   \
       | 1027|		  } while ( 0 )
       | 1028|	#endif
       | 1029|#endif
       | 1030|
       | 1031|/*
       | 1032| *  __Require_noErr_Quiet(errorCode, exceptionLabel)
       | 1033| *
       | 1034| *  Summary:
       | 1035| *    If the errorCode expression does not equal 0 (noErr),
       | 1036| *    goto exceptionLabel.
       | 1037| *
       | 1038| *  Parameters:
       | 1039| *
       | 1040| *    errorCode:
       | 1041| *      The expression to compare to 0.
       | 1042| *
       | 1043| *    exceptionLabel:
       | 1044| *      The label.
       | 1045| */
       | 1046|#ifndef __Require_noErr_Quiet
       | 1047|	#define __Require_noErr_Quiet(errorCode, exceptionLabel)                      \
      0| 1048|	  do                                                                          \
      0| 1049|	  {                                                                           \
      0| 1050|		  if ( __builtin_expect(0 != (errorCode), 0) )                            \
      0| 1051|		  {                                                                       \
      0| 1052|			  goto exceptionLabel;                                                \
      0| 1053|		  }                                                                       \
      0| 1054|	  } while ( 0 )
       | 1055|#endif
       | 1056|
       | 1057|/*
       | 1058| *  __Require_noErr_Action_Quiet(errorCode, exceptionLabel, action)
       | 1059| *
       | 1060| *  Summary:
       | 1061| *    If the errorCode expression does not equal 0 (noErr),
       | 1062| *    execute the action statement or compound statement (block) and
       | 1063| *    goto exceptionLabel.
       | 1064| *
       | 1065| *  Parameters:
       | 1066| *
       | 1067| *    errorCode:
       | 1068| *      The expression to compare to 0.
       | 1069| *
       | 1070| *    exceptionLabel:
       | 1071| *      The label.
       | 1072| *
       | 1073| *    action:
       | 1074| *      The statement or compound statement (block).
       | 1075| */
       | 1076|#ifndef __Require_noErr_Action_Quiet
       | 1077|	#define __Require_noErr_Action_Quiet(errorCode, exceptionLabel, action)       \
       | 1078|	  do                                                                          \
       | 1079|	  {                                                                           \
       | 1080|		  if ( __builtin_expect(0 != (errorCode), 0) )                            \
       | 1081|		  {                                                                       \
       | 1082|			  {                                                                   \
       | 1083|				  action;                                                         \
       | 1084|			  }                                                                   \
       | 1085|			  goto exceptionLabel;                                                \
       | 1086|		  }                                                                       \
       | 1087|	  } while ( 0 )
       | 1088|#endif
       | 1089|
       | 1090|/*
       | 1091| *  __Require_noErr_String(errorCode, exceptionLabel, message)
       | 1092| *
       | 1093| *  Summary:
       | 1094| *    Production builds: if the errorCode expression does not equal 0 (noErr),
       | 1095| *    goto exceptionLabel.
       | 1096| *
       | 1097| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       | 1098| *    call DEBUG_ASSERT_MESSAGE, and then goto exceptionLabel.
       | 1099| *
       | 1100| *  Parameters:
       | 1101| *
       | 1102| *    errorCode:
       | 1103| *      The expression to compare to 0.
       | 1104| *
       | 1105| *    exceptionLabel:
       | 1106| *      The label.
       | 1107| *
       | 1108| *    message:
       | 1109| *      The C string to display.
       | 1110| */
       | 1111|#ifndef __Require_noErr_String
       | 1112|	#if DEBUG_ASSERT_PRODUCTION_CODE
       | 1113|	   #define __Require_noErr_String(errorCode, exceptionLabel, message)         \
       | 1114|		  do                                                                      \
       | 1115|		  {                                                                       \
       | 1116|			  if ( __builtin_expect(0 != (errorCode), 0) )                        \
       | 1117|			  {                                                                   \
       | 1118|				  goto exceptionLabel;                                            \
       | 1119|			  }                                                                   \
       | 1120|		  } while ( 0 )
       | 1121|	#else
       | 1122|	   #define __Require_noErr_String(errorCode, exceptionLabel, message)         \
       | 1123|		  do                                                                      \
       | 1124|		  {                                                                       \
       | 1125|			  long evalOnceErrorCode = (errorCode);                               \
       | 1126|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       | 1127|			  {                                                                   \
       | 1128|				  DEBUG_ASSERT_MESSAGE(                                           \
       | 1129|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       | 1130|					  #errorCode " == 0 ",  #exceptionLabel, message, __FILE__,  __LINE__,  evalOnceErrorCode); \
       | 1131|				  goto exceptionLabel;                                            \
       | 1132|			  }                                                                   \
       | 1133|		  } while ( 0 )
       | 1134|	#endif
       | 1135|#endif
       | 1136|
       | 1137|/*
       | 1138| *  __Require_noErr_Action_String(errorCode, exceptionLabel, action, message)
       | 1139| *
       | 1140| *  Summary:
       | 1141| *    Production builds: if the errorCode expression does not equal 0 (noErr),
       | 1142| *    execute the action statement or compound statement (block) and
       | 1143| *    goto exceptionLabel.
       | 1144| *
       | 1145| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       | 1146| *    call DEBUG_ASSERT_MESSAGE, execute the action statement or compound
       | 1147| *    statement (block), and then goto exceptionLabel.
       | 1148| *
       | 1149| *  Parameters:
       | 1150| *
       | 1151| *    errorCode:
       | 1152| *      The expression to compare to 0.
       | 1153| *
       | 1154| *    exceptionLabel:
       | 1155| *      The label.
       | 1156| *
       | 1157| *    action:
       | 1158| *      The statement or compound statement (block).
       | 1159| *
       | 1160| *    message:
       | 1161| *      The C string to display.
       | 1162| */
       | 1163|#ifndef __Require_noErr_Action_String
       | 1164|	#if DEBUG_ASSERT_PRODUCTION_CODE
       | 1165|	   #define __Require_noErr_Action_String(errorCode, exceptionLabel, action, message) \
       | 1166|		  do                                                                      \
       | 1167|		  {                                                                       \
       | 1168|			  if ( __builtin_expect(0 != (errorCode), 0) )                        \
       | 1169|			  {                                                                   \
       | 1170|				  {                                                               \
       | 1171|					  action;                                                     \
       | 1172|				  }                                                               \
       | 1173|				  goto exceptionLabel;                                            \
       | 1174|			  }                                                                   \
       | 1175|		  } while ( 0 )
       | 1176|	#else
       | 1177|	   #define __Require_noErr_Action_String(errorCode, exceptionLabel, action, message) \
       | 1178|		  do                                                                      \
       | 1179|		  {                                                                       \
       | 1180|			  long evalOnceErrorCode = (errorCode);                               \
       | 1181|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       | 1182|			  {                                                                   \
       | 1183|				  DEBUG_ASSERT_MESSAGE(                                           \
       | 1184|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       | 1185|					  #errorCode " == 0 ", #exceptionLabel, message, __FILE__, __LINE__, evalOnceErrorCode); \
       | 1186|				  {                                                               \
       | 1187|					  action;                                                     \
       | 1188|				  }                                                               \
       | 1189|				  goto exceptionLabel;                                            \
       | 1190|			  }                                                                   \
       | 1191|		  } while ( 0 )
       | 1192|	#endif
       | 1193|#endif
       | 1194|
       | 1195|/*
       | 1196| *  __Check_Compile_Time(expr)
       | 1197| *
       | 1198| *  Summary:
       | 1199| *    any build: if the expression is not true, generated a compile time error.
       | 1200| *
       | 1201| *  Parameters:
       | 1202| *
       | 1203| *    expr:
       | 1204| *      The compile time expression that should evaluate to non-zero.
       | 1205| *
       | 1206| *  Discussion:
       | 1207| *     This declares an array with a size that is determined by a compile-time expression.
       | 1208| *     If false, it declares a negatively sized array, which generates a compile-time error.
       | 1209| *
       | 1210| * Examples:
       | 1211| *     __Check_Compile_Time( sizeof( int ) == 4 );
       | 1212| *     __Check_Compile_Time( offsetof( MyStruct, myField ) == 4 );
       | 1213| *     __Check_Compile_Time( ( kMyBufferSize % 512 ) == 0 );
       | 1214| *
       | 1215| *  Note: This only works with compile-time expressions.
       | 1216| *  Note: This only works in places where extern declarations are allowed (e.g. global scope).
       | 1217| */
       | 1218|#ifndef __Check_Compile_Time
       | 1219|    #ifdef __GNUC__ 
       | 1220|        #define __Check_Compile_Time( expr )    \
       | 1221|            extern int compile_time_assert_failed[ ( expr ) ? 1 : -1 ] __attribute__( ( unused ) )
       | 1222|    #else
       | 1223|        #define __Check_Compile_Time( expr )    \
       | 1224|            extern int compile_time_assert_failed[ ( expr ) ? 1 : -1 ]
       | 1225|    #endif
       | 1226|#endif
       | 1227|
       | 1228|/*
       | 1229| *	For time immemorial, Mac OS X has defined version of most of these macros without the __ prefix, which
       | 1230| *	could collide with similarly named functions or macros in user code, including new functionality in
       | 1231| *	Boost and the C++ standard library.
       | 1232| *
       | 1233| *	A future release of Mac OS X will no longer do this, and will require that clients move to the
       | 1234| *  new macros as defined above.  However, in the interim both the new and old macros will work, unless
       | 1235| *  clients define a macro __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES before this file is included
       | 1236| *  in their compilations.  Clients who do not want the older macros defined can accomplish this by adding
       | 1237| *    #define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
       | 1238| *  at the top of their sources, or my adding -D__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES=0 to the
       | 1239| *  gcc compilation options.
       | 1240| *
       | 1241| *  To aid users of these macros in converting their sources, the following tops script will convert usages
       | 1242| *  of the old macros into the new equivalents.  To do so, in Terminal go into the directory containing the
       | 1243| *  sources to be converted and run this command.
       | 1244| *
       | 1245|    find . -name '*.[c|cc|cp|cpp|m|mm|h]' -print0 |  xargs -0 tops -verbose \
       | 1246|      replace "check(<b args>)" with "__Check(<args>)" \
       | 1247|      replace "check_noerr(<b args>)" with "__Check_noErr(<args>)" \
       | 1248|      replace "check_noerr_string(<b args>)" with "__Check_noErr_String(<args>)" \
       | 1249|      replace "check_string(<b args>)" with "__Check_String(<args>)" \
       | 1250|      replace "require(<b args>)" with "__Require(<args>)" \
       | 1251|      replace "require_action(<b args>)" with "__Require_Action(<args>)" \
       | 1252|      replace "require_action_string(<b args>)" with "__Require_Action_String(<args>)" \
       | 1253|      replace "require_noerr(<b args>)" with "__Require_noErr(<args>)" \
       | 1254|      replace "require_noerr_action(<b args>)" with "__Require_noErr_Action(<args>)" \
       | 1255|      replace "require_noerr_action_string(<b args>)" with "__Require_noErr_Action_String(<args>)" \
       | 1256|      replace "require_noerr_string(<b args>)" with "__Require_noErr_String(<args>)" \
       | 1257|      replace "require_string(<b args>)" with "__Require_String(<args>)" \
       | 1258|      replace "verify(<b args>)" with "__Verify(<args>)" \
       | 1259|      replace "verify_action(<b args>)" with "__Verify_Action(<args>)" \
       | 1260|      replace "verify_noerr(<b args>)" with "__Verify_noErr(<args>)" \
       | 1261|      replace "verify_noerr_action(<b args>)" with "__Verify_noErr_Action(<args>)" \
       | 1262|      replace "verify_noerr_string(<b args>)" with "__Verify_noErr_String(<args>)" \
       | 1263|      replace "verify_string(<b args>)" with "__Verify_String(<args>)" \
       | 1264|      replace "ncheck(<b args>)" with "__nCheck(<args>)" \
       | 1265|      replace "ncheck_string(<b args>)" with "__nCheck_String(<args>)" \
       | 1266|      replace "nrequire(<b args>)" with "__nRequire(<args>)" \
       | 1267|      replace "nrequire_action(<b args>)" with "__nRequire_Action(<args>)" \
       | 1268|      replace "nrequire_action_quiet(<b args>)" with "__nRequire_Action_Quiet(<args>)" \
       | 1269|      replace "nrequire_action_string(<b args>)" with "__nRequire_Action_String(<args>)" \
       | 1270|      replace "nrequire_quiet(<b args>)" with "__nRequire_Quiet(<args>)" \
       | 1271|      replace "nrequire_string(<b args>)" with "__nRequire_String(<args>)" \
       | 1272|      replace "nverify(<b args>)" with "__nVerify(<args>)" \
       | 1273|      replace "nverify_string(<b args>)" with "__nVerify_String(<args>)" \
       | 1274|      replace "require_action_quiet(<b args>)" with "__Require_Action_Quiet(<args>)" \
       | 1275|      replace "require_noerr_action_quiet(<b args>)" with "__Require_noErr_Action_Quiet(<args>)" \
       | 1276|      replace "require_noerr_quiet(<b args>)" with "__Require_noErr_Quiet(<args>)" \
       | 1277|      replace "require_quiet(<b args>)" with "__Require_Quiet(<args>)" \
       | 1278|      replace "check_compile_time(<b args>)" with "__Check_Compile_Time(<args>)" \
       | 1279|      replace "debug_string(<b args>)" with "__Debug_String(<args>)"
       | 1280| *
       | 1281| */
       | 1282|
       | 1283|#ifndef __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES
       | 1284|	/* If we haven't set this yet, it defaults to on.  In the next release, this will default to off. */
       | 1285|	#define	__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES	1
       | 1286|#endif
       | 1287|
       | 1288|#if	__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES
       | 1289|
       | 1290|	#ifndef check
       | 1291|	#define check(assertion)  __Check(assertion)
       | 1292|	#endif
       | 1293|
       | 1294|	#ifndef check_noerr
       | 1295|	#define check_noerr(errorCode)  __Check_noErr(errorCode)
       | 1296|	#endif
       | 1297|
       | 1298|	#ifndef check_noerr_string
       | 1299|		#define check_noerr_string(errorCode, message)  __Check_noErr_String(errorCode, message)
       | 1300|	#endif
       | 1301|
       | 1302|	#ifndef check_string
       | 1303|		#define check_string(assertion, message)  __Check_String(assertion, message)
       | 1304|	#endif
       | 1305|
       | 1306|	#ifndef require
       | 1307|		#define require(assertion, exceptionLabel)  __Require(assertion, exceptionLabel)
       | 1308|	#endif
       | 1309|
       | 1310|	#ifndef require_action
       | 1311|		#define require_action(assertion, exceptionLabel, action)  __Require_Action(assertion, exceptionLabel, action)
       | 1312|	#endif
       | 1313|
       | 1314|	#ifndef require_action_string
       | 1315|		#define require_action_string(assertion, exceptionLabel, action, message)  __Require_Action_String(assertion, exceptionLabel, action, message)
       | 1316|	#endif
       | 1317|
       | 1318|	#ifndef require_noerr
       | 1319|		#define require_noerr(errorCode, exceptionLabel)  __Require_noErr(errorCode, exceptionLabel)
       | 1320|	#endif
       | 1321|
       | 1322|	#ifndef require_noerr_action
       | 1323|		#define require_noerr_action(errorCode, exceptionLabel, action)  __Require_noErr_Action(errorCode, exceptionLabel, action)
       | 1324|	#endif
       | 1325|
       | 1326|	#ifndef require_noerr_action_string
       | 1327|		#define require_noerr_action_string(errorCode, exceptionLabel, action, message)  __Require_noErr_Action_String(errorCode, exceptionLabel, action, message)
       | 1328|	#endif
       | 1329|
       | 1330|	#ifndef require_noerr_string
       | 1331|		#define require_noerr_string(errorCode, exceptionLabel, message)  __Require_noErr_String(errorCode, exceptionLabel, message)
       | 1332|	#endif
       | 1333|
       | 1334|	#ifndef require_string
       | 1335|		#define require_string(assertion, exceptionLabel, message)  __Require_String(assertion, exceptionLabel, message)
       | 1336|	#endif
       | 1337|
       | 1338|	#ifndef verify
       | 1339|		#define verify(assertion) __Verify(assertion)
       | 1340|	#endif
       | 1341|
       | 1342|	#ifndef verify_action
       | 1343|		#define verify_action(assertion, action)  __Verify_Action(assertion, action)
       | 1344|	#endif
       | 1345|
       | 1346|	#ifndef verify_noerr
       | 1347|		#define verify_noerr(errorCode)  __Verify_noErr(errorCode)
       | 1348|	#endif
       | 1349|
       | 1350|	#ifndef verify_noerr_action
       | 1351|		#define verify_noerr_action(errorCode, action)  __Verify_noErr_Action(errorCode, action)
       | 1352|	#endif
       | 1353|
       | 1354|	#ifndef verify_noerr_string
       | 1355|		#define verify_noerr_string(errorCode, message)  __Verify_noErr_String(errorCode, message)
       | 1356|	#endif
       | 1357|
       | 1358|	#ifndef verify_string
       | 1359|		#define verify_string(assertion, message)  __Verify_String(assertion, message)
       | 1360|	#endif
       | 1361|
       | 1362|	#ifndef ncheck
       | 1363|		#define ncheck(assertion)  __nCheck(assertion)
       | 1364|	#endif
       | 1365|
       | 1366|	#ifndef ncheck_string
       | 1367|		#define ncheck_string(assertion, message)  __nCheck_String(assertion, message)
       | 1368|	#endif
       | 1369|
       | 1370|	#ifndef nrequire
       | 1371|		#define nrequire(assertion, exceptionLabel)  __nRequire(assertion, exceptionLabel)
       | 1372|	#endif
       | 1373|
       | 1374|	#ifndef nrequire_action
       | 1375|		#define nrequire_action(assertion, exceptionLabel, action)  __nRequire_Action(assertion, exceptionLabel, action)
       | 1376|	#endif
       | 1377|
       | 1378|	#ifndef nrequire_action_quiet
       | 1379|		#define nrequire_action_quiet(assertion, exceptionLabel, action)  __nRequire_Action_Quiet(assertion, exceptionLabel, action)
       | 1380|	#endif
       | 1381|
       | 1382|	#ifndef nrequire_action_string
       | 1383|		#define nrequire_action_string(assertion, exceptionLabel, action, message)  __nRequire_Action_String(assertion, exceptionLabel, action, message)
       | 1384|	#endif
       | 1385|
       | 1386|	#ifndef nrequire_quiet
       | 1387|		#define nrequire_quiet(assertion, exceptionLabel)  __nRequire_Quiet(assertion, exceptionLabel)
       | 1388|	#endif
       | 1389|
       | 1390|	#ifndef nrequire_string
       | 1391|		#define nrequire_string(assertion, exceptionLabel, string)  __nRequire_String(assertion, exceptionLabel, string)
       | 1392|	#endif
       | 1393|
       | 1394|	#ifndef nverify
       | 1395|		#define nverify(assertion)  __nVerify(assertion)
       | 1396|	#endif
       | 1397|
       | 1398|	#ifndef nverify_string
       | 1399|		#define nverify_string(assertion, message)  __nVerify_String(assertion, message)
       | 1400|	#endif
       | 1401|
       | 1402|	#ifndef require_action_quiet
       | 1403|		#define require_action_quiet(assertion, exceptionLabel, action)  __Require_Action_Quiet(assertion, exceptionLabel, action)
       | 1404|	#endif
       | 1405|
       | 1406|	#ifndef require_noerr_action_quiet
       | 1407|		#define require_noerr_action_quiet(errorCode, exceptionLabel, action)  __Require_noErr_Action_Quiet(errorCode, exceptionLabel, action)
       | 1408|	#endif
       | 1409|
       | 1410|	#ifndef require_noerr_quiet
       | 1411|		#define require_noerr_quiet(errorCode, exceptionLabel)  __Require_noErr_Quiet(errorCode, exceptionLabel)
       | 1412|	#endif
       | 1413|
       | 1414|	#ifndef require_quiet
       | 1415|		#define require_quiet(assertion, exceptionLabel)  __Require_Quiet(assertion, exceptionLabel)
       | 1416|	#endif
       | 1417|
       | 1418|	#ifndef check_compile_time
       | 1419|		#define check_compile_time( expr )  __Check_Compile_Time( expr )
       | 1420|	#endif
       | 1421|
       | 1422|	#ifndef debug_string
       | 1423|		#define debug_string(message)  __Debug_String(message)
       | 1424|	#endif
       | 1425|	
       | 1426|#endif	/* ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES */
       | 1427|
       | 1428|
       | 1429|#endif /* __ASSERTMACROS__ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/Block.h:
       |    1|/*
       |    2| *  Block.h
       |    3| *
       |    4| * Copyright (c) 2008-2010 Apple Inc. All rights reserved.
       |    5| *
       |    6| * @APPLE_LLVM_LICENSE_HEADER@
       |    7| *
       |    8| */
       |    9|
       |   10|#ifndef _Block_H_
       |   11|#define _Block_H_
       |   12|
       |   13|#if !defined(BLOCK_EXPORT)
       |   14|#   if defined(__cplusplus)
       |   15|#       define BLOCK_EXPORT extern "C" 
       |   16|#   else
       |   17|#       define BLOCK_EXPORT extern
       |   18|#   endif
       |   19|#endif
       |   20|
       |   21|#include <Availability.h>
       |   22|#include <TargetConditionals.h>
       |   23|
       |   24|#if __cplusplus
       |   25|extern "C" {
       |   26|#endif
       |   27|
       |   28|// Create a heap based copy of a Block or simply add a reference to an existing one.
       |   29|// This must be paired with Block_release to recover memory, even when running
       |   30|// under Objective-C Garbage Collection.
       |   31|BLOCK_EXPORT void *_Block_copy(const void *aBlock)
       |   32|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   33|
       |   34|// Lose the reference, and if heap based and last reference, recover the memory
       |   35|BLOCK_EXPORT void _Block_release(const void *aBlock)
       |   36|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   37|
       |   38|
       |   39|// Used by the compiler. Do not call this function yourself.
       |   40|BLOCK_EXPORT void _Block_object_assign(void *, const void *, const int)
       |   41|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   42|
       |   43|// Used by the compiler. Do not call this function yourself.
       |   44|BLOCK_EXPORT void _Block_object_dispose(const void *, const int)
       |   45|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   46|
       |   47|// Used by the compiler. Do not use these variables yourself.
       |   48|BLOCK_EXPORT void * _NSConcreteGlobalBlock[32]
       |   49|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   50|BLOCK_EXPORT void * _NSConcreteStackBlock[32]
       |   51|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   52|
       |   53|
       |   54|#if __cplusplus
       |   55|}
       |   56|#endif
       |   57|
       |   58|// Type correct macros
       |   59|
      0|   60|#define Block_copy(...) ((__typeof(__VA_ARGS__))_Block_copy((const void *)(__VA_ARGS__)))
      0|   61|#define Block_release(...) _Block_release((const void *)(__VA_ARGS__))
       |   62|
       |   63|
       |   64|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/MacTypes.h:
       |    1|/*
       |    2| * Copyright (c) 1985-2011 by Apple Inc.. All rights reserved.
       |    3| *
       |    4| * @APPLE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. Please obtain a copy of the License at
       |   10| * http://www.opensource.apple.com/apsl/ and read it before using this
       |   11| * file.
       |   12| * 
       |   13| * The Original Code and all software distributed under the License are
       |   14| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   15| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   16| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   18| * Please see the License for the specific language governing rights and
       |   19| * limitations under the License.
       |   20| * 
       |   21| * @APPLE_LICENSE_HEADER_END@
       |   22| */
       |   23| 
       |   24|/*
       |   25|     File:       MacTypes.h
       |   26| 
       |   27|     Contains:   Basic Macintosh data types.
       |   28| 
       |   29|     Version:    CarbonCore-769~1
       |   30|  
       |   31|     Bugs?:      For bug reports, consult the following page on
       |   32|                 the World Wide Web:
       |   33| 
       |   34|                     http://developer.apple.com/bugreporter/
       |   35| 
       |   36|*/
       |   37|#ifndef __MACTYPES__
       |   38|#define __MACTYPES__
       |   39|
       |   40|#ifndef __CONDITIONALMACROS__
       |   41|#include <ConditionalMacros.h>
       |   42|#endif
       |   43|
  ------------------
  | AFNetworkRequestFromNotification:
  |      0|   37|#ifndef __MACTYPES__
  |      0|   38|#define __MACTYPES__
  |      0|   39|
  |      0|   40|#ifndef __CONDITIONALMACROS__
  |      0|   41|#include <ConditionalMacros.h>
  |      0|   42|#endif
  |      0|   43|
  ------------------
       |   44|#include <stdbool.h>
       |   45|
       |   46|#include <sys/types.h>
  ------------------
  | -[UIActivityIndicatorView(AFNetworking) af_notificationObserver]:
  |      0|   39|
  |      0|   40|#ifndef __CONDITIONALMACROS__
  |      0|   41|#include <ConditionalMacros.h>
  |      0|   42|#endif
  |      0|   43|
  |      0|   44|#include <stdbool.h>
  |      0|   45|
  |      0|   46|#include <sys/types.h>
  ------------------
       |   47|
  ------------------
  | -[UIRefreshControl(AFNetworking) af_notificationObserver]:
  |      0|   40|#ifndef __CONDITIONALMACROS__
  |      0|   41|#include <ConditionalMacros.h>
  |      0|   42|#endif
  |      0|   43|
  |      0|   44|#include <stdbool.h>
  |      0|   45|
  |      0|   46|#include <sys/types.h>
  |      0|   47|
  ------------------
       |   48|#include <Availability.h>
       |   49|
       |   50|#if PRAGMA_ONCE
       |   51|#pragma once
       |   52|#endif
  ------------------
  | +[AFHTTPSessionManager manager]:
  |      0|   50|#if PRAGMA_ONCE
  |      0|   51|#pragma once
  |      0|   52|#endif
  ------------------
       |   53|
       |   54|#ifdef __cplusplus
       |   55|extern "C" {
       |   56|#endif
  ------------------
  | -[AFHTTPSessionManager init]:
  |      0|   54|#ifdef __cplusplus
  |      0|   55|extern "C" {
  |      0|   56|#endif
  ------------------
       |   57|
       |   58|#pragma pack(push, 2)
       |   59|
       |   60|
  ------------------
  | -[AFHTTPSessionManager initWithBaseURL:]:
  |      0|   58|#pragma pack(push, 2)
  |      0|   59|
  |      0|   60|
  ------------------
       |   61|/*
       |   62|        CarbonCore Deprecation flags.
       |   63|
       |   64|     Certain Carbon API functions are deprecated in 10.3 and later
  ------------------
  | -[AFHTTPSessionManager initWithSessionConfiguration:]:
  |      0|   62|        CarbonCore Deprecation flags.
  |      0|   63|
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  ------------------
       |   65|      systems.  These will produce a warning when compiling on 10.3.
  ------------------
  | -[UIWebView(AFNetworking) sessionManager]:
  |      0|   52|#endif
  |      0|   53|
  |      0|   54|#ifdef __cplusplus
  |      0|   55|extern "C" {
  |      0|   56|#endif
  |      0|   57|
  |      0|   58|#pragma pack(push, 2)
  |      0|   59|
  |      0|   60|
  |      0|   61|/*
  |      0|   62|        CarbonCore Deprecation flags.
  |      0|   63|
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  |      0|   65|      systems.  These will produce a warning when compiling on 10.3.
  ------------------
       |   66|
  ------------------
  | -[UIImageView(AFNetworking) setImageWithURL:]:
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  |      0|   65|      systems.  These will produce a warning when compiling on 10.3.
  |      0|   66|
  ------------------
       |   67|        Other functions and constants do not produce meaningful
       |   68|        results when building Carbon for Mac OS X.  For these
       |   69|      functions, no-op macros are provided, but only when the
  ------------------
  | +[AFNetworkActivityIndicatorManager sharedManager]:
  |      0|   61|/*
  |      0|   62|        CarbonCore Deprecation flags.
  |      0|   63|
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  |      0|   65|      systems.  These will produce a warning when compiling on 10.3.
  |      0|   66|
  |      0|   67|        Other functions and constants do not produce meaningful
  |      0|   68|        results when building Carbon for Mac OS X.  For these
  |      0|   69|      functions, no-op macros are provided, but only when the
  ------------------
       |   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
       |   71|      -DALLOW_OBSOLETE_CARBON=0.
       |   72|*/
       |   73|
       |   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
       |   75|
  ------------------
  | -[UIImageView(AFNetworking) setImageWithURL:placeholderImage:]:
  |      0|   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  ------------------
       |   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
       |   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
       |   78|
       |   79|#else
       |   80|
       |   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
       |   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  ------------------
  | -[UIWebView(AFNetworking) responseSerializer]:
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  ------------------
       |   83|
       |   84|#endif
  ------------------
  | -[AFNetworkActivityIndicatorManager init]:
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  ------------------
       |   85|
  ------------------
  | -[AFHTTPSessionManager initWithBaseURL:sessionConfiguration:]:
  |      0|   68|        results when building Carbon for Mac OS X.  For these
  |      0|   69|      functions, no-op macros are provided, but only when the
  |      0|   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  ------------------
       |   86|#ifndef NULL
       |   87|#define NULL    __DARWIN_NULL
       |   88|#endif /* ! NULL */
  ------------------
  | -[AFRefreshControlNotificationObserver setRefreshingWithStateOfTask:]:
  |      0|   66|
  |      0|   67|        Other functions and constants do not produce meaningful
  |      0|   68|        results when building Carbon for Mac OS X.  For these
  |      0|   69|      functions, no-op macros are provided, but only when the
  |      0|   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  ------------------
       |   89|#ifndef nil
       |   90|  #if defined(__has_feature) 
  ------------------
  | -[AFActivityIndicatorViewNotificationObserver setAnimatingWithStateOfTask:]:
  |      0|   65|      systems.  These will produce a warning when compiling on 10.3.
  |      0|   66|
  |      0|   67|        Other functions and constants do not produce meaningful
  |      0|   68|        results when building Carbon for Mac OS X.  For these
  |      0|   69|      functions, no-op macros are provided, but only when the
  |      0|   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  |      0|   89|#ifndef nil
  |      0|   90|  #if defined(__has_feature) 
  ------------------
  | AFPublicKeyForCertificate:
  |      0|   51|#pragma once
  |      0|   52|#endif
  |      0|   53|
  |      0|   54|#ifdef __cplusplus
  |      0|   55|extern "C" {
  |      0|   56|#endif
  |      0|   57|
  |      0|   58|#pragma pack(push, 2)
  |      0|   59|
  |      0|   60|
  |      0|   61|/*
  |      0|   62|        CarbonCore Deprecation flags.
  |      0|   63|
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  |      0|   65|      systems.  These will produce a warning when compiling on 10.3.
  |      0|   66|
  |      0|   67|        Other functions and constants do not produce meaningful
  |      0|   68|        results when building Carbon for Mac OS X.  For these
  |      0|   69|      functions, no-op macros are provided, but only when the
  |      0|   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  |      0|   89|#ifndef nil
  |      0|   90|  #if defined(__has_feature) 
  ------------------
  | __AFPostReachabilityStatusChange_block_invoke:
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  |      0|   89|#ifndef nil
  |      0|   90|  #if defined(__has_feature) 
  ------------------
       |   91|    #if __has_feature(cxx_nullptr)
       |   92|      #define nil nullptr
       |   93|    #else
      3|   94|      #define nil __DARWIN_NULL
       |   95|    #endif
       |   96|  #else
  ------------------
  | -[AFAutoPurgingImageCache initWithMemoryCapacity:preferredMemoryCapacity:]:
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  |      0|   89|#ifndef nil
  |      0|   90|  #if defined(__has_feature) 
  |      0|   91|    #if __has_feature(cxx_nullptr)
  |      0|   92|      #define nil nullptr
  |      0|   93|    #else
  |      0|   94|      #define nil __DARWIN_NULL
  |      0|   95|    #endif
  |      0|   96|  #else
  ------------------
       |   97|    #define nil __DARWIN_NULL
       |   98|  #endif
       |   99|#endif
       |  100|
       |  101|/********************************************************************************
       |  102|
       |  103|    Base integer types for all target OS's and CPU's
       |  104|    
       |  105|        UInt8            8-bit unsigned integer 
  ------------------
  | -[AFQueryStringPair initWithField:value:]:
  |      0|   95|    #endif
  |      0|   96|  #else
  |      0|   97|    #define nil __DARWIN_NULL
  |      0|   98|  #endif
  |      0|   99|#endif
  |      0|  100|
  |      0|  101|/********************************************************************************
  |      0|  102|
  |      0|  103|    Base integer types for all target OS's and CPU's
  |      0|  104|    
  |      0|  105|        UInt8            8-bit unsigned integer 
  ------------------
       |  106|        SInt8            8-bit signed integer
  ------------------
  | -[AFHTTPResponseSerializer init]:
  |      0|   94|      #define nil __DARWIN_NULL
  |      0|   95|    #endif
  |      0|   96|  #else
  |      0|   97|    #define nil __DARWIN_NULL
  |      0|   98|  #endif
  |      0|   99|#endif
  |      0|  100|
  |      0|  101|/********************************************************************************
  |      0|  102|
  |      0|  103|    Base integer types for all target OS's and CPU's
  |      0|  104|    
  |      0|  105|        UInt8            8-bit unsigned integer 
  |      0|  106|        SInt8            8-bit signed integer
  ------------------
       |  107|        UInt16          16-bit unsigned integer 
       |  108|        SInt16          16-bit signed integer           
       |  109|        UInt32          32-bit unsigned integer 
       |  110|        SInt32          32-bit signed integer   
  ------------------
  | -[AFHTTPSessionManager GET:parameters:success:failure:]:
  |      0|  107|        UInt16          16-bit unsigned integer 
  |      0|  108|        SInt16          16-bit signed integer           
  |      0|  109|        UInt32          32-bit unsigned integer 
  |      0|  110|        SInt32          32-bit signed integer   
  ------------------
       |  111|        UInt64          64-bit unsigned integer 
  ------------------
  | -[UIWebView(AFNetworking) loadRequest:progress:success:failure:]:
  |      0|   94|      #define nil __DARWIN_NULL
  |      0|   95|    #endif
  |      0|   96|  #else
  |      0|   97|    #define nil __DARWIN_NULL
  |      0|   98|  #endif
  |      0|   99|#endif
  |      0|  100|
  |      0|  101|/********************************************************************************
  |      0|  102|
  |      0|  103|    Base integer types for all target OS's and CPU's
  |      0|  104|    
  |      0|  105|        UInt8            8-bit unsigned integer 
  |      0|  106|        SInt8            8-bit signed integer
  |      0|  107|        UInt16          16-bit unsigned integer 
  |      0|  108|        SInt16          16-bit signed integer           
  |      0|  109|        UInt32          32-bit unsigned integer 
  |      0|  110|        SInt32          32-bit signed integer   
  |      0|  111|        UInt64          64-bit unsigned integer 
  ------------------
       |  112|        SInt64          64-bit signed integer   
       |  113|
       |  114|*********************************************************************************/
       |  115|typedef unsigned char                   UInt8;
       |  116|typedef signed char                     SInt8;
       |  117|typedef unsigned short                  UInt16;
       |  118|typedef signed short                    SInt16;
  ------------------
  | -[AFRefreshControlNotificationObserver dealloc]:
  |      0|  112|        SInt64          64-bit signed integer   
  |      0|  113|
  |      0|  114|*********************************************************************************/
  |      0|  115|typedef unsigned char                   UInt8;
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  ------------------
       |  119|
       |  120|#if __LP64__
  ------------------
  | -[AFActivityIndicatorViewNotificationObserver dealloc]:
  |      0|  114|*********************************************************************************/
  |      0|  115|typedef unsigned char                   UInt8;
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  ------------------
       |  121|typedef unsigned int                    UInt32;
  ------------------
  | __51-[AFAutoPurgingImageCache addImage:withIdentifier:]_block_invoke:
  |      0|  111|        UInt64          64-bit unsigned integer 
  |      0|  112|        SInt64          64-bit signed integer   
  |      0|  113|
  |      0|  114|*********************************************************************************/
  |      0|  115|typedef unsigned char                   UInt8;
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  ------------------
       |  122|typedef signed int                      SInt32;
  ------------------
  | -[UIButton(AFNetworking) setImageForState:withURL:]:
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  ------------------
       |  123|#else
       |  124|typedef unsigned long                   UInt32;
  ------------------
  | +[AFNetworkReachabilityManager sharedManager]:
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  |      0|  123|#else
  |      0|  124|typedef unsigned long                   UInt32;
  ------------------
       |  125|typedef signed long                     SInt32;
       |  126|#endif
       |  127|
       |  128|/* avoid redeclaration if libkern/OSTypes.h */
       |  129|#ifndef _OS_OSTYPES_H
       |  130|#if TARGET_RT_BIG_ENDIAN
  ------------------
  | -[AFHTTPSessionManager GET:parameters:progress:success:failure:]:
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  |      0|  123|#else
  |      0|  124|typedef unsigned long                   UInt32;
  |      0|  125|typedef signed long                     SInt32;
  |      0|  126|#endif
  |      0|  127|
  |      0|  128|/* avoid redeclaration if libkern/OSTypes.h */
  |      0|  129|#ifndef _OS_OSTYPES_H
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  ------------------
       |  131|struct wide {
       |  132|  SInt32              hi;
  ------------------
  | -[UIButton(AFNetworking) setImageForState:withURL:placeholderImage:]:
  |      0|  127|
  |      0|  128|/* avoid redeclaration if libkern/OSTypes.h */
  |      0|  129|#ifndef _OS_OSTYPES_H
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  ------------------
       |  133|  UInt32              lo;
  ------------------
  | AFQueryStringPairsFromDictionary:
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  |      0|  133|  UInt32              lo;
  ------------------
       |  134|};
       |  135|typedef struct wide                     wide;
       |  136|struct UnsignedWide {
       |  137|  UInt32              hi;
       |  138|  UInt32              lo;
       |  139|};
       |  140|typedef struct UnsignedWide             UnsignedWide;
       |  141|#else
       |  142|struct wide {
  ------------------
  | -[UIImageView(AFNetworking) setImageWithURLRequest:placeholderImage:success:failure:]:
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  |      0|   89|#ifndef nil
  |      0|   90|  #if defined(__has_feature) 
  |      0|   91|    #if __has_feature(cxx_nullptr)
  |      0|   92|      #define nil nullptr
  |      0|   93|    #else
  |      0|   94|      #define nil __DARWIN_NULL
  |      0|   95|    #endif
  |      0|   96|  #else
  |      0|   97|    #define nil __DARWIN_NULL
  |      0|   98|  #endif
  |      0|   99|#endif
  |      0|  100|
  |      0|  101|/********************************************************************************
  |      0|  102|
  |      0|  103|    Base integer types for all target OS's and CPU's
  |      0|  104|    
  |      0|  105|        UInt8            8-bit unsigned integer 
  |      0|  106|        SInt8            8-bit signed integer
  |      0|  107|        UInt16          16-bit unsigned integer 
  |      0|  108|        SInt16          16-bit signed integer           
  |      0|  109|        UInt32          32-bit unsigned integer 
  |      0|  110|        SInt32          32-bit signed integer   
  |      0|  111|        UInt64          64-bit unsigned integer 
  |      0|  112|        SInt64          64-bit signed integer   
  |      0|  113|
  |      0|  114|*********************************************************************************/
  |      0|  115|typedef unsigned char                   UInt8;
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  |      0|  123|#else
  |      0|  124|typedef unsigned long                   UInt32;
  |      0|  125|typedef signed long                     SInt32;
  |      0|  126|#endif
  |      0|  127|
  |      0|  128|/* avoid redeclaration if libkern/OSTypes.h */
  |      0|  129|#ifndef _OS_OSTYPES_H
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  |      0|  133|  UInt32              lo;
  |      0|  134|};
  |      0|  135|typedef struct wide                     wide;
  |      0|  136|struct UnsignedWide {
  |      0|  137|  UInt32              hi;
  |      0|  138|  UInt32              lo;
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  ------------------
       |  143|  UInt32              lo;
  ------------------
  | -[AFURLSessionManagerTaskDelegate init]:
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  |      0|  133|  UInt32              lo;
  |      0|  134|};
  |      0|  135|typedef struct wide                     wide;
  |      0|  136|struct UnsignedWide {
  |      0|  137|  UInt32              hi;
  |      0|  138|  UInt32              lo;
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  |      0|  143|  UInt32              lo;
  ------------------
       |  144|  SInt32              hi;
       |  145|};
       |  146|typedef struct wide                     wide;
  ------------------
  | -[AFHTTPSessionManager HEAD:parameters:success:failure:]:
  |      0|  136|struct UnsignedWide {
  |      0|  137|  UInt32              hi;
  |      0|  138|  UInt32              lo;
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  |      0|  143|  UInt32              lo;
  |      0|  144|  SInt32              hi;
  |      0|  145|};
  |      0|  146|typedef struct wide                     wide;
  ------------------
       |  147|struct UnsignedWide {
       |  148|  UInt32              lo;
       |  149|  UInt32              hi;
  ------------------
  | -[UIImageView(AFNetworking) cancelImageDownloadTask]:
  |      0|  144|  SInt32              hi;
  |      0|  145|};
  |      0|  146|typedef struct wide                     wide;
  |      0|  147|struct UnsignedWide {
  |      0|  148|  UInt32              lo;
  |      0|  149|  UInt32              hi;
  ------------------
       |  150|};
       |  151|typedef struct UnsignedWide             UnsignedWide;
       |  152|#endif  /* TARGET_RT_BIG_ENDIAN */
       |  153|
  ------------------
  | -[UIImageView(AFNetworking) clearActiveDownloadInformation]:
  |      0|  151|typedef struct UnsignedWide             UnsignedWide;
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  ------------------
       |  154|#endif
  ------------------
  | __53-[AFAutoPurgingImageCache removeImageWithIdentifier:]_block_invoke:
  |      0|  147|struct UnsignedWide {
  |      0|  148|  UInt32              lo;
  |      0|  149|  UInt32              hi;
  |      0|  150|};
  |      0|  151|typedef struct UnsignedWide             UnsignedWide;
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  |      0|  154|#endif
  ------------------
  | -[AFHTTPSessionManager POST:parameters:success:failure:]:
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  |      0|  154|#endif
  ------------------
       |  155|
       |  156|#if TYPE_LONGLONG
  ------------------
  | -[UIWebView(AFNetworking) loadRequest:MIMEType:textEncodingName:progress:success:failure:]:
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  |      0|  123|#else
  |      0|  124|typedef unsigned long                   UInt32;
  |      0|  125|typedef signed long                     SInt32;
  |      0|  126|#endif
  |      0|  127|
  |      0|  128|/* avoid redeclaration if libkern/OSTypes.h */
  |      0|  129|#ifndef _OS_OSTYPES_H
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  |      0|  133|  UInt32              lo;
  |      0|  134|};
  |      0|  135|typedef struct wide                     wide;
  |      0|  136|struct UnsignedWide {
  |      0|  137|  UInt32              hi;
  |      0|  138|  UInt32              lo;
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  |      0|  143|  UInt32              lo;
  |      0|  144|  SInt32              hi;
  |      0|  145|};
  |      0|  146|typedef struct wide                     wide;
  |      0|  147|struct UnsignedWide {
  |      0|  148|  UInt32              lo;
  |      0|  149|  UInt32              hi;
  |      0|  150|};
  |      0|  151|typedef struct UnsignedWide             UnsignedWide;
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  |      0|  154|#endif
  |      0|  155|
  |      0|  156|#if TYPE_LONGLONG
  ------------------
       |  157|/*
  ------------------
  | -[AFHTTPResponseSerializer validateResponse:data:error:]:
  |      0|  113|
  |      0|  114|*********************************************************************************/
  |      0|  115|typedef unsigned char                   UInt8;
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  |      0|  123|#else
  |      0|  124|typedef unsigned long                   UInt32;
  |      0|  125|typedef signed long                     SInt32;
  |      0|  126|#endif
  |      0|  127|
  |      0|  128|/* avoid redeclaration if libkern/OSTypes.h */
  |      0|  129|#ifndef _OS_OSTYPES_H
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  |      0|  133|  UInt32              lo;
  |      0|  134|};
  |      0|  135|typedef struct wide                     wide;
  |      0|  136|struct UnsignedWide {
  |      0|  137|  UInt32              hi;
  |      0|  138|  UInt32              lo;
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  |      0|  143|  UInt32              lo;
  |      0|  144|  SInt32              hi;
  |      0|  145|};
  |      0|  146|typedef struct wide                     wide;
  |      0|  147|struct UnsignedWide {
  |      0|  148|  UInt32              lo;
  |      0|  149|  UInt32              hi;
  |      0|  150|};
  |      0|  151|typedef struct UnsignedWide             UnsignedWide;
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  |      0|  154|#endif
  |      0|  155|
  |      0|  156|#if TYPE_LONGLONG
  |      0|  157|/*
  ------------------
       |  158|  Note:   wide and UnsignedWide must always be structs for source code
       |  159|           compatibility. On the other hand UInt64 and SInt64 can be
       |  160|          either a struct or a long long, depending on the compiler.
       |  161|         
       |  162|           If you use UInt64 and SInt64 you should do all operations on 
       |  163|          those data types through the functions/macros in Math64.h.  
       |  164|           This will assure that your code compiles with compilers that
       |  165|           support long long and those that don't.
       |  166|            
       |  167|           The MS Visual C/C++ compiler uses __int64 instead of long long. 
  ------------------
  | -[AFHTTPSessionManager POST:parameters:progress:success:failure:]:
  |      0|  161|         
  |      0|  162|           If you use UInt64 and SInt64 you should do all operations on 
  |      0|  163|          those data types through the functions/macros in Math64.h.  
  |      0|  164|           This will assure that your code compiles with compilers that
  |      0|  165|           support long long and those that don't.
  |      0|  166|            
  |      0|  167|           The MS Visual C/C++ compiler uses __int64 instead of long long. 
  ------------------
       |  168|*/
       |  169|    #if defined(_MSC_VER) && !defined(__MWERKS__) && defined(_M_IX86)
       |  170|      typedef   signed __int64                SInt64;
       |  171|        typedef unsigned __int64                UInt64;
  ------------------
  | -[AFNetworkReachabilityManager initWithReachability:]:
  |      0|  161|         
  |      0|  162|           If you use UInt64 and SInt64 you should do all operations on 
  |      0|  163|          those data types through the functions/macros in Math64.h.  
  |      0|  164|           This will assure that your code compiles with compilers that
  |      0|  165|           support long long and those that don't.
  |      0|  166|            
  |      0|  167|           The MS Visual C/C++ compiler uses __int64 instead of long long. 
  |      0|  168|*/
  |      0|  169|    #if defined(_MSC_VER) && !defined(__MWERKS__) && defined(_M_IX86)
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  ------------------
       |  172|    #else
       |  173|      typedef   signed long long              SInt64;
       |  174|        typedef unsigned long long              UInt64;
       |  175|    #endif
  ------------------
  | +[AFImageDownloader defaultInstance]:
  |      0|  168|*/
  |      0|  169|    #if defined(_MSC_VER) && !defined(__MWERKS__) && defined(_M_IX86)
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  |      0|  172|    #else
  |      0|  173|      typedef   signed long long              SInt64;
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  ------------------
       |  176|#else
  ------------------
  | -[AFNetworkReachabilityManager init]:
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  ------------------
  | -[AFHTTPSessionManager POST:parameters:constructingBodyWithBlock:success:failure:]:
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  ------------------
       |  177|
  ------------------
  | -[AFAutoPurgingImageCache imageWithIdentifier:]:
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  |      0|  172|    #else
  |      0|  173|      typedef   signed long long              SInt64;
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  |      0|  177|
  ------------------
       |  178|
       |  179|typedef wide                            SInt64;
  ------------------
  | +[AFSecurityPolicy defaultPinnedCertificates]:
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  |      0|  172|    #else
  |      0|  173|      typedef   signed long long              SInt64;
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  |      0|  177|
  |      0|  178|
  |      0|  179|typedef wide                            SInt64;
  ------------------
       |  180|typedef UnsignedWide                    UInt64;
  ------------------
  | __91-[UIButton(AFNetworking) setImageForState:withURLRequest:placeholderImage:success:failure:]_block_invoke:
  |      0|  169|    #if defined(_MSC_VER) && !defined(__MWERKS__) && defined(_M_IX86)
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  |      0|  172|    #else
  |      0|  173|      typedef   signed long long              SInt64;
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  |      0|  177|
  |      0|  178|
  |      0|  179|typedef wide                            SInt64;
  |      0|  180|typedef UnsignedWide                    UInt64;
  ------------------
       |  181|#endif  /* TYPE_LONGLONG */
       |  182|
       |  183|/********************************************************************************
       |  184|
       |  185|    Base fixed point types 
  ------------------
  | AFHTTPRequestSerializerObservedKeyPaths:
  |      0|  177|
  |      0|  178|
  |      0|  179|typedef wide                            SInt64;
  |      0|  180|typedef UnsignedWide                    UInt64;
  |      0|  181|#endif  /* TYPE_LONGLONG */
  |      0|  182|
  |      0|  183|/********************************************************************************
  |      0|  184|
  |      0|  185|    Base fixed point types 
  ------------------
       |  186|    
  ------------------
  | -[AFHTTPResponseSerializer initWithCoder:]:
  |      0|  176|#else
  |      0|  177|
  |      0|  178|
  |      0|  179|typedef wide                            SInt64;
  |      0|  180|typedef UnsignedWide                    UInt64;
  |      0|  181|#endif  /* TYPE_LONGLONG */
  |      0|  182|
  |      0|  183|/********************************************************************************
  |      0|  184|
  |      0|  185|    Base fixed point types 
  |      0|  186|    
  ------------------
       |  187|        Fixed           16-bit signed integer plus 16-bit fraction
       |  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
       |  189|        Fract           2-bit signed integer plus 30-bit fraction
  ------------------
  | __91-[UIButton(AFNetworking) setImageForState:withURLRequest:placeholderImage:success:failure:]_block_invoke41:
  |      0|  181|#endif  /* TYPE_LONGLONG */
  |      0|  182|
  |      0|  183|/********************************************************************************
  |      0|  184|
  |      0|  185|    Base fixed point types 
  |      0|  186|    
  |      0|  187|        Fixed           16-bit signed integer plus 16-bit fraction
  |      0|  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
  |      0|  189|        Fract           2-bit signed integer plus 30-bit fraction
  ------------------
       |  190|        ShortFixed      8-bit signed integer plus 8-bit fraction
       |  191|        
       |  192|*********************************************************************************/
       |  193|typedef SInt32                          Fixed;
  ------------------
  | -[UIButton(AFNetworking) setImageForState:withURLRequest:placeholderImage:success:failure:]:
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  |      0|  143|  UInt32              lo;
  |      0|  144|  SInt32              hi;
  |      0|  145|};
  |      0|  146|typedef struct wide                     wide;
  |      0|  147|struct UnsignedWide {
  |      0|  148|  UInt32              lo;
  |      0|  149|  UInt32              hi;
  |      0|  150|};
  |      0|  151|typedef struct UnsignedWide             UnsignedWide;
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  |      0|  154|#endif
  |      0|  155|
  |      0|  156|#if TYPE_LONGLONG
  |      0|  157|/*
  |      0|  158|  Note:   wide and UnsignedWide must always be structs for source code
  |      0|  159|           compatibility. On the other hand UInt64 and SInt64 can be
  |      0|  160|          either a struct or a long long, depending on the compiler.
  |      0|  161|         
  |      0|  162|           If you use UInt64 and SInt64 you should do all operations on 
  |      0|  163|          those data types through the functions/macros in Math64.h.  
  |      0|  164|           This will assure that your code compiles with compilers that
  |      0|  165|           support long long and those that don't.
  |      0|  166|            
  |      0|  167|           The MS Visual C/C++ compiler uses __int64 instead of long long. 
  |      0|  168|*/
  |      0|  169|    #if defined(_MSC_VER) && !defined(__MWERKS__) && defined(_M_IX86)
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  |      0|  172|    #else
  |      0|  173|      typedef   signed long long              SInt64;
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  |      0|  177|
  |      0|  178|
  |      0|  179|typedef wide                            SInt64;
  |      0|  180|typedef UnsignedWide                    UInt64;
  |      0|  181|#endif  /* TYPE_LONGLONG */
  |      0|  182|
  |      0|  183|/********************************************************************************
  |      0|  184|
  |      0|  185|    Base fixed point types 
  |      0|  186|    
  |      0|  187|        Fixed           16-bit signed integer plus 16-bit fraction
  |      0|  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
  |      0|  189|        Fract           2-bit signed integer plus 30-bit fraction
  |      0|  190|        ShortFixed      8-bit signed integer plus 8-bit fraction
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  ------------------
  | __91-[AFHTTPSessionManager POST:parameters:constructingBodyWithBlock:progress:success:failure:]_block_invoke:
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  ------------------
       |  194|typedef Fixed *                         FixedPtr;
       |  195|typedef SInt32                          Fract;
       |  196|typedef Fract *                         FractPtr;
       |  197|typedef UInt32                          UnsignedFixed;
  ------------------
  | -[AFAutoPurgingImageCache imageCacheKeyFromURLRequest:withAdditionalIdentifier:]:
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  |      0|  194|typedef Fixed *                         FixedPtr;
  |      0|  195|typedef SInt32                          Fract;
  |      0|  196|typedef Fract *                         FractPtr;
  |      0|  197|typedef UInt32                          UnsignedFixed;
  ------------------
       |  198|typedef UnsignedFixed *                 UnsignedFixedPtr;
       |  199|typedef short                           ShortFixed;
       |  200|typedef ShortFixed *                    ShortFixedPtr;
       |  201|
  ------------------
  | -[UIButton(AFNetworking) setBackgroundImageForState:withURL:]:
  |      0|  199|typedef short                           ShortFixed;
  |      0|  200|typedef ShortFixed *                    ShortFixedPtr;
  |      0|  201|
  ------------------
       |  202|
       |  203|/********************************************************************************
       |  204|
       |  205|    Base floating point types 
       |  206|    
       |  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
       |  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
       |  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
       |  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  ------------------
  | __78-[AFImageDownloader downloadImageForURLRequest:withReceiptID:success:failure:]_block_invoke_2:
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  ------------------
  | -[AFSecurityPolicy init]:
  |      0|  201|
  |      0|  202|
  |      0|  203|/********************************************************************************
  |      0|  204|
  |      0|  205|    Base floating point types 
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  ------------------
       |  211|        
  ------------------
  | -[UIButton(AFNetworking) setBackgroundImageForState:withURL:placeholderImage:]:
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  |      0|  211|        
  ------------------
       |  212|    Note: These are fixed size floating point types, useful when writing a floating
       |  213|          point value to disk.  If your compiler does not support a particular size 
       |  214|          float, a struct is used instead.
       |  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  ------------------
  | -[AFHTTPSessionManager POST:parameters:constructingBodyWithBlock:progress:success:failure:]:
  |      0|  184|
  |      0|  185|    Base fixed point types 
  |      0|  186|    
  |      0|  187|        Fixed           16-bit signed integer plus 16-bit fraction
  |      0|  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
  |      0|  189|        Fract           2-bit signed integer plus 30-bit fraction
  |      0|  190|        ShortFixed      8-bit signed integer plus 8-bit fraction
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  |      0|  194|typedef Fixed *                         FixedPtr;
  |      0|  195|typedef SInt32                          Fract;
  |      0|  196|typedef Fract *                         FractPtr;
  |      0|  197|typedef UInt32                          UnsignedFixed;
  |      0|  198|typedef UnsignedFixed *                 UnsignedFixedPtr;
  |      0|  199|typedef short                           ShortFixed;
  |      0|  200|typedef ShortFixed *                    ShortFixedPtr;
  |      0|  201|
  |      0|  202|
  |      0|  203|/********************************************************************************
  |      0|  204|
  |      0|  205|    Base floating point types 
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  |      0|  211|        
  |      0|  212|    Note: These are fixed size floating point types, useful when writing a floating
  |      0|  213|          point value to disk.  If your compiler does not support a particular size 
  |      0|  214|          float, a struct is used instead.
  |      0|  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  ------------------
       |  216|          you want a floating point representation that is natural for any given
       |  217|          compiler, but might be a different size on different compilers.
       |  218|
       |  219|*********************************************************************************/
       |  220|typedef float               Float32;
       |  221|typedef double              Float64;
       |  222|struct Float80 {
       |  223|    SInt16  exp;
       |  224|    UInt16  man[4];
       |  225|};
       |  226|typedef struct Float80 Float80;
       |  227|
  ------------------
  | -[AFHTTPSessionManager PUT:parameters:success:failure:]:
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  ------------------
       |  228|struct Float96 {
  ------------------
  | -[AFSecurityPolicy setPinnedCertificates:]:
  |      0|  212|    Note: These are fixed size floating point types, useful when writing a floating
  |      0|  213|          point value to disk.  If your compiler does not support a particular size 
  |      0|  214|          float, a struct is used instead.
  |      0|  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  |      0|  216|          you want a floating point representation that is natural for any given
  |      0|  217|          compiler, but might be a different size on different compilers.
  |      0|  218|
  |      0|  219|*********************************************************************************/
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |      0|  228|struct Float96 {
  ------------------
       |  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  ------------------
  | -[AFJSONResponseSerializer init]:
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |      0|  228|struct Float96 {
  |      0|  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  ------------------
       |  230|    UInt16  man[4];
       |  231|};
       |  232|typedef struct Float96 Float96;
       |  233|struct Float32Point {
       |  234|    Float32             x;
       |  235|    Float32             y;
       |  236|};
       |  237|typedef struct Float32Point Float32Point;
       |  238|
       |  239|/********************************************************************************
  ------------------
  | -[AFHTTPSessionManager PATCH:parameters:success:failure:]:
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  ------------------
       |  240|
       |  241|    MacOS Memory Manager types
       |  242|    
       |  243|        Ptr             Pointer to a non-relocatable block
       |  244|        Handle          Pointer to a master pointer to a relocatable block
       |  245|        Size            The number of bytes in a block (signed for historical reasons)
       |  246|        
       |  247|*********************************************************************************/
       |  248|typedef char *                          Ptr;
       |  249|typedef Ptr *                           Handle;
       |  250|typedef long                            Size;
       |  251|
  ------------------
  | -[AFHTTPSessionManager DELETE:parameters:success:failure:]:
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  ------------------
       |  252|/********************************************************************************
  ------------------
  | __78-[AFImageDownloader downloadImageForURLRequest:withReceiptID:success:failure:]_block_invoke_2176:
  |      0|  227|
  |      0|  228|struct Float96 {
  |      0|  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  |      0|  230|    UInt16  man[4];
  |      0|  231|};
  |      0|  232|typedef struct Float96 Float96;
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  ------------------
       |  253|
       |  254|    Higher level basic types
       |  255|    
  ------------------
  | -[AFHTTPRequestSerializer init]:
  |      0|  202|
  |      0|  203|/********************************************************************************
  |      0|  204|
  |      0|  205|    Base floating point types 
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  |      0|  211|        
  |      0|  212|    Note: These are fixed size floating point types, useful when writing a floating
  |      0|  213|          point value to disk.  If your compiler does not support a particular size 
  |      0|  214|          float, a struct is used instead.
  |      0|  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  |      0|  216|          you want a floating point representation that is natural for any given
  |      0|  217|          compiler, but might be a different size on different compilers.
  |      0|  218|
  |      0|  219|*********************************************************************************/
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |       |  228|struct Float96 {
  |       |  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  |       |  230|    UInt16  man[4];
  |       |  231|};
  |       |  232|typedef struct Float96 Float96;
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  ------------------
       |  256|        OSErr                   16-bit result error code
       |  257|        OSStatus                32-bit result error code
       |  258|        LogicalAddress          Address in the clients virtual address space
       |  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  ------------------
  | __101-[UIButton(AFNetworking) setBackgroundImageForState:withURLRequest:placeholderImage:success:failure:]_block_invoke:
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  ------------------
       |  260|        PhysicalAddress         Real address as used on the hardware bus
       |  261|        BytePtr                 Pointer to an array of bytes
       |  262|        ByteCount               The size of an array of bytes
       |  263|        ByteOffset              An offset into an array of bytes
       |  264|        ItemCount               32-bit iteration count
       |  265|        OptionBits              Standard 32-bit set of bit flags
       |  266|        PBVersion               ?
       |  267|        Duration                32-bit millisecond timer for drivers
       |  268|        AbsoluteTime            64-bit clock
  ------------------
  | __101-[UIButton(AFNetworking) setBackgroundImageForState:withURLRequest:placeholderImage:success:failure:]_block_invoke61:
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  ------------------
       |  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  ------------------
  | __116-[AFHTTPSessionManager dataTaskWithHTTPMethod:URLString:parameters:uploadProgress:downloadProgress:success:failure:]_block_invoke:
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  ------------------
       |  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
       |  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
       |  272|                                English) together with other region-dependent characteristics (e.g. date format)
  ------------------
  | -[UIButton(AFNetworking) setBackgroundImageForState:withURLRequest:placeholderImage:success:failure:]:
  |      0|  218|
  |      0|  219|*********************************************************************************/
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |      0|  228|struct Float96 {
  |      0|  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  |      0|  230|    UInt16  man[4];
  |      0|  231|};
  |      0|  232|typedef struct Float96 Float96;
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  ------------------
       |  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  ------------------
  | __78-[AFImageDownloader downloadImageForURLRequest:withReceiptID:success:failure:]_block_invoke:
  |      0|  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
  |      0|  189|        Fract           2-bit signed integer plus 30-bit fraction
  |      0|  190|        ShortFixed      8-bit signed integer plus 8-bit fraction
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  |      0|  194|typedef Fixed *                         FixedPtr;
  |      0|  195|typedef SInt32                          Fract;
  |      0|  196|typedef Fract *                         FractPtr;
  |      0|  197|typedef UInt32                          UnsignedFixed;
  |      0|  198|typedef UnsignedFixed *                 UnsignedFixedPtr;
  |      0|  199|typedef short                           ShortFixed;
  |      0|  200|typedef ShortFixed *                    ShortFixedPtr;
  |      0|  201|
  |      0|  202|
  |      0|  203|/********************************************************************************
  |      0|  204|
  |      0|  205|    Base floating point types 
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  |      0|  211|        
  |      0|  212|    Note: These are fixed size floating point types, useful when writing a floating
  |      0|  213|          point value to disk.  If your compiler does not support a particular size 
  |      0|  214|          float, a struct is used instead.
  |      0|  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  |      0|  216|          you want a floating point representation that is natural for any given
  |      0|  217|          compiler, but might be a different size on different compilers.
  |      0|  218|
  |      0|  219|*********************************************************************************/
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |      0|  228|struct Float96 {
  |      0|  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  |      0|  230|    UInt16  man[4];
  |      0|  231|};
  |      0|  232|typedef struct Float96 Float96;
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  |      0|  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  ------------------
       |  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
       |  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
       |  276|        
       |  277|*********************************************************************************/
       |  278|typedef SInt16                          OSErr;
       |  279|typedef SInt32                          OSStatus;
  ------------------
  | -[AFImageDownloader downloadImageForURLRequest:withReceiptID:success:failure:]:
  |      0|  186|    
  |      0|  187|        Fixed           16-bit signed integer plus 16-bit fraction
  |      0|  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
  |      0|  189|        Fract           2-bit signed integer plus 30-bit fraction
  |      0|  190|        ShortFixed      8-bit signed integer plus 8-bit fraction
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  |      0|  194|typedef Fixed *                         FixedPtr;
  |      0|  195|typedef SInt32                          Fract;
  |      0|  196|typedef Fract *                         FractPtr;
  |      0|  197|typedef UInt32                          UnsignedFixed;
  |      0|  198|typedef UnsignedFixed *                 UnsignedFixedPtr;
  |      0|  199|typedef short                           ShortFixed;
  |      0|  200|typedef ShortFixed *                    ShortFixedPtr;
  |      0|  201|
  |      0|  202|
  |      0|  203|/********************************************************************************
  |      0|  204|
  |      0|  205|    Base floating point types 
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  |      0|  211|        
  |      0|  212|    Note: These are fixed size floating point types, useful when writing a floating
  |      0|  213|          point value to disk.  If your compiler does not support a particular size 
  |      0|  214|          float, a struct is used instead.
  |      0|  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  |      0|  216|          you want a floating point representation that is natural for any given
  |      0|  217|          compiler, but might be a different size on different compilers.
  |      0|  218|
  |      0|  219|*********************************************************************************/
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |      0|  228|struct Float96 {
  |      0|  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  |      0|  230|    UInt16  man[4];
  |      0|  231|};
  |      0|  232|typedef struct Float96 Float96;
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  |      0|  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  |      0|  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
  |      0|  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
  |      0|  276|        
  |      0|  277|*********************************************************************************/
  |      0|  278|typedef SInt16                          OSErr;
  |      0|  279|typedef SInt32                          OSStatus;
  ------------------
       |  280|typedef void *                          LogicalAddress;
       |  281|typedef const void *                    ConstLogicalAddress;
       |  282|typedef void *                          PhysicalAddress;
  ------------------
  | -[UIButton(AFNetworking) cancelImageDownloadTaskForState:]:
  |      0|  276|        
  |      0|  277|*********************************************************************************/
  |      0|  278|typedef SInt16                          OSErr;
  |      0|  279|typedef SInt32                          OSStatus;
  |      0|  280|typedef void *                          LogicalAddress;
  |      0|  281|typedef const void *                    ConstLogicalAddress;
  |      0|  282|typedef void *                          PhysicalAddress;
  ------------------
       |  283|typedef UInt8 *                         BytePtr;
       |  284|typedef unsigned long                   ByteCount;
       |  285|typedef unsigned long                   ByteOffset;
       |  286|typedef SInt32                          Duration;
       |  287|typedef UnsignedWide                    AbsoluteTime;
       |  288|typedef UInt32                          OptionBits;
  ------------------
  | -[AFJSONResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  |      0|  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  |      0|  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
  |      0|  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
  |      0|  276|        
  |      0|  277|*********************************************************************************/
  |      0|  278|typedef SInt16                          OSErr;
  |      0|  279|typedef SInt32                          OSStatus;
  |      0|  280|typedef void *                          LogicalAddress;
  |      0|  281|typedef const void *                    ConstLogicalAddress;
  |      0|  282|typedef void *                          PhysicalAddress;
  |      0|  283|typedef UInt8 *                         BytePtr;
  |      0|  284|typedef unsigned long                   ByteCount;
  |      0|  285|typedef unsigned long                   ByteOffset;
  |      0|  286|typedef SInt32                          Duration;
  |      0|  287|typedef UnsignedWide                    AbsoluteTime;
  |      0|  288|typedef UInt32                          OptionBits;
  ------------------
       |  289|typedef unsigned long                   ItemCount;
       |  290|typedef UInt32                          PBVersion;
  ------------------
  | -[UIButton(AFNetworking) cancelBackgroundImageDownloadTaskForState:]:
  |      0|  284|typedef unsigned long                   ByteCount;
  |      0|  285|typedef unsigned long                   ByteOffset;
  |      0|  286|typedef SInt32                          Duration;
  |      0|  287|typedef UnsignedWide                    AbsoluteTime;
  |      0|  288|typedef UInt32                          OptionBits;
  |      0|  289|typedef unsigned long                   ItemCount;
  |      0|  290|typedef UInt32                          PBVersion;
  ------------------
       |  291|typedef SInt16                          ScriptCode;
       |  292|typedef SInt16                          LangCode;
       |  293|typedef SInt16                          RegionCode;
  ------------------
  | -[AFHTTPSessionManager dataTaskWithHTTPMethod:URLString:parameters:uploadProgress:downloadProgress:success:failure:]:
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  |      0|  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  |      0|  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
  |      0|  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
  |      0|  276|        
  |      0|  277|*********************************************************************************/
  |      0|  278|typedef SInt16                          OSErr;
  |      0|  279|typedef SInt32                          OSStatus;
  |      0|  280|typedef void *                          LogicalAddress;
  |      0|  281|typedef const void *                    ConstLogicalAddress;
  |      0|  282|typedef void *                          PhysicalAddress;
  |      0|  283|typedef UInt8 *                         BytePtr;
  |      0|  284|typedef unsigned long                   ByteCount;
  |      0|  285|typedef unsigned long                   ByteOffset;
  |      0|  286|typedef SInt32                          Duration;
  |      0|  287|typedef UnsignedWide                    AbsoluteTime;
  |      0|  288|typedef UInt32                          OptionBits;
  |      0|  289|typedef unsigned long                   ItemCount;
  |      0|  290|typedef UInt32                          PBVersion;
  |      0|  291|typedef SInt16                          ScriptCode;
  |      0|  292|typedef SInt16                          LangCode;
  |      0|  293|typedef SInt16                          RegionCode;
  ------------------
       |  294|typedef UInt32                          FourCharCode;
       |  295|typedef FourCharCode                    OSType;
       |  296|typedef FourCharCode                    ResType;
       |  297|typedef OSType *                        OSTypePtr;
       |  298|typedef ResType *                       ResTypePtr;
  ------------------
  | __55-[AFImageDownloader cancelTaskForImageDownloadReceipt:]_block_invoke240:
  |      0|  296|typedef FourCharCode                    ResType;
  |      0|  297|typedef OSType *                        OSTypePtr;
  |      0|  298|typedef ResType *                       ResTypePtr;
  ------------------
       |  299|/********************************************************************************
       |  300|
       |  301|    Boolean types and values
       |  302|    
  ------------------
  | -[AFJSONResponseSerializer initWithCoder:]:
  |      0|  292|typedef SInt16                          LangCode;
  |      0|  293|typedef SInt16                          RegionCode;
  |      0|  294|typedef UInt32                          FourCharCode;
  |      0|  295|typedef FourCharCode                    OSType;
  |      0|  296|typedef FourCharCode                    ResType;
  |      0|  297|typedef OSType *                        OSTypePtr;
  |      0|  298|typedef ResType *                       ResTypePtr;
  |      0|  299|/********************************************************************************
  |      0|  300|
  |      0|  301|    Boolean types and values
  |      0|  302|    
  ------------------
       |  303|        Boolean         Mac OS historic type, sizeof(Boolean)==1
       |  304|        bool            Defined in stdbool.h, ISO C/C++ standard type
       |  305|        false           Now defined in stdbool.h
       |  306|        true            Now defined in stdbool.h
       |  307|        
       |  308|*********************************************************************************/
       |  309|typedef unsigned char                   Boolean;
       |  310|/********************************************************************************
       |  311|
       |  312|    Function Pointer Types
       |  313|    
       |  314|        ProcPtr                 Generic pointer to a function
       |  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
  ------------------
  | __72-[AFURLSessionManagerTaskDelegate URLSession:task:didCompleteWithError:]_block_invoke148:
  |      0|  290|typedef UInt32                          PBVersion;
  |      0|  291|typedef SInt16                          ScriptCode;
  |      0|  292|typedef SInt16                          LangCode;
  |      0|  293|typedef SInt16                          RegionCode;
  |      0|  294|typedef UInt32                          FourCharCode;
  |      0|  295|typedef FourCharCode                    OSType;
  |      0|  296|typedef FourCharCode                    ResType;
  |      0|  297|typedef OSType *                        OSTypePtr;
  |      0|  298|typedef ResType *                       ResTypePtr;
  |      0|  299|/********************************************************************************
  |      0|  300|
  |      0|  301|    Boolean types and values
  |      0|  302|    
  |      0|  303|        Boolean         Mac OS historic type, sizeof(Boolean)==1
  |      0|  304|        bool            Defined in stdbool.h, ISO C/C++ standard type
  |      0|  305|        false           Now defined in stdbool.h
  |      0|  306|        true            Now defined in stdbool.h
  |      0|  307|        
  |      0|  308|*********************************************************************************/
  |      0|  309|typedef unsigned char                   Boolean;
  |      0|  310|/********************************************************************************
  |      0|  311|
  |      0|  312|    Function Pointer Types
  |      0|  313|    
  |      0|  314|        ProcPtr                 Generic pointer to a function
  |      0|  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
  ------------------
       |  316|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
  ------------------
  | -[AFImageDownloader safelyRemoveMergedTaskWithIdentifier:]:
  |      0|  308|*********************************************************************************/
  |      0|  309|typedef unsigned char                   Boolean;
  |      0|  310|/********************************************************************************
  |      0|  311|
  |      0|  312|    Function Pointer Types
  |      0|  313|    
  |      0|  314|        ProcPtr                 Generic pointer to a function
  |      0|  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
  |      0|  316|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
  ------------------
       |  317|        
       |  318|        ProcHandle              Pointer to a ProcPtr
  ------------------
  | -[AFURLSessionManagerTaskDelegate URLSession:task:didCompleteWithError:]:
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  |      0|  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  |      0|  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
  |      0|  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
  |      0|  276|        
  |      0|  277|*********************************************************************************/
  |      0|  278|typedef SInt16                          OSErr;
  |      0|  279|typedef SInt32                          OSStatus;
  |      0|  280|typedef void *                          LogicalAddress;
  |      0|  281|typedef const void *                    ConstLogicalAddress;
  |      0|  282|typedef void *                          PhysicalAddress;
  |      0|  283|typedef UInt8 *                         BytePtr;
  |      0|  284|typedef unsigned long                   ByteCount;
  |      0|  285|typedef unsigned long                   ByteOffset;
  |      0|  286|typedef SInt32                          Duration;
  |      0|  287|typedef UnsignedWide                    AbsoluteTime;
  |      0|  288|typedef UInt32                          OptionBits;
  |      0|  289|typedef unsigned long                   ItemCount;
  |      0|  290|typedef UInt32                          PBVersion;
  |      0|  291|typedef SInt16                          ScriptCode;
  |      0|  292|typedef SInt16                          LangCode;
  |      0|  293|typedef SInt16                          RegionCode;
  |      0|  294|typedef UInt32                          FourCharCode;
  |      0|  295|typedef FourCharCode                    OSType;
  |      0|  296|typedef FourCharCode                    ResType;
  |      0|  297|typedef OSType *                        OSTypePtr;
  |      0|  298|typedef ResType *                       ResTypePtr;
  |      0|  299|/********************************************************************************
  |      0|  300|
  |      0|  301|    Boolean types and values
  |      0|  302|    
  |      0|  303|        Boolean         Mac OS historic type, sizeof(Boolean)==1
  |      0|  304|        bool            Defined in stdbool.h, ISO C/C++ standard type
  |      0|  305|        false           Now defined in stdbool.h
  |      0|  306|        true            Now defined in stdbool.h
  |      0|  307|        
  |      0|  308|*********************************************************************************/
  |      0|  309|typedef unsigned char                   Boolean;
  |      0|  310|/********************************************************************************
  |      0|  311|
  |      0|  312|    Function Pointer Types
  |      0|  313|    
  |      0|  314|        ProcPtr                 Generic pointer to a function
  |      0|  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
  |      0|  316|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
  |      0|  317|        
  |      0|  318|        ProcHandle              Pointer to a ProcPtr
  ------------------
       |  319|        UniversalProcHandle     Pointer to a UniversalProcPtr
       |  320|        
       |  321|*********************************************************************************/
       |  322|typedef CALLBACK_API_C( long , ProcPtr )();
       |  323|typedef CALLBACK_API( void , Register68kProcPtr )();
       |  324|#if TARGET_RT_MAC_CFM
       |  325|/*  The RoutineDescriptor structure is defined in MixedMode.h */
       |  326|typedef struct RoutineDescriptor *UniversalProcPtr;
       |  327|#else
       |  328|typedef ProcPtr                         UniversalProcPtr;
       |  329|#endif  /* TARGET_RT_MAC_CFM */
       |  330|
       |  331|typedef ProcPtr *                       ProcHandle;
       |  332|typedef UniversalProcPtr *              UniversalProcHandle;
  ------------------
  | -[AFSecurityPolicy initWithCoder:]:
  |      0|  319|        UniversalProcHandle     Pointer to a UniversalProcPtr
  |      0|  320|        
  |      0|  321|*********************************************************************************/
  |      0|  322|typedef CALLBACK_API_C( long , ProcPtr )();
  |      0|  323|typedef CALLBACK_API( void , Register68kProcPtr )();
  |      0|  324|#if TARGET_RT_MAC_CFM
  |      0|  325|/*  The RoutineDescriptor structure is defined in MixedMode.h */
  |      0|  326|typedef struct RoutineDescriptor *UniversalProcPtr;
  |      0|  327|#else
  |      0|  328|typedef ProcPtr                         UniversalProcPtr;
  |      0|  329|#endif  /* TARGET_RT_MAC_CFM */
  |      0|  330|
  |      0|  331|typedef ProcPtr *                       ProcHandle;
  |      0|  332|typedef UniversalProcPtr *              UniversalProcHandle;
  ------------------
       |  333|/********************************************************************************
       |  334|
  ------------------
  | -[AFHTTPSessionManager initWithCoder:]:
  |      0|  307|        
  |      0|  308|*********************************************************************************/
  |      0|  309|typedef unsigned char                   Boolean;
  |      0|  310|/********************************************************************************
  |      0|  311|
  |      0|  312|    Function Pointer Types
  |      0|  313|    
  |      0|  314|        ProcPtr                 Generic pointer to a function
  |      0|  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
  |       |  316|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
  |       |  317|        
  |      0|  318|        ProcHandle              Pointer to a ProcPtr
  |      0|  319|        UniversalProcHandle     Pointer to a UniversalProcPtr
  |      0|  320|        
  |      0|  321|*********************************************************************************/
  |      0|  322|typedef CALLBACK_API_C( long , ProcPtr )();
  |      0|  323|typedef CALLBACK_API( void , Register68kProcPtr )();
  |      0|  324|#if TARGET_RT_MAC_CFM
  |      0|  325|/*  The RoutineDescriptor structure is defined in MixedMode.h */
  |      0|  326|typedef struct RoutineDescriptor *UniversalProcPtr;
  |      0|  327|#else
  |      0|  328|typedef ProcPtr                         UniversalProcPtr;
  |      0|  329|#endif  /* TARGET_RT_MAC_CFM */
  |      0|  330|
  |      0|  331|typedef ProcPtr *                       ProcHandle;
  |      0|  332|typedef UniversalProcPtr *              UniversalProcHandle;
  |      0|  333|/********************************************************************************
  |      0|  334|
  ------------------
       |  335|    RefCon Types
       |  336|    
       |  337|        For access to private data in callbacks, etc.; refcons are generally
       |  338|        used as a pointer to something, but in the 32-bit world refcons in
       |  339|        different APIs have had various types: pointer, unsigned scalar, and
  ------------------
  | -[AFHTTPRequestSerializer setQueryStringSerializationWithStyle:]:
  |      0|  336|    
  |      0|  337|        For access to private data in callbacks, etc.; refcons are generally
  |      0|  338|        used as a pointer to something, but in the 32-bit world refcons in
  |      0|  339|        different APIs have had various types: pointer, unsigned scalar, and
  ------------------
       |  340|        signed scalar. The RefCon types defined here support the current 32-bit
       |  341|        usage but provide normalization to pointer types for 64-bit.
       |  342|        
  ------------------
  | -[AFXMLParserResponseSerializer init]:
  |      0|  333|/********************************************************************************
  |      0|  334|
  |      0|  335|    RefCon Types
  |      0|  336|    
  |      0|  337|        For access to private data in callbacks, etc.; refcons are generally
  |      0|  338|        used as a pointer to something, but in the 32-bit world refcons in
  |      0|  339|        different APIs have had various types: pointer, unsigned scalar, and
  |      0|  340|        signed scalar. The RefCon types defined here support the current 32-bit
  |      0|  341|        usage but provide normalization to pointer types for 64-bit.
  |      0|  342|        
  ------------------
       |  343|        PRefCon is preferred for new APIs; URefCon and SRefCon are primarily
       |  344|        for compatibility with existing APIs.
       |  345|        
       |  346|*********************************************************************************/
       |  347|typedef void *                          PRefCon;
       |  348|#if __LP64__
  ------------------
  | -[AFURLSessionManagerTaskDelegate URLSession:downloadTask:didFinishDownloadingToURL:]:
  |      0|  334|
  |      0|  335|    RefCon Types
  |      0|  336|    
  |      0|  337|        For access to private data in callbacks, etc.; refcons are generally
  |      0|  338|        used as a pointer to something, but in the 32-bit world refcons in
  |      0|  339|        different APIs have had various types: pointer, unsigned scalar, and
  |      0|  340|        signed scalar. The RefCon types defined here support the current 32-bit
  |      0|  341|        usage but provide normalization to pointer types for 64-bit.
  |      0|  342|        
  |      0|  343|        PRefCon is preferred for new APIs; URefCon and SRefCon are primarily
  |      0|  344|        for compatibility with existing APIs.
  |      0|  345|        
  |      0|  346|*********************************************************************************/
  |      0|  347|typedef void *                          PRefCon;
  |      0|  348|#if __LP64__
  ------------------
       |  349|typedef void *                          URefCon;
       |  350|typedef void *                          SRefCon;
       |  351|#else
       |  352|typedef UInt32                          URefCon;
       |  353|typedef SInt32                          SRefCon;
       |  354|#endif  /* __LP64__ */
       |  355|
       |  356|/********************************************************************************
       |  357|
  ------------------
  | -[AFXMLParserResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  349|typedef void *                          URefCon;
  |      0|  350|typedef void *                          SRefCon;
  |      0|  351|#else
  |      0|  352|typedef UInt32                          URefCon;
  |      0|  353|typedef SInt32                          SRefCon;
  |      0|  354|#endif  /* __LP64__ */
  |      0|  355|
  |      0|  356|/********************************************************************************
  |      0|  357|
  ------------------
       |  358|    Common Constants
       |  359|    
       |  360|        noErr                   OSErr: function performed properly - no error
       |  361|        kNilOptions             OptionBits: all flags false
  ------------------
  | -[AFImageDownloader dequeueMergedTask]:
  |      0|  356|/********************************************************************************
  |      0|  357|
  |      0|  358|    Common Constants
  |      0|  359|    
  |      0|  360|        noErr                   OSErr: function performed properly - no error
  |      0|  361|        kNilOptions             OptionBits: all flags false
  ------------------
       |  362|        kInvalidID              KernelID: NULL is for pointers as kInvalidID is for ID's
       |  363|        kVariableLengthArray    array bounds: variable length array
       |  364|
       |  365|    Note: kVariableLengthArray was used in array bounds to specify a variable length array,
       |  366|          usually the last field in a struct.  Now that the C language supports 
       |  367|		  the concept of flexible array members, you can instead use: 
       |  368|		
       |  369|		struct BarList
       |  370|		{
       |  371|			short	listLength;
       |  372|			Bar		elements[];
       |  373|		};
       |  374|
       |  375|		However, this changes the semantics somewhat, as sizeof( BarList ) contains
       |  376|		no space for any of the elements, so to allocate a list with space for
       |  377|		the count elements
       |  378|
       |  379|		struct BarList* l = (struct BarList*) malloc( sizeof(BarList) + count * sizeof(Bar) );
       |  380|        
       |  381|*********************************************************************************/
       |  382|enum {
       |  383|  noErr                         = 0
       |  384|};
       |  385|
       |  386|enum {
       |  387|  kNilOptions                   = 0
       |  388|};
       |  389|
       |  390|#define kInvalidID   0
       |  391|enum {
       |  392|  kVariableLengthArray  
       |  393|#ifdef __has_extension
       |  394|   #if __has_extension(enumerator_attributes)
       |  395|		__attribute__((deprecated))  
       |  396|	#endif
       |  397|#endif
       |  398|  = 1
       |  399|};
       |  400|
       |  401|enum {
       |  402|  kUnknownType                  = 0x3F3F3F3F /* "????" QuickTime 3.0: default unknown ResType or OSType */
       |  403|};
       |  404|
       |  405|
       |  406|
       |  407|/********************************************************************************
       |  408|
  ------------------
  | -[AFHTTPRequestSerializer multipartFormRequestWithMethod:URLString:parameters:constructingBodyWithBlock:error:]:
  |      0|  378|
  |      0|  379|		struct BarList* l = (struct BarList*) malloc( sizeof(BarList) + count * sizeof(Bar) );
  |      0|  380|        
  |      0|  381|*********************************************************************************/
  |      0|  382|enum {
  |      0|  383|  noErr                         = 0
  |      0|  384|};
  |      0|  385|
  |      0|  386|enum {
  |      0|  387|  kNilOptions                   = 0
  |      0|  388|};
  |      0|  389|
  |      0|  390|#define kInvalidID   0
  |      0|  391|enum {
  |      0|  392|  kVariableLengthArray  
  |      0|  393|#ifdef __has_extension
  |      0|  394|   #if __has_extension(enumerator_attributes)
  |      0|  395|		__attribute__((deprecated))  
  |      0|  396|	#endif
  |      0|  397|#endif
  |      0|  398|  = 1
  |      0|  399|};
  |      0|  400|
  |      0|  401|enum {
  |      0|  402|  kUnknownType                  = 0x3F3F3F3F /* "????" QuickTime 3.0: default unknown ResType or OSType */
  |      0|  403|};
  |      0|  404|
  |      0|  405|
  |      0|  406|
  |      0|  407|/********************************************************************************
  |      0|  408|
  ------------------
       |  409|    String Types and Unicode Types
       |  410|    
       |  411|        UnicodeScalarValue,     A complete Unicode character in UTF-32 format, with
       |  412|        UTF32Char               values from 0 through 0x10FFFF (excluding the surrogate
       |  413|                                range 0xD800-0xDFFF and certain disallowed values).
       |  414|
       |  415|        UniChar,                A 16-bit Unicode code value in the default UTF-16 format.
       |  416|        UTF16Char               UnicodeScalarValues 0-0xFFFF are expressed in UTF-16
       |  417|                                format using a single UTF16Char with the same value.
       |  418|                                UnicodeScalarValues 0x10000-0x10FFFF are expressed in
       |  419|                                UTF-16 format using a pair of UTF16Chars - one in the
       |  420|                                high surrogate range (0xD800-0xDBFF) followed by one in
       |  421|                                the low surrogate range (0xDC00-0xDFFF). All of the
       |  422|                                characters defined in Unicode versions through 3.0 are
       |  423|                                in the range 0-0xFFFF and can be expressed using a single
       |  424|                                UTF16Char, thus the term "Unicode character" generally
       |  425|                                refers to a UniChar = UTF16Char.
       |  426|
       |  427|        UTF8Char                An 8-bit code value in UTF-8 format. UnicodeScalarValues
       |  428|                                0-0x7F are expressed in UTF-8 format using one UTF8Char
       |  429|                                with the same value. UnicodeScalarValues above 0x7F are
       |  430|                                expressed in UTF-8 format using 2-4 UTF8Chars, all with
       |  431|                                values in the range 0x80-0xF4 (UnicodeScalarValues
       |  432|                                0x100-0xFFFF use two or three UTF8Chars,
       |  433|                                UnicodeScalarValues 0x10000-0x10FFFF use four UTF8Chars).
       |  434|
       |  435|        UniCharCount            A count of UTF-16 code values in an array or buffer.
       |  436|
       |  437|        StrNNN                  Pascal string holding up to NNN bytes
       |  438|        StringPtr               Pointer to a pascal string
  ------------------
  | +[_AFURLSessionTaskSwizzling load]:
  |      3|  382|enum {
  |      3|  383|  noErr                         = 0
  |      3|  384|};
  |      3|  385|
  |      3|  386|enum {
  |      3|  387|  kNilOptions                   = 0
  |      3|  388|};
  |      3|  389|
  |      3|  390|#define kInvalidID   0
  |      3|  391|enum {
  |      3|  392|  kVariableLengthArray  
  |      3|  393|#ifdef __has_extension
  |      3|  394|   #if __has_extension(enumerator_attributes)
  |      3|  395|		__attribute__((deprecated))  
  |      3|  396|	#endif
  |      3|  397|#endif
  |      3|  398|  = 1
  |      3|  399|};
  |      3|  400|
  |      3|  401|enum {
  |      3|  402|  kUnknownType                  = 0x3F3F3F3F /* "????" QuickTime 3.0: default unknown ResType or OSType */
  |      3|  403|};
  |      3|  404|
  |      3|  405|
  |      3|  406|
  |      3|  407|/********************************************************************************
  |      3|  408|
  |      3|  409|    String Types and Unicode Types
  |      3|  410|    
  |      3|  411|        UnicodeScalarValue,     A complete Unicode character in UTF-32 format, with
  |      3|  412|        UTF32Char               values from 0 through 0x10FFFF (excluding the surrogate
  |      3|  413|                                range 0xD800-0xDFFF and certain disallowed values).
  |      3|  414|
  |      3|  415|        UniChar,                A 16-bit Unicode code value in the default UTF-16 format.
  |      3|  416|        UTF16Char               UnicodeScalarValues 0-0xFFFF are expressed in UTF-16
  |      3|  417|                                format using a single UTF16Char with the same value.
  |      3|  418|                                UnicodeScalarValues 0x10000-0x10FFFF are expressed in
  |      3|  419|                                UTF-16 format using a pair of UTF16Chars - one in the
  |      3|  420|                                high surrogate range (0xD800-0xDBFF) followed by one in
  |      3|  421|                                the low surrogate range (0xDC00-0xDFFF). All of the
  |      3|  422|                                characters defined in Unicode versions through 3.0 are
  |      3|  423|                                in the range 0-0xFFFF and can be expressed using a single
  |     15|  424|                                UTF16Char, thus the term "Unicode character" generally
  |     12|  425|                                refers to a UniChar = UTF16Char.
  |     12|  426|
  |     12|  427|        UTF8Char                An 8-bit code value in UTF-8 format. UnicodeScalarValues
  |     12|  428|                                0-0x7F are expressed in UTF-8 format using one UTF8Char
  |      5|  429|                                with the same value. UnicodeScalarValues above 0x7F are
  |      5|  430|                                expressed in UTF-8 format using 2-4 UTF8Chars, all with
  |      5|  431|                                values in the range 0x80-0xF4 (UnicodeScalarValues
  |     12|  432|                                0x100-0xFFFF use two or three UTF8Chars,
  |     12|  433|                                UnicodeScalarValues 0x10000-0x10FFFF use four UTF8Chars).
  |      3|  434|
  |      3|  435|        UniCharCount            A count of UTF-16 code values in an array or buffer.
  |      3|  436|
  |      3|  437|        StrNNN                  Pascal string holding up to NNN bytes
  |      3|  438|        StringPtr               Pointer to a pascal string
  ------------------
       |  439|        StringHandle            Pointer to a StringPtr
       |  440|        ConstStringPtr          Pointer to a read-only pascal string
       |  441|        ConstStrNNNParam        For function parameters only - means string is const
       |  442|        
       |  443|        CStringPtr              Pointer to a C string           (in C:  char*)
       |  444|        ConstCStringPtr         Pointer to a read-only C string (in C:  const char*)
       |  445|        
       |  446|    Note: The length of a pascal string is stored as the first byte.
       |  447|          A pascal string does not have a termination byte.
       |  448|          A pascal string can hold at most 255 bytes of data.
       |  449|          The first character in a pascal string is offset one byte from the start of the string. 
       |  450|          
       |  451|          A C string is terminated with a byte of value zero.  
       |  452|          A C string has no length limitation.
       |  453|          The first character in a C string is the zeroth byte of the string. 
       |  454|          
       |  455|        
       |  456|*********************************************************************************/
       |  457|typedef UInt32                          UnicodeScalarValue;
       |  458|typedef UInt32                          UTF32Char;
       |  459|typedef UInt16                          UniChar;
       |  460|typedef UInt16                          UTF16Char;
       |  461|typedef UInt8                           UTF8Char;
       |  462|typedef UniChar *                       UniCharPtr;
  ------------------
  | -[AFHTTPRequestSerializer requestWithMultipartFormRequest:writingStreamContentsToFile:completionHandler:]:
  |      0|  413|                                range 0xD800-0xDFFF and certain disallowed values).
  |      0|  414|
  |      0|  415|        UniChar,                A 16-bit Unicode code value in the default UTF-16 format.
  |      0|  416|        UTF16Char               UnicodeScalarValues 0-0xFFFF are expressed in UTF-16
  |      0|  417|                                format using a single UTF16Char with the same value.
  |      0|  418|                                UnicodeScalarValues 0x10000-0x10FFFF are expressed in
  |      0|  419|                                UTF-16 format using a pair of UTF16Chars - one in the
  |      0|  420|                                high surrogate range (0xD800-0xDBFF) followed by one in
  |      0|  421|                                the low surrogate range (0xDC00-0xDFFF). All of the
  |      0|  422|                                characters defined in Unicode versions through 3.0 are
  |      0|  423|                                in the range 0-0xFFFF and can be expressed using a single
  |      0|  424|                                UTF16Char, thus the term "Unicode character" generally
  |      0|  425|                                refers to a UniChar = UTF16Char.
  |      0|  426|
  |      0|  427|        UTF8Char                An 8-bit code value in UTF-8 format. UnicodeScalarValues
  |      0|  428|                                0-0x7F are expressed in UTF-8 format using one UTF8Char
  |      0|  429|                                with the same value. UnicodeScalarValues above 0x7F are
  |      0|  430|                                expressed in UTF-8 format using 2-4 UTF8Chars, all with
  |      0|  431|                                values in the range 0x80-0xF4 (UnicodeScalarValues
  |      0|  432|                                0x100-0xFFFF use two or three UTF8Chars,
  |      0|  433|                                UnicodeScalarValues 0x10000-0x10FFFF use four UTF8Chars).
  |      0|  434|
  |      0|  435|        UniCharCount            A count of UTF-16 code values in an array or buffer.
  |      0|  436|
  |      0|  437|        StrNNN                  Pascal string holding up to NNN bytes
  |      0|  438|        StringPtr               Pointer to a pascal string
  |      0|  439|        StringHandle            Pointer to a StringPtr
  |      0|  440|        ConstStringPtr          Pointer to a read-only pascal string
  |      0|  441|        ConstStrNNNParam        For function parameters only - means string is const
  |      0|  442|        
  |      0|  443|        CStringPtr              Pointer to a C string           (in C:  char*)
  |      0|  444|        ConstCStringPtr         Pointer to a read-only C string (in C:  const char*)
  |      0|  445|        
  |      0|  446|    Note: The length of a pascal string is stored as the first byte.
  |      0|  447|          A pascal string does not have a termination byte.
  |      0|  448|          A pascal string can hold at most 255 bytes of data.
  |      0|  449|          The first character in a pascal string is offset one byte from the start of the string. 
  |      0|  450|          
  |      0|  451|          A C string is terminated with a byte of value zero.  
  |      0|  452|          A C string has no length limitation.
  |      0|  453|          The first character in a C string is the zeroth byte of the string. 
  |      0|  454|          
  |      0|  455|        
  |      0|  456|*********************************************************************************/
  |      0|  457|typedef UInt32                          UnicodeScalarValue;
  |      0|  458|typedef UInt32                          UTF32Char;
  |      0|  459|typedef UInt16                          UniChar;
  |      0|  460|typedef UInt16                          UTF16Char;
  |      0|  461|typedef UInt8                           UTF8Char;
  |      0|  462|typedef UniChar *                       UniCharPtr;
  ------------------
       |  463|typedef unsigned long                   UniCharCount;
       |  464|typedef UniCharCount *                  UniCharCountPtr;
       |  465|typedef unsigned char                   Str255[256];
       |  466|typedef unsigned char                   Str63[64];
       |  467|typedef unsigned char                   Str32[33];
       |  468|typedef unsigned char                   Str31[32];
       |  469|typedef unsigned char                   Str27[28];
       |  470|typedef unsigned char                   Str15[16];
  ------------------
  | -[AFPropertyListResponseSerializer init]:
  |      0|  461|typedef UInt8                           UTF8Char;
  |      0|  462|typedef UniChar *                       UniCharPtr;
  |      0|  463|typedef unsigned long                   UniCharCount;
  |      0|  464|typedef UniCharCount *                  UniCharCountPtr;
  |      0|  465|typedef unsigned char                   Str255[256];
  |      0|  466|typedef unsigned char                   Str63[64];
  |      0|  467|typedef unsigned char                   Str32[33];
  |      0|  468|typedef unsigned char                   Str31[32];
  |      0|  469|typedef unsigned char                   Str27[28];
  |      0|  470|typedef unsigned char                   Str15[16];
  ------------------
       |  471|/*
       |  472|    The type Str32 is used in many AppleTalk based data structures.
       |  473|    It holds up to 32 one byte chars.  The problem is that with the
       |  474|    length byte it is 33 bytes long.  This can cause weird alignment
       |  475|    problems in structures.  To fix this the type "Str32Field" has
       |  476|    been created.  It should only be used to hold 32 chars, but
       |  477|    it is 34 bytes long so that there are no alignment problems.
       |  478|*/
       |  479|typedef unsigned char                   Str32Field[34];
       |  480|/*
       |  481|    QuickTime 3.0:
       |  482|    The type StrFileName is used to make MacOS structs work 
       |  483|    cross-platform.  For example FSSpec or SFReply previously
       |  484|    contained a Str63 field.  They now contain a StrFileName
       |  485|    field which is the same when targeting the MacOS but is
       |  486|    a 256 char buffer for Win32 and unix, allowing them to
       |  487|    contain long file names.
       |  488|*/
       |  489|typedef Str63                           StrFileName;
       |  490|typedef unsigned char *                 StringPtr;
       |  491|typedef StringPtr *                     StringHandle;
       |  492|typedef const unsigned char *           ConstStringPtr;
       |  493|typedef const unsigned char *           ConstStr255Param;
       |  494|typedef const unsigned char *           ConstStr63Param;
       |  495|typedef const unsigned char *           ConstStr32Param;
       |  496|typedef const unsigned char *           ConstStr31Param;
  ------------------
  | -[AFPropertyListResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  477|    it is 34 bytes long so that there are no alignment problems.
  |      0|  478|*/
  |      0|  479|typedef unsigned char                   Str32Field[34];
  |      0|  480|/*
  |      0|  481|    QuickTime 3.0:
  |      0|  482|    The type StrFileName is used to make MacOS structs work 
  |      0|  483|    cross-platform.  For example FSSpec or SFReply previously
  |      0|  484|    contained a Str63 field.  They now contain a StrFileName
  |      0|  485|    field which is the same when targeting the MacOS but is
  |      0|  486|    a 256 char buffer for Win32 and unix, allowing them to
  |      0|  487|    contain long file names.
  |      0|  488|*/
  |      0|  489|typedef Str63                           StrFileName;
  |      0|  490|typedef unsigned char *                 StringPtr;
  |      0|  491|typedef StringPtr *                     StringHandle;
  |      0|  492|typedef const unsigned char *           ConstStringPtr;
  |      0|  493|typedef const unsigned char *           ConstStr255Param;
  |      0|  494|typedef const unsigned char *           ConstStr63Param;
  |      0|  495|typedef const unsigned char *           ConstStr32Param;
  |      0|  496|typedef const unsigned char *           ConstStr31Param;
  ------------------
       |  497|typedef const unsigned char *           ConstStr27Param;
       |  498|typedef const unsigned char *           ConstStr15Param;
       |  499|typedef ConstStr63Param                 ConstStrFileNameParam;
       |  500|#ifdef __cplusplus
       |  501|inline unsigned char StrLength(ConstStr255Param string) { return (*string); }
       |  502|#else
       |  503|#define StrLength(string) (*(unsigned char *)(string))
       |  504|#endif  /* defined(__cplusplus) */
       |  505|
       |  506|#if OLDROUTINENAMES
       |  507|#define Length(string) StrLength(string)
       |  508|#endif  /* OLDROUTINENAMES */
       |  509|
  ------------------
  | -[AFURLSessionManager init]:
  |      0|  507|#define Length(string) StrLength(string)
  |      0|  508|#endif  /* OLDROUTINENAMES */
  |      0|  509|
  ------------------
       |  510|/********************************************************************************
  ------------------
  | -[AFPropertyListResponseSerializer initWithCoder:]:
  |      0|  500|#ifdef __cplusplus
  |      0|  501|inline unsigned char StrLength(ConstStr255Param string) { return (*string); }
  |      0|  502|#else
  |      0|  503|#define StrLength(string) (*(unsigned char *)(string))
  |      0|  504|#endif  /* defined(__cplusplus) */
  |      0|  505|
  |      0|  506|#if OLDROUTINENAMES
  |      0|  507|#define Length(string) StrLength(string)
  |      0|  508|#endif  /* OLDROUTINENAMES */
  |      0|  509|
  |      0|  510|/********************************************************************************
  ------------------
       |  511|
       |  512|    Process Manager type ProcessSerialNumber (previously in Processes.h)
       |  513|
       |  514|*********************************************************************************/
       |  515|/* type for unique process identifier */
       |  516|struct ProcessSerialNumber {
       |  517|  UInt32              highLongOfPSN;
       |  518|  UInt32              lowLongOfPSN;
  ------------------
  | -[AFHTTPRequestSerializer requestBySerializingRequest:withParameters:error:]:
  |      0|  469|typedef unsigned char                   Str27[28];
  |      0|  470|typedef unsigned char                   Str15[16];
  |      0|  471|/*
  |      0|  472|    The type Str32 is used in many AppleTalk based data structures.
  |      0|  473|    It holds up to 32 one byte chars.  The problem is that with the
  |      0|  474|    length byte it is 33 bytes long.  This can cause weird alignment
  |      0|  475|    problems in structures.  To fix this the type "Str32Field" has
  |      0|  476|    been created.  It should only be used to hold 32 chars, but
  |      0|  477|    it is 34 bytes long so that there are no alignment problems.
  |      0|  478|*/
  |      0|  479|typedef unsigned char                   Str32Field[34];
  |      0|  480|/*
  |      0|  481|    QuickTime 3.0:
  |      0|  482|    The type StrFileName is used to make MacOS structs work 
  |      0|  483|    cross-platform.  For example FSSpec or SFReply previously
  |      0|  484|    contained a Str63 field.  They now contain a StrFileName
  |      0|  485|    field which is the same when targeting the MacOS but is
  |      0|  486|    a 256 char buffer for Win32 and unix, allowing them to
  |      0|  487|    contain long file names.
  |      0|  488|*/
  |      0|  489|typedef Str63                           StrFileName;
  |      0|  490|typedef unsigned char *                 StringPtr;
  |      0|  491|typedef StringPtr *                     StringHandle;
  |      0|  492|typedef const unsigned char *           ConstStringPtr;
  |      0|  493|typedef const unsigned char *           ConstStr255Param;
  |      0|  494|typedef const unsigned char *           ConstStr63Param;
  |      0|  495|typedef const unsigned char *           ConstStr32Param;
  |      0|  496|typedef const unsigned char *           ConstStr31Param;
  |      0|  497|typedef const unsigned char *           ConstStr27Param;
  |      0|  498|typedef const unsigned char *           ConstStr15Param;
  |      0|  499|typedef ConstStr63Param                 ConstStrFileNameParam;
  |      0|  500|#ifdef __cplusplus
  |      0|  501|inline unsigned char StrLength(ConstStr255Param string) { return (*string); }
  |      0|  502|#else
  |      0|  503|#define StrLength(string) (*(unsigned char *)(string))
  |      0|  504|#endif  /* defined(__cplusplus) */
  |      0|  505|
  |      0|  506|#if OLDROUTINENAMES
  |      0|  507|#define Length(string) StrLength(string)
  |      0|  508|#endif  /* OLDROUTINENAMES */
  |      0|  509|
  |      0|  510|/********************************************************************************
  |      0|  511|
  |      0|  512|    Process Manager type ProcessSerialNumber (previously in Processes.h)
  |      0|  513|
  |      0|  514|*********************************************************************************/
  |      0|  515|/* type for unique process identifier */
  |      0|  516|struct ProcessSerialNumber {
  |      0|  517|  UInt32              highLongOfPSN;
  |      0|  518|  UInt32              lowLongOfPSN;
  ------------------
       |  519|};
       |  520|typedef struct ProcessSerialNumber      ProcessSerialNumber;
       |  521|typedef ProcessSerialNumber *           ProcessSerialNumberPtr;
       |  522|/********************************************************************************
       |  523|
       |  524|    Quickdraw Types
       |  525|    
       |  526|        Point               2D Quickdraw coordinate, range: -32K to +32K
       |  527|        Rect                Rectangular Quickdraw area
       |  528|        Style               Quickdraw font rendering styles
       |  529|        StyleParameter      Style when used as a parameter (historical 68K convention)
       |  530|        StyleField          Style when used as a field (historical 68K convention)
       |  531|        CharParameter       Char when used as a parameter (historical 68K convention)
       |  532|        
       |  533|    Note:   The original Macintosh toolbox in 68K Pascal defined Style as a SET.  
       |  534|            Both Style and CHAR occupy 8-bits in packed records or 16-bits when 
       |  535|            used as fields in non-packed records or as parameters. 
       |  536|        
       |  537|*********************************************************************************/
       |  538|struct Point {
       |  539|  short               v;
       |  540|  short               h;
       |  541|};
       |  542|typedef struct Point                    Point;
       |  543|typedef Point *                         PointPtr;
       |  544|struct Rect {
       |  545|  short               top;
       |  546|  short               left;
       |  547|  short               bottom;
       |  548|  short               right;
       |  549|};
       |  550|typedef struct Rect                     Rect;
       |  551|typedef Rect *                          RectPtr;
       |  552|struct FixedPoint {
       |  553|  Fixed               x;
  ------------------
  | __52-[AFURLSessionManager initWithSessionConfiguration:]_block_invoke:
  |      0|  541|};
  |      0|  542|typedef struct Point                    Point;
  |      0|  543|typedef Point *                         PointPtr;
  |      0|  544|struct Rect {
  |      0|  545|  short               top;
  |      0|  546|  short               left;
  |      0|  547|  short               bottom;
  |      0|  548|  short               right;
  |      0|  549|};
  |      0|  550|typedef struct Rect                     Rect;
  |      0|  551|typedef Rect *                          RectPtr;
  |      0|  552|struct FixedPoint {
  |      0|  553|  Fixed               x;
  ------------------
       |  554|  Fixed               y;
       |  555|};
       |  556|typedef struct FixedPoint               FixedPoint;
  ------------------
  | +[UIImage(AFNetworkingSafeImageLoading) af_safeImageWithData:]:
  |      0|  545|  short               top;
  |      0|  546|  short               left;
  |      0|  547|  short               bottom;
  |      0|  548|  short               right;
  |      0|  549|};
  |      0|  550|typedef struct Rect                     Rect;
  |      0|  551|typedef Rect *                          RectPtr;
  |      0|  552|struct FixedPoint {
  |      0|  553|  Fixed               x;
  |      0|  554|  Fixed               y;
  |      0|  555|};
  |      0|  556|typedef struct FixedPoint               FixedPoint;
  ------------------
  | -[AFURLSessionManager initWithSessionConfiguration:]:
  |      0|  511|
  |      0|  512|    Process Manager type ProcessSerialNumber (previously in Processes.h)
  |      0|  513|
  |      0|  514|*********************************************************************************/
  |      0|  515|/* type for unique process identifier */
  |      0|  516|struct ProcessSerialNumber {
  |      0|  517|  UInt32              highLongOfPSN;
  |      0|  518|  UInt32              lowLongOfPSN;
  |      0|  519|};
  |      0|  520|typedef struct ProcessSerialNumber      ProcessSerialNumber;
  |      0|  521|typedef ProcessSerialNumber *           ProcessSerialNumberPtr;
  |      0|  522|/********************************************************************************
  |      0|  523|
  |      0|  524|    Quickdraw Types
  |      0|  525|    
  |      0|  526|        Point               2D Quickdraw coordinate, range: -32K to +32K
  |      0|  527|        Rect                Rectangular Quickdraw area
  |      0|  528|        Style               Quickdraw font rendering styles
  |      0|  529|        StyleParameter      Style when used as a parameter (historical 68K convention)
  |      0|  530|        StyleField          Style when used as a field (historical 68K convention)
  |      0|  531|        CharParameter       Char when used as a parameter (historical 68K convention)
  |      0|  532|        
  |      0|  533|    Note:   The original Macintosh toolbox in 68K Pascal defined Style as a SET.  
  |      0|  534|            Both Style and CHAR occupy 8-bits in packed records or 16-bits when 
  |      0|  535|            used as fields in non-packed records or as parameters. 
  |      0|  536|        
  |      0|  537|*********************************************************************************/
  |      0|  538|struct Point {
  |      0|  539|  short               v;
  |      0|  540|  short               h;
  |      0|  541|};
  |      0|  542|typedef struct Point                    Point;
  |      0|  543|typedef Point *                         PointPtr;
  |      0|  544|struct Rect {
  |      0|  545|  short               top;
  |      0|  546|  short               left;
  |      0|  547|  short               bottom;
  |      0|  548|  short               right;
  |      0|  549|};
  |      0|  550|typedef struct Rect                     Rect;
  |      0|  551|typedef Rect *                          RectPtr;
  |      0|  552|struct FixedPoint {
  |      0|  553|  Fixed               x;
  |      0|  554|  Fixed               y;
  |      0|  555|};
  |      0|  556|typedef struct FixedPoint               FixedPoint;
  ------------------
       |  557|struct FixedRect {
       |  558|  Fixed               left;
       |  559|  Fixed               top;
       |  560|  Fixed               right;
  ------------------
  | -[AFHTTPRequestSerializer initWithCoder:]:
  |      0|  550|typedef struct Rect                     Rect;
  |      0|  551|typedef Rect *                          RectPtr;
  |      0|  552|struct FixedPoint {
  |      0|  553|  Fixed               x;
  |      0|  554|  Fixed               y;
  |      0|  555|};
  |      0|  556|typedef struct FixedPoint               FixedPoint;
  |      0|  557|struct FixedRect {
  |      0|  558|  Fixed               left;
  |      0|  559|  Fixed               top;
  |      0|  560|  Fixed               right;
  ------------------
       |  561|  Fixed               bottom;
       |  562|};
       |  563|typedef struct FixedRect                FixedRect;
       |  564|
       |  565|typedef short                           CharParameter;
       |  566|enum {
       |  567|  normal                        = 0,
       |  568|  bold                          = 1,
       |  569|  italic                        = 2,
       |  570|  underline                     = 4,
       |  571|  outline                       = 8,
       |  572|  shadow                        = 0x10,
       |  573|  condense                      = 0x20,
       |  574|  extend                        = 0x40
       |  575|};
       |  576|
       |  577|typedef unsigned char                   Style;
       |  578|typedef short                           StyleParameter;
       |  579|typedef Style                           StyleField;
       |  580|
       |  581|
       |  582|/********************************************************************************
       |  583|
       |  584|    QuickTime TimeBase types (previously in Movies.h)
       |  585|    
       |  586|        TimeValue           Count of units
       |  587|        TimeScale           Units per second
       |  588|        CompTimeValue       64-bit count of units (always a struct) 
       |  589|        TimeValue64         64-bit count of units (long long or struct) 
       |  590|        TimeBase            An opaque reference to a time base
       |  591|        TimeRecord          Package of TimeBase, duration, and scale
       |  592|        
       |  593|*********************************************************************************/
       |  594|typedef SInt32                          TimeValue;
       |  595|typedef SInt32                          TimeScale;
       |  596|typedef wide                            CompTimeValue;
       |  597|typedef SInt64                          TimeValue64;
       |  598|typedef struct TimeBaseRecord*          TimeBase;
       |  599|struct TimeRecord {
       |  600|  CompTimeValue       value;                  /* units (duration or absolute) */
       |  601|  TimeScale           scale;                  /* units per second */
  ------------------
  | -[AFURLSessionManager delegateForTask:]:
  |      0|  592|        
  |      0|  593|*********************************************************************************/
  |      0|  594|typedef SInt32                          TimeValue;
  |      0|  595|typedef SInt32                          TimeScale;
  |      0|  596|typedef wide                            CompTimeValue;
  |      0|  597|typedef SInt64                          TimeValue64;
  |      0|  598|typedef struct TimeBaseRecord*          TimeBase;
  |      0|  599|struct TimeRecord {
  |      0|  600|  CompTimeValue       value;                  /* units (duration or absolute) */
  |      0|  601|  TimeScale           scale;                  /* units per second */
  ------------------
       |  602|  TimeBase            base;                   /* refernce to the time base */
       |  603|};
       |  604|typedef struct TimeRecord               TimeRecord;
       |  605|
       |  606|/********************************************************************************
       |  607|
       |  608|    THINK C base objects
       |  609|
       |  610|        HandleObject        Root class for handle based THINK C++ objects
       |  611|        PascalObject        Root class for pascal style objects in THINK C++ 
       |  612|
       |  613|*********************************************************************************/
       |  614|#if defined(__SC__) && !defined(__STDC__) && defined(__cplusplus)
       |  615|        class __machdl HandleObject {};
       |  616|        #if TARGET_CPU_68K
       |  617|            class __pasobj PascalObject {};
       |  618|        #endif
       |  619|#endif
       |  620|
       |  621|
       |  622|/********************************************************************************
       |  623|
       |  624|    MacOS versioning structures
       |  625|    
       |  626|        VersRec                 Contents of a 'vers' resource
       |  627|        VersRecPtr              Pointer to a VersRecPtr
       |  628|        VersRecHndl             Resource Handle containing a VersRec
       |  629|        NumVersion              Packed BCD version representation (e.g. "4.2.1a3" is 0x04214003)
       |  630|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
       |  631|        
       |  632|        ProcHandle              Pointer to a ProcPtr
       |  633|        UniversalProcHandle     Pointer to a UniversalProcPtr
       |  634|        
       |  635|*********************************************************************************/
       |  636|#if TARGET_RT_BIG_ENDIAN
       |  637|struct NumVersion {
       |  638|                                              /* Numeric version part of 'vers' resource */
       |  639|  UInt8               majorRev;               /*1st part of version number in BCD*/
       |  640|  UInt8               minorAndBugRev;         /*2nd & 3rd part of version number share a byte*/
       |  641|  UInt8               stage;                  /*stage code: dev, alpha, beta, final*/
       |  642|  UInt8               nonRelRev;              /*revision level of non-released version*/
       |  643|};
       |  644|typedef struct NumVersion               NumVersion;
       |  645|#else
       |  646|struct NumVersion {
       |  647|                                              /* Numeric version part of 'vers' resource accessable in little endian format */
       |  648|  UInt8               nonRelRev;              /*revision level of non-released version*/
       |  649|  UInt8               stage;                  /*stage code: dev, alpha, beta, final*/
       |  650|  UInt8               minorAndBugRev;         /*2nd & 3rd part of version number share a byte*/
       |  651|  UInt8               majorRev;               /*1st part of version number in BCD*/
       |  652|};
       |  653|typedef struct NumVersion               NumVersion;
       |  654|#endif  /* TARGET_RT_BIG_ENDIAN */
       |  655|
       |  656|enum {
       |  657|                                        /* Version Release Stage Codes */
       |  658|  developStage                  = 0x20,
       |  659|  alphaStage                    = 0x40,
  ------------------
  | AFInflatedImageFromResponseWithDataAtScale:
  |      0|  569|  italic                        = 2,
  |      0|  570|  underline                     = 4,
  |      0|  571|  outline                       = 8,
  |      0|  572|  shadow                        = 0x10,
  |      0|  573|  condense                      = 0x20,
  |      0|  574|  extend                        = 0x40
  |      0|  575|};
  |      0|  576|
  |      0|  577|typedef unsigned char                   Style;
  |      0|  578|typedef short                           StyleParameter;
  |      0|  579|typedef Style                           StyleField;
  |      0|  580|
  |      0|  581|
  |      0|  582|/********************************************************************************
  |      0|  583|
  |      0|  584|    QuickTime TimeBase types (previously in Movies.h)
  |      0|  585|    
  |      0|  586|        TimeValue           Count of units
  |      0|  587|        TimeScale           Units per second
  |      0|  588|        CompTimeValue       64-bit count of units (always a struct) 
  |      0|  589|        TimeValue64         64-bit count of units (long long or struct) 
  |      0|  590|        TimeBase            An opaque reference to a time base
  |      0|  591|        TimeRecord          Package of TimeBase, duration, and scale
  |      0|  592|        
  |      0|  593|*********************************************************************************/
  |      0|  594|typedef SInt32                          TimeValue;
  |      0|  595|typedef SInt32                          TimeScale;
  |      0|  596|typedef wide                            CompTimeValue;
  |      0|  597|typedef SInt64                          TimeValue64;
  |      0|  598|typedef struct TimeBaseRecord*          TimeBase;
  |      0|  599|struct TimeRecord {
  |      0|  600|  CompTimeValue       value;                  /* units (duration or absolute) */
  |      0|  601|  TimeScale           scale;                  /* units per second */
  |      0|  602|  TimeBase            base;                   /* refernce to the time base */
  |      0|  603|};
  |      0|  604|typedef struct TimeRecord               TimeRecord;
  |      0|  605|
  |      0|  606|/********************************************************************************
  |      0|  607|
  |      0|  608|    THINK C base objects
  |      0|  609|
  |      0|  610|        HandleObject        Root class for handle based THINK C++ objects
  |      0|  611|        PascalObject        Root class for pascal style objects in THINK C++ 
  |      0|  612|
  |      0|  613|*********************************************************************************/
  |      0|  614|#if defined(__SC__) && !defined(__STDC__) && defined(__cplusplus)
  |      0|  615|        class __machdl HandleObject {};
  |      0|  616|        #if TARGET_CPU_68K
  |      0|  617|            class __pasobj PascalObject {};
  |      0|  618|        #endif
  |      0|  619|#endif
  |      0|  620|
  |      0|  621|
  |      0|  622|/********************************************************************************
  |      0|  623|
  |      0|  624|    MacOS versioning structures
  |      0|  625|    
  |      0|  626|        VersRec                 Contents of a 'vers' resource
  |      0|  627|        VersRecPtr              Pointer to a VersRecPtr
  |      0|  628|        VersRecHndl             Resource Handle containing a VersRec
  |      0|  629|        NumVersion              Packed BCD version representation (e.g. "4.2.1a3" is 0x04214003)
  |      0|  630|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
  |      0|  631|        
  |      0|  632|        ProcHandle              Pointer to a ProcPtr
  |      0|  633|        UniversalProcHandle     Pointer to a UniversalProcPtr
  |      0|  634|        
  |      0|  635|*********************************************************************************/
  |      0|  636|#if TARGET_RT_BIG_ENDIAN
  |      0|  637|struct NumVersion {
  |      0|  638|                                              /* Numeric version part of 'vers' resource */
  |      0|  639|  UInt8               majorRev;               /*1st part of version number in BCD*/
  |      0|  640|  UInt8               minorAndBugRev;         /*2nd & 3rd part of version number share a byte*/
  |      0|  641|  UInt8               stage;                  /*stage code: dev, alpha, beta, final*/
  |      0|  642|  UInt8               nonRelRev;              /*revision level of non-released version*/
  |      0|  643|};
  |      0|  644|typedef struct NumVersion               NumVersion;
  |      0|  645|#else
  |      0|  646|struct NumVersion {
  |      0|  647|                                              /* Numeric version part of 'vers' resource accessable in little endian format */
  |      0|  648|  UInt8               nonRelRev;              /*revision level of non-released version*/
  |      0|  649|  UInt8               stage;                  /*stage code: dev, alpha, beta, final*/
  |      0|  650|  UInt8               minorAndBugRev;         /*2nd & 3rd part of version number share a byte*/
  |      0|  651|  UInt8               majorRev;               /*1st part of version number in BCD*/
  |      0|  652|};
  |      0|  653|typedef struct NumVersion               NumVersion;
  |      0|  654|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  655|
  |      0|  656|enum {
  |      0|  657|                                        /* Version Release Stage Codes */
  |      0|  658|  developStage                  = 0x20,
  |      0|  659|  alphaStage                    = 0x40,
  ------------------
       |  660|  betaStage                     = 0x60,
       |  661|  finalStage                    = 0x80
       |  662|};
       |  663|
       |  664|union NumVersionVariant {
       |  665|                                              /* NumVersionVariant is a wrapper so NumVersion can be accessed as a 32-bit value */
       |  666|  NumVersion          parts;
       |  667|  UInt32              whole;
       |  668|};
  ------------------
  | -[AFStreamingMultipartFormData initWithURLRequest:stringEncoding:]:
  |      0|  656|enum {
  |      0|  657|                                        /* Version Release Stage Codes */
  |      0|  658|  developStage                  = 0x20,
  |      0|  659|  alphaStage                    = 0x40,
  |      0|  660|  betaStage                     = 0x60,
  |      0|  661|  finalStage                    = 0x80
  |      0|  662|};
  |      0|  663|
  |      0|  664|union NumVersionVariant {
  |      0|  665|                                              /* NumVersionVariant is a wrapper so NumVersion can be accessed as a 32-bit value */
  |      0|  666|  NumVersion          parts;
  |      0|  667|  UInt32              whole;
  |      0|  668|};
  ------------------
       |  669|typedef union NumVersionVariant         NumVersionVariant;
       |  670|typedef NumVersionVariant *             NumVersionVariantPtr;
       |  671|typedef NumVersionVariantPtr *          NumVersionVariantHandle;
       |  672|struct VersRec {
       |  673|                                              /* 'vers' resource format */
       |  674|  NumVersion          numericVersion;         /*encoded version number*/
       |  675|  short               countryCode;            /*country code from intl utilities*/
       |  676|  Str255              shortVersion;           /*version number string - worst case*/
       |  677|  Str255              reserved;               /*longMessage string packed after shortVersion*/
       |  678|};
       |  679|typedef struct VersRec                  VersRec;
       |  680|typedef VersRec *                       VersRecPtr;
       |  681|typedef VersRecPtr *                    VersRecHndl;
       |  682|/*********************************************************************************
  ------------------
  | -[AFImageResponseSerializer init]:
  |      0|  665|                                              /* NumVersionVariant is a wrapper so NumVersion can be accessed as a 32-bit value */
  |      0|  666|  NumVersion          parts;
  |      0|  667|  UInt32              whole;
  |      0|  668|};
  |      0|  669|typedef union NumVersionVariant         NumVersionVariant;
  |      0|  670|typedef NumVersionVariant *             NumVersionVariantPtr;
  |      0|  671|typedef NumVersionVariantPtr *          NumVersionVariantHandle;
  |      0|  672|struct VersRec {
  |      0|  673|                                              /* 'vers' resource format */
  |      0|  674|  NumVersion          numericVersion;         /*encoded version number*/
  |      0|  675|  short               countryCode;            /*country code from intl utilities*/
  |      0|  676|  Str255              shortVersion;           /*version number string - worst case*/
  |       |  677|  Str255              reserved;               /*longMessage string packed after shortVersion*/
  |       |  678|};
  |       |  679|typedef struct VersRec                  VersRec;
  |      0|  680|typedef VersRec *                       VersRecPtr;
  |      0|  681|typedef VersRecPtr *                    VersRecHndl;
  |      0|  682|/*********************************************************************************
  ------------------
       |  683|
       |  684|    Old names for types
       |  685|        
       |  686|*********************************************************************************/
       |  687|typedef UInt8                           Byte;
       |  688|typedef SInt8                           SignedByte;
       |  689|typedef wide *                          WidePtr;
       |  690|typedef UnsignedWide *                  UnsignedWidePtr;
       |  691|typedef Float80                         extended80;
       |  692|typedef Float96                         extended96;
       |  693|typedef SInt8                           VHSelect;
       |  694|/*********************************************************************************
       |  695|
       |  696|    Debugger functions
       |  697|    
       |  698|*********************************************************************************/
       |  699|/*
       |  700| *  Debugger()
       |  701| *  
       |  702| *  Availability:
  ------------------
  | -[AFURLSessionManager tasksForKeyPath:]:
  |      0|  682|/*********************************************************************************
  |      0|  683|
  |      0|  684|    Old names for types
  |      0|  685|        
  |      0|  686|*********************************************************************************/
  |      0|  687|typedef UInt8                           Byte;
  |      0|  688|typedef SInt8                           SignedByte;
  |      0|  689|typedef wide *                          WidePtr;
  |      0|  690|typedef UnsignedWide *                  UnsignedWidePtr;
  |      0|  691|typedef Float80                         extended80;
  |      0|  692|typedef Float96                         extended96;
  |      0|  693|typedef SInt8                           VHSelect;
  |      0|  694|/*********************************************************************************
  |      0|  695|
  |      0|  696|    Debugger functions
  |      0|  697|    
  |      0|  698|*********************************************************************************/
  |      0|  699|/*
  |      0|  700| *  Debugger()
  |      0|  701| *  
  |      0|  702| *  Availability:
  ------------------
       |  703| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  704| *    CarbonLib:        in CarbonLib 1.0 and later
       |  705| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  706| */
       |  707|extern void 
       |  708|Debugger(void)                                                __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  709|
       |  710|
       |  711|/*
       |  712| *  DebugStr()
  ------------------
  | -[AFImageResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  689|typedef wide *                          WidePtr;
  |      0|  690|typedef UnsignedWide *                  UnsignedWidePtr;
  |      0|  691|typedef Float80                         extended80;
  |      0|  692|typedef Float96                         extended96;
  |      0|  693|typedef SInt8                           VHSelect;
  |      0|  694|/*********************************************************************************
  |      0|  695|
  |      0|  696|    Debugger functions
  |      0|  697|    
  |      0|  698|*********************************************************************************/
  |      0|  699|/*
  |      0|  700| *  Debugger()
  |      0|  701| *  
  |      0|  702| *  Availability:
  |       |  703| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
  |       |  704| *    CarbonLib:        in CarbonLib 1.0 and later
  |       |  705| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |       |  706| */
  |       |  707|extern void 
  |       |  708|Debugger(void)                                                __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
  |       |  709|
  |      0|  710|
  |      0|  711|/*
  |      0|  712| *  DebugStr()
  ------------------
       |  713| *  
       |  714| *  Availability:
       |  715| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  716| *    CarbonLib:        in CarbonLib 1.0 and later
       |  717| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  718| */
       |  719|extern void 
       |  720|DebugStr(ConstStr255Param debuggerMsg)                        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  721|
       |  722|
       |  723|/*
       |  724| *  debugstr()
       |  725| *  
       |  726| *  Availability:
       |  727| *    Mac OS X:         not available
       |  728| *    CarbonLib:        not available
       |  729| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  730| */
       |  731|
       |  732|
       |  733|#if TARGET_CPU_PPC
       |  734|/* Only for Mac OS native drivers */
  ------------------
  | -[AFImageResponseSerializer initWithCoder:]:
  |      0|  716| *    CarbonLib:        in CarbonLib 1.0 and later
  |      0|  717| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |      0|  718| */
  |      0|  719|extern void 
  |      0|  720|DebugStr(ConstStr255Param debuggerMsg)                        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
  |      0|  721|
  |      0|  722|
  |      0|  723|/*
  |      0|  724| *  debugstr()
  |      0|  725| *  
  |      0|  726| *  Availability:
  |       |  727| *    Mac OS X:         not available
  |       |  728| *    CarbonLib:        not available
  |      0|  729| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |      0|  730| */
  |      0|  731|
  |      0|  732|
  |      0|  733|#if TARGET_CPU_PPC
  |      0|  734|/* Only for Mac OS native drivers */
  ------------------
       |  735|/*
       |  736| *  SysDebug()
       |  737| *  
       |  738| *  Availability:
       |  739| *    Mac OS X:         not available
       |  740| *    CarbonLib:        not available
       |  741| *    Non-Carbon CFM:   in DriverServicesLib 1.0 and later
       |  742| */
       |  743|
       |  744|
       |  745|/*
       |  746| *  SysDebugStr()
       |  747| *  
       |  748| *  Availability:
       |  749| *    Mac OS X:         not available
       |  750| *    CarbonLib:        not available
       |  751| *    Non-Carbon CFM:   in DriverServicesLib 1.0 and later
       |  752| */
       |  753|
       |  754|
       |  755|#endif  /* TARGET_CPU_PPC */
       |  756|
       |  757|/* SADE break points */
  ------------------
  | -[AFURLSessionManager dataTaskWithRequest:completionHandler:]:
  |      0|  755|#endif  /* TARGET_CPU_PPC */
  |      0|  756|
  |      0|  757|/* SADE break points */
  ------------------
       |  758|/*
       |  759| *  SysBreak()
       |  760| *  
       |  761| *  Availability:
       |  762| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  763| *    CarbonLib:        in CarbonLib 1.0 and later
       |  764| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  765| */
       |  766|extern void 
       |  767|SysBreak(void)                                                __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  768|
       |  769|
       |  770|/*
       |  771| *  SysBreakStr()
       |  772| *  
  ------------------
  | -[AFURLSessionManager dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:]:
  |      0|  762| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
  |      0|  763| *    CarbonLib:        in CarbonLib 1.0 and later
  |      0|  764| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |      0|  765| */
  |      0|  766|extern void 
  |      0|  767|SysBreak(void)                                                __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
  |      0|  768|
  |      0|  769|
  |      0|  770|/*
  |      0|  771| *  SysBreakStr()
  |      0|  772| *  
  ------------------
       |  773| *  Availability:
       |  774| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  775| *    CarbonLib:        in CarbonLib 1.0 and later
       |  776| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  777| */
       |  778|extern void 
       |  779|SysBreakStr(ConstStr255Param debuggerMsg)                     __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  780|
       |  781|
       |  782|/*
       |  783| *  SysBreakFunc()
       |  784| *  
       |  785| *  Availability:
       |  786| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  787| *    CarbonLib:        in CarbonLib 1.0 and later
       |  788| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  789| */
       |  790|extern void 
       |  791|SysBreakFunc(ConstStr255Param debuggerMsg)                    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  792|
       |  793|
       |  794|/* old names for Debugger and DebugStr */
       |  795|#if OLDROUTINENAMES && TARGET_CPU_68K
  ------------------
  | -[AFURLSessionManager uploadTaskWithRequest:fromFile:progress:completionHandler:]:
  |      0|  780|
  |      0|  781|
  |      0|  782|/*
  |      0|  783| *  SysBreakFunc()
  |      0|  784| *  
  |      0|  785| *  Availability:
  |      0|  786| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
  |      0|  787| *    CarbonLib:        in CarbonLib 1.0 and later
  |      0|  788| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |      0|  789| */
  |      0|  790|extern void 
  |      0|  791|SysBreakFunc(ConstStr255Param debuggerMsg)                    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
  |      0|  792|
  |      0|  793|
  |      0|  794|/* old names for Debugger and DebugStr */
  |      0|  795|#if OLDROUTINENAMES && TARGET_CPU_68K
  ------------------
       |  796|    #define Debugger68k()   Debugger()
       |  797|    #define DebugStr68k(s)  DebugStr(s)
       |  798|#endif
  ------------------
  | -[AFCompoundResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  780|
  |      0|  781|
  |      0|  782|/*
  |      0|  783| *  SysBreakFunc()
  |      0|  784| *  
  |      0|  785| *  Availability:
  |      0|  786| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
  |      0|  787| *    CarbonLib:        in CarbonLib 1.0 and later
  |      0|  788| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |      0|  789| */
  |      0|  790|extern void 
  |      0|  791|SysBreakFunc(ConstStr255Param debuggerMsg)                    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
  |      0|  792|
  |      0|  793|
  |      0|  794|/* old names for Debugger and DebugStr */
  |      0|  795|#if OLDROUTINENAMES && TARGET_CPU_68K
  |      0|  796|    #define Debugger68k()   Debugger()
  |      0|  797|    #define DebugStr68k(s)  DebugStr(s)
  |      0|  798|#endif
  ------------------
       |  799|
       |  800|
       |  801|#pragma pack(pop)
       |  802|
       |  803|#ifdef __cplusplus
       |  804|}
       |  805|#endif
       |  806|
       |  807|#endif /* __MACTYPES__ */
       |  808|

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/dispatch/object.h:
       |    1|/*
       |    2| * Copyright (c) 2008-2012 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_APACHE_LICENSE_HEADER_START@
       |    5| *
       |    6| * Licensed under the Apache License, Version 2.0 (the "License");
       |    7| * you may not use this file except in compliance with the License.
       |    8| * You may obtain a copy of the License at
       |    9| *
       |   10| *     http://www.apache.org/licenses/LICENSE-2.0
       |   11| *
       |   12| * Unless required by applicable law or agreed to in writing, software
       |   13| * distributed under the License is distributed on an "AS IS" BASIS,
       |   14| * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       |   15| * See the License for the specific language governing permissions and
       |   16| * limitations under the License.
       |   17| *
       |   18| * @APPLE_APACHE_LICENSE_HEADER_END@
       |   19| */
       |   20|
       |   21|#ifndef __DISPATCH_OBJECT__
       |   22|#define __DISPATCH_OBJECT__
       |   23|
       |   24|#ifndef __DISPATCH_INDIRECT__
       |   25|#error "Please #include <dispatch/dispatch.h> instead of this file directly."
       |   26|#include <dispatch/base.h> // for HeaderDoc
       |   27|#endif
       |   28|
       |   29|/*!
       |   30| * @typedef dispatch_object_t
       |   31| *
       |   32| * @abstract
       |   33| * Abstract base type for all dispatch objects.
       |   34| * The details of the type definition are language-specific.
       |   35| *
       |   36| * @discussion
       |   37| * Dispatch objects are reference counted via calls to dispatch_retain() and
       |   38| * dispatch_release().
       |   39| */
       |   40|
       |   41|#if OS_OBJECT_USE_OBJC
       |   42|/*
       |   43| * By default, dispatch objects are declared as Objective-C types when building
       |   44| * with an Objective-C compiler. This allows them to participate in ARC, in RR
       |   45| * management by the Blocks runtime and in leaks checking by the static
       |   46| * analyzer, and enables them to be added to Cocoa collections.
       |   47| * See <os/object.h> for details.
       |   48| */
       |   49|OS_OBJECT_DECL(dispatch_object);
       |   50|#define DISPATCH_DECL(name) OS_OBJECT_DECL_SUBCLASS(name, dispatch_object)
      0|   51|#define DISPATCH_GLOBAL_OBJECT(type, object) ((OS_OBJECT_BRIDGE type)&(object))
       |   52|#define DISPATCH_RETURNS_RETAINED OS_OBJECT_RETURNS_RETAINED
       |   53|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |   54|void
       |   55|_dispatch_object_validate(dispatch_object_t object) {
       |   56|	void *isa = *(void* volatile*)(OS_OBJECT_BRIDGE void*)object;
       |   57|	(void)isa;
       |   58|}
       |   59|#elif defined(__cplusplus) && !defined(__DISPATCH_BUILDING_DISPATCH__)
       |   60|/*
       |   61| * Dispatch objects are NOT C++ objects. Nevertheless, we can at least keep C++
       |   62| * aware of type compatibility.
       |   63| */
       |   64|typedef struct dispatch_object_s {
       |   65|private:
       |   66|	dispatch_object_s();
       |   67|	~dispatch_object_s();
       |   68|	dispatch_object_s(const dispatch_object_s &);
       |   69|	void operator=(const dispatch_object_s &);
       |   70|} *dispatch_object_t;
       |   71|#define DISPATCH_DECL(name) \
       |   72|		typedef struct name##_s : public dispatch_object_s {} *name##_t
       |   73|#define DISPATCH_GLOBAL_OBJECT(type, object) (&(object))
       |   74|#define DISPATCH_RETURNS_RETAINED
       |   75|#else /* Plain C */
       |   76|typedef union {
       |   77|	struct _os_object_s *_os_obj;
       |   78|	struct dispatch_object_s *_do;
       |   79|	struct dispatch_continuation_s *_dc;
       |   80|	struct dispatch_queue_s *_dq;
       |   81|	struct dispatch_queue_attr_s *_dqa;
       |   82|	struct dispatch_group_s *_dg;
       |   83|	struct dispatch_source_s *_ds;
       |   84|	struct dispatch_mach_s *_dm;
       |   85|	struct dispatch_mach_msg_s *_dmsg;
       |   86|	struct dispatch_timer_aggregate_s *_dta;
       |   87|	struct dispatch_source_attr_s *_dsa;
       |   88|	struct dispatch_semaphore_s *_dsema;
       |   89|	struct dispatch_data_s *_ddata;
       |   90|	struct dispatch_io_s *_dchannel;
       |   91|	struct dispatch_operation_s *_doperation;
       |   92|	struct dispatch_disk_s *_ddisk;
       |   93|} dispatch_object_t __attribute__((__transparent_union__));
       |   94|/*! @parseOnly */
       |   95|#define DISPATCH_DECL(name) typedef struct name##_s *name##_t
       |   96|/*! @parseOnly */
       |   97|#define DISPATCH_GLOBAL_OBJECT(t, x) (&(x))
       |   98|/*! @parseOnly */
       |   99|#define DISPATCH_RETURNS_RETAINED
       |  100|#endif
       |  101|
       |  102|#ifdef __BLOCKS__
       |  103|/*!
       |  104| * @typedef dispatch_block_t
       |  105| *
       |  106| * @abstract
       |  107| * The type of blocks submitted to dispatch queues, which take no arguments
       |  108| * and have no return value.
       |  109| *
       |  110| * @discussion
       |  111| * When not building with Objective-C ARC, a block object allocated on or
       |  112| * copied to the heap must be released with a -[release] message or the
       |  113| * Block_release() function.
       |  114| *
       |  115| * The declaration of a block literal allocates storage on the stack.
       |  116| * Therefore, this is an invalid construct:
       |  117| * <code>
       |  118| * dispatch_block_t block;
       |  119| * if (x) {
       |  120| *     block = ^{ printf("true\n"); };
       |  121| * } else {
       |  122| *     block = ^{ printf("false\n"); };
       |  123| * }
       |  124| * block(); // unsafe!!!
       |  125| * </code>
       |  126| *
       |  127| * What is happening behind the scenes:
       |  128| * <code>
       |  129| * if (x) {
       |  130| *     struct Block __tmp_1 = ...; // setup details
       |  131| *     block = &__tmp_1;
       |  132| * } else {
       |  133| *     struct Block __tmp_2 = ...; // setup details
       |  134| *     block = &__tmp_2;
       |  135| * }
       |  136| * </code>
       |  137| *
       |  138| * As the example demonstrates, the address of a stack variable is escaping the
       |  139| * scope in which it is allocated. That is a classic C bug.
       |  140| *
       |  141| * Instead, the block literal must be copied to the heap with the Block_copy()
       |  142| * function or by sending it a -[copy] message.
       |  143| */
       |  144|typedef void (^dispatch_block_t)(void);
       |  145|#endif // __BLOCKS__
       |  146|
       |  147|__BEGIN_DECLS
       |  148|
       |  149|/*!
       |  150| * @function dispatch_retain
       |  151| *
       |  152| * @abstract
       |  153| * Increment the reference count of a dispatch object.
       |  154| *
       |  155| * @discussion
       |  156| * Calls to dispatch_retain() must be balanced with calls to
       |  157| * dispatch_release().
       |  158| *
       |  159| * @param object
       |  160| * The object to retain.
       |  161| * The result of passing NULL in this parameter is undefined.
       |  162| */
       |  163|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  164|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  165|void
       |  166|dispatch_retain(dispatch_object_t object);
       |  167|#if OS_OBJECT_USE_OBJC_RETAIN_RELEASE
       |  168|#undef dispatch_retain
       |  169|#define dispatch_retain(object) ({ dispatch_object_t _o = (object); \
       |  170|		_dispatch_object_validate(_o); (void)[_o retain]; })
       |  171|#endif
       |  172|
       |  173|/*!
       |  174| * @function dispatch_release
       |  175| *
       |  176| * @abstract
       |  177| * Decrement the reference count of a dispatch object.
       |  178| *
       |  179| * @discussion
       |  180| * A dispatch object is asynchronously deallocated once all references are
       |  181| * released (i.e. the reference count becomes zero). The system does not
       |  182| * guarantee that a given client is the last or only reference to a given
       |  183| * object.
       |  184| *
       |  185| * @param object
       |  186| * The object to release.
       |  187| * The result of passing NULL in this parameter is undefined.
       |  188| */
       |  189|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  190|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  191|void
       |  192|dispatch_release(dispatch_object_t object);
       |  193|#if OS_OBJECT_USE_OBJC_RETAIN_RELEASE
       |  194|#undef dispatch_release
       |  195|#define dispatch_release(object) ({ dispatch_object_t _o = (object); \
       |  196|		_dispatch_object_validate(_o); [_o release]; })
       |  197|#endif
       |  198|
       |  199|/*!
       |  200| * @function dispatch_get_context
       |  201| *
       |  202| * @abstract
       |  203| * Returns the application defined context of the object.
       |  204| *
       |  205| * @param object
       |  206| * The result of passing NULL in this parameter is undefined.
       |  207| *
       |  208| * @result
       |  209| * The context of the object; may be NULL.
       |  210| */
       |  211|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  212|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_PURE DISPATCH_WARN_RESULT
       |  213|DISPATCH_NOTHROW
       |  214|void *
       |  215|dispatch_get_context(dispatch_object_t object);
       |  216|
       |  217|/*!
       |  218| * @function dispatch_set_context
       |  219| *
       |  220| * @abstract
       |  221| * Associates an application defined context with the object.
       |  222| *
       |  223| * @param object
       |  224| * The result of passing NULL in this parameter is undefined.
       |  225| *
       |  226| * @param context
       |  227| * The new client defined context for the object. This may be NULL.
       |  228| *
       |  229| */
       |  230|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  231|DISPATCH_EXPORT DISPATCH_NOTHROW //DISPATCH_NONNULL1
       |  232|void
       |  233|dispatch_set_context(dispatch_object_t object, void *context);
       |  234|
       |  235|/*!
       |  236| * @function dispatch_set_finalizer_f
       |  237| *
       |  238| * @abstract
       |  239| * Set the finalizer function for a dispatch object.
       |  240| *
       |  241| * @param object
       |  242| * The dispatch object to modify.
       |  243| * The result of passing NULL in this parameter is undefined.
       |  244| *
       |  245| * @param finalizer
       |  246| * The finalizer function pointer.
       |  247| *
       |  248| * @discussion
       |  249| * A dispatch object's finalizer will be invoked on the object's target queue
       |  250| * after all references to the object have been released. This finalizer may be
       |  251| * used by the application to release any resources associated with the object,
       |  252| * such as freeing the object's context.
       |  253| * The context parameter passed to the finalizer function is the current
       |  254| * context of the dispatch object at the time the finalizer call is made.
       |  255| */
       |  256|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  257|DISPATCH_EXPORT DISPATCH_NOTHROW //DISPATCH_NONNULL1
       |  258|void
       |  259|dispatch_set_finalizer_f(dispatch_object_t object,
       |  260|		dispatch_function_t finalizer);
       |  261|
       |  262|/*!
       |  263| * @function dispatch_suspend
       |  264| *
       |  265| * @abstract
       |  266| * Suspends the invocation of blocks on a dispatch object.
       |  267| *
       |  268| * @discussion
       |  269| * A suspended object will not invoke any blocks associated with it. The
       |  270| * suspension of an object will occur after any running block associated with
       |  271| * the object completes.
       |  272| *
       |  273| * Calls to dispatch_suspend() must be balanced with calls
       |  274| * to dispatch_resume().
       |  275| *
       |  276| * @param object
       |  277| * The object to be suspended.
       |  278| * The result of passing NULL in this parameter is undefined.
       |  279| */
       |  280|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  281|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  282|void
       |  283|dispatch_suspend(dispatch_object_t object);
       |  284|
       |  285|/*!
       |  286| * @function dispatch_resume
       |  287| *
       |  288| * @abstract
       |  289| * Resumes the invocation of blocks on a dispatch object.
       |  290| *
       |  291| * @param object
       |  292| * The object to be resumed.
       |  293| * The result of passing NULL in this parameter is undefined.
       |  294| */
       |  295|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  296|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  297|void
       |  298|dispatch_resume(dispatch_object_t object);
       |  299|
       |  300|#ifdef __BLOCKS__
       |  301|/*!
       |  302| * @function dispatch_wait
       |  303| *
       |  304| * @abstract
       |  305| * Wait synchronously for an object or until the specified timeout has elapsed.
       |  306| *
       |  307| * @discussion
       |  308| * Type-generic macro that maps to dispatch_block_wait, dispatch_group_wait or
       |  309| * dispatch_semaphore_wait, depending on the type of the first argument.
       |  310| * See documentation for these functions for more details.
       |  311| * This function is unavailable for any other object type.
       |  312| *
       |  313| * @param object
       |  314| * The object to wait on.
       |  315| * The result of passing NULL in this parameter is undefined.
       |  316| *
       |  317| * @param timeout
       |  318| * When to timeout (see dispatch_time). As a convenience, there are the
       |  319| * DISPATCH_TIME_NOW and DISPATCH_TIME_FOREVER constants.
       |  320| *
       |  321| * @result
       |  322| * Returns zero on success or non-zero on error (i.e. timed out).
       |  323| */
       |  324|DISPATCH_UNAVAILABLE
       |  325|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NOTHROW
       |  326|long
       |  327|dispatch_wait(void *object, dispatch_time_t timeout);
       |  328|#if __has_extension(c_generic_selections)
       |  329|#define dispatch_wait(object, timeout) \
       |  330|		_Generic((object), \
       |  331|			dispatch_block_t:dispatch_block_wait, \
       |  332|			dispatch_group_t:dispatch_group_wait, \
       |  333|			dispatch_semaphore_t:dispatch_semaphore_wait \
       |  334|		)((object),(timeout))
       |  335|#endif
       |  336|
       |  337|/*!
       |  338| * @function dispatch_notify
       |  339| *
       |  340| * @abstract
       |  341| * Schedule a notification block to be submitted to a queue when the execution
       |  342| * of a specified object has completed.
       |  343| *
       |  344| * @discussion
       |  345| * Type-generic macro that maps to dispatch_block_notify or
       |  346| * dispatch_group_notify, depending on the type of the first argument.
       |  347| * See documentation for these functions for more details.
       |  348| * This function is unavailable for any other object type.
       |  349| *
       |  350| * @param object
       |  351| * The object to observe.
       |  352| * The result of passing NULL in this parameter is undefined.
       |  353| *
       |  354| * @param queue
       |  355| * The queue to which the supplied notification block will be submitted when
       |  356| * the observed object completes.
       |  357| *
       |  358| * @param notification_block
       |  359| * The block to submit when the observed object completes.
       |  360| */
       |  361|DISPATCH_UNAVAILABLE
       |  362|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  363|void
       |  364|dispatch_notify(void *object, dispatch_object_t queue,
       |  365|		dispatch_block_t notification_block);
       |  366|#if __has_extension(c_generic_selections)
       |  367|#define dispatch_notify(object, queue, notification_block) \
       |  368|		_Generic((object), \
       |  369|			dispatch_block_t:dispatch_block_notify, \
       |  370|			dispatch_group_t:dispatch_group_notify \
       |  371|		)((object),(queue), (notification_block))
       |  372|#endif
       |  373|
       |  374|/*!
       |  375| * @function dispatch_cancel
       |  376| *
       |  377| * @abstract
       |  378| * Cancel the specified object.
       |  379| *
       |  380| * @discussion
       |  381| * Type-generic macro that maps to dispatch_block_cancel or
       |  382| * dispatch_source_cancel, depending on the type of the first argument.
       |  383| * See documentation for these functions for more details.
       |  384| * This function is unavailable for any other object type.
       |  385| *
       |  386| * @param object
       |  387| * The object to cancel.
       |  388| * The result of passing NULL in this parameter is undefined.
       |  389| */
       |  390|DISPATCH_UNAVAILABLE
       |  391|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  392|void
       |  393|dispatch_cancel(void *object);
       |  394|#if __has_extension(c_generic_selections)
       |  395|#define dispatch_cancel(object) \
       |  396|		_Generic((object), \
       |  397|			dispatch_block_t:dispatch_block_cancel, \
       |  398|			dispatch_source_t:dispatch_source_cancel \
       |  399|		)((object))
       |  400|#endif
       |  401|
       |  402|/*!
       |  403| * @function dispatch_testcancel
       |  404| *
       |  405| * @abstract
       |  406| * Test whether the specified object has been canceled
       |  407| *
       |  408| * @discussion
       |  409| * Type-generic macro that maps to dispatch_block_testcancel or
       |  410| * dispatch_source_testcancel, depending on the type of the first argument.
       |  411| * See documentation for these functions for more details.
       |  412| * This function is unavailable for any other object type.
       |  413| *
       |  414| * @param object
       |  415| * The object to test.
       |  416| * The result of passing NULL in this parameter is undefined.
       |  417| *
       |  418| * @result
       |  419| * Non-zero if canceled and zero if not canceled.
       |  420| */
       |  421|DISPATCH_UNAVAILABLE
       |  422|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_WARN_RESULT DISPATCH_PURE
       |  423|DISPATCH_NOTHROW
       |  424|long
       |  425|dispatch_testcancel(void *object);
       |  426|#if __has_extension(c_generic_selections)
       |  427|#define dispatch_testcancel(object) \
       |  428|		_Generic((object), \
       |  429|			dispatch_block_t:dispatch_block_testcancel, \
       |  430|			dispatch_source_t:dispatch_source_testcancel \
       |  431|		)((object))
       |  432|#endif
       |  433|#endif // __BLOCKS__
       |  434|
       |  435|/*!
       |  436| * @function dispatch_debug
       |  437| *
       |  438| * @abstract
       |  439| * Programmatically log debug information about a dispatch object.
       |  440| *
       |  441| * @discussion
       |  442| * Programmatically log debug information about a dispatch object. By default,
       |  443| * the log output is sent to syslog at notice level. In the debug version of
       |  444| * the library, the log output is sent to a file in /var/tmp.
       |  445| * The log output destination can be configured via the LIBDISPATCH_LOG
       |  446| * environment variable, valid values are: YES, NO, syslog, stderr, file.
       |  447| *
       |  448| * This function is deprecated and will be removed in a future release.
       |  449| * Objective-C callers may use -debugDescription instead.
       |  450| *
       |  451| * @param object
       |  452| * The object to introspect.
       |  453| *
       |  454| * @param message
       |  455| * The message to log above and beyond the introspection.
       |  456| */
       |  457|__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6,__MAC_10_9,__IPHONE_4_0,__IPHONE_6_0)
       |  458|DISPATCH_EXPORT DISPATCH_NONNULL2 DISPATCH_NOTHROW
       |  459|__attribute__((__format__(printf,2,3)))
       |  460|void
       |  461|dispatch_debug(dispatch_object_t object, const char *message, ...);
       |  462|
       |  463|__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6,__MAC_10_9,__IPHONE_4_0,__IPHONE_6_0)
       |  464|DISPATCH_EXPORT DISPATCH_NONNULL2 DISPATCH_NOTHROW
       |  465|__attribute__((__format__(printf,2,0)))
       |  466|void
       |  467|dispatch_debugv(dispatch_object_t object, const char *message, va_list ap);
       |  468|
       |  469|__END_DECLS
       |  470|
       |  471|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/dispatch/once.h:
       |    1|/*
       |    2| * Copyright (c) 2008-2010 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_APACHE_LICENSE_HEADER_START@
       |    5| *
       |    6| * Licensed under the Apache License, Version 2.0 (the "License");
       |    7| * you may not use this file except in compliance with the License.
       |    8| * You may obtain a copy of the License at
       |    9| *
       |   10| *     http://www.apache.org/licenses/LICENSE-2.0
       |   11| *
       |   12| * Unless required by applicable law or agreed to in writing, software
       |   13| * distributed under the License is distributed on an "AS IS" BASIS,
       |   14| * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       |   15| * See the License for the specific language governing permissions and
       |   16| * limitations under the License.
       |   17| *
       |   18| * @APPLE_APACHE_LICENSE_HEADER_END@
       |   19| */
       |   20|
       |   21|#ifndef __DISPATCH_ONCE__
       |   22|#define __DISPATCH_ONCE__
       |   23|
       |   24|#ifndef __DISPATCH_INDIRECT__
       |   25|#error "Please #include <dispatch/dispatch.h> instead of this file directly."
       |   26|#include <dispatch/base.h> // for HeaderDoc
       |   27|#endif
       |   28|
       |   29|__BEGIN_DECLS
       |   30|
       |   31|/*!
       |   32| * @typedef dispatch_once_t
       |   33| *
       |   34| * @abstract
       |   35| * A predicate for use with dispatch_once(). It must be initialized to zero.
       |   36| * Note: static and global variables default to zero.
       |   37| */
       |   38|typedef long dispatch_once_t;
       |   39|
  ------------------
  | url_session_manager_creation_queue:
  |      0|   31|/*!
  |      0|   32| * @typedef dispatch_once_t
  |      0|   33| *
  |      0|   34| * @abstract
  |      0|   35| * A predicate for use with dispatch_once(). It must be initialized to zero.
  |      0|   36| * Note: static and global variables default to zero.
  |      0|   37| */
  |      0|   38|typedef long dispatch_once_t;
  |      0|   39|
  ------------------
       |   40|/*!
       |   41| * @function dispatch_once
       |   42| *
       |   43| * @abstract
       |   44| * Execute a block once and only once.
       |   45| *
       |   46| * @param predicate
       |   47| * A pointer to a dispatch_once_t that is used to test whether the block has
       |   48| * completed or not.
       |   49| *
       |   50| * @param block
       |   51| * The block to execute once.
       |   52| *
       |   53| * @discussion
       |   54| * Always call dispatch_once() before using or testing any variables that are
       |   55| * initialized by the block.
       |   56| */
       |   57|#ifdef __BLOCKS__
       |   58|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |   59|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |   60|void
  ------------------
  | url_session_manager_processing_queue:
  |      0|   52| *
  |      0|   53| * @discussion
  |      0|   54| * Always call dispatch_once() before using or testing any variables that are
  |      0|   55| * initialized by the block.
  |      0|   56| */
  |      0|   57|#ifdef __BLOCKS__
  |      0|   58|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
  |      0|   59|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
  |      0|   60|void
  ------------------
       |   61|dispatch_once(dispatch_once_t *predicate, dispatch_block_t block);
       |   62|
       |   63|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |   64|void
       |   65|_dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
  ------------------
  | -[UIWebView(AFNetworking) sessionManager]:
  |      0|   52| *
  |      0|   53| * @discussion
  |      0|   54| * Always call dispatch_once() before using or testing any variables that are
  |      0|   55| * initialized by the block.
  |      0|   56| */
  |      0|   57|#ifdef __BLOCKS__
  |      0|   58|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
  |      0|   59|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
  |      0|   60|void
  |      0|   61|dispatch_once(dispatch_once_t *predicate, dispatch_block_t block);
  |      0|   62|
  |      0|   63|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
  |      0|   64|void
  |      0|   65|_dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
  ------------------
       |   66|{
       |   67|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
       |   68|		dispatch_once(predicate, block);
       |   69|	}
  ------------------
  | +[AFNetworkActivityIndicatorManager sharedManager]:
  |      0|   61|dispatch_once(dispatch_once_t *predicate, dispatch_block_t block);
  |      0|   62|
  |      0|   63|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
  |      0|   64|void
  |      0|   65|_dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
  |      0|   66|{
  |      0|   67|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
  |      0|   68|		dispatch_once(predicate, block);
  |      0|   69|	}
  ------------------
       |   70|}
  ------------------
  | url_session_manager_completion_group:
  |      0|   62|
  |      0|   63|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
  |      0|   64|void
  |      0|   65|_dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
  |      0|   66|{
  |      0|   67|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
  |      0|   68|		dispatch_once(predicate, block);
  |      0|   69|	}
  |      0|   70|}
  ------------------
       |   71|#undef dispatch_once
      0|   72|#define dispatch_once _dispatch_once
       |   73|#endif
       |   74|
       |   75|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |   76|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |   77|void
       |   78|dispatch_once_f(dispatch_once_t *predicate, void *context,
       |   79|		dispatch_function_t function);
       |   80|
       |   81|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL1 DISPATCH_NONNULL3
       |   82|DISPATCH_NOTHROW
  ------------------
  | -[UIWebView(AFNetworking) responseSerializer]:
  |      0|   71|#undef dispatch_once
  |      0|   72|#define dispatch_once _dispatch_once
  |      0|   73|#endif
  |      0|   74|
  |      0|   75|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
  |      0|   76|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
  |      0|   77|void
  |      0|   78|dispatch_once_f(dispatch_once_t *predicate, void *context,
  |      0|   79|		dispatch_function_t function);
  |      0|   80|
  |      0|   81|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL1 DISPATCH_NONNULL3
  |      0|   82|DISPATCH_NOTHROW
  ------------------
       |   83|void
       |   84|_dispatch_once_f(dispatch_once_t *predicate, void *context,
       |   85|		dispatch_function_t function)
       |   86|{
       |   87|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
       |   88|		dispatch_once_f(predicate, context, function);
       |   89|	}
       |   90|}
       |   91|#undef dispatch_once_f
       |   92|#define dispatch_once_f _dispatch_once_f
       |   93|
       |   94|__END_DECLS
       |   95|
       |   96|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/dispatch/queue.h:
       |    1|/*
       |    2| * Copyright (c) 2008-2014 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_APACHE_LICENSE_HEADER_START@
       |    5| *
       |    6| * Licensed under the Apache License, Version 2.0 (the "License");
       |    7| * you may not use this file except in compliance with the License.
       |    8| * You may obtain a copy of the License at
       |    9| *
       |   10| *     http://www.apache.org/licenses/LICENSE-2.0
       |   11| *
       |   12| * Unless required by applicable law or agreed to in writing, software
       |   13| * distributed under the License is distributed on an "AS IS" BASIS,
       |   14| * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       |   15| * See the License for the specific language governing permissions and
       |   16| * limitations under the License.
       |   17| *
       |   18| * @APPLE_APACHE_LICENSE_HEADER_END@
       |   19| */
       |   20|
       |   21|#ifndef __DISPATCH_QUEUE__
       |   22|#define __DISPATCH_QUEUE__
       |   23|
       |   24|#ifndef __DISPATCH_INDIRECT__
       |   25|#error "Please #include <dispatch/dispatch.h> instead of this file directly."
       |   26|#include <dispatch/base.h> // for HeaderDoc
       |   27|#endif
       |   28|
       |   29|/*!
       |   30| * @header
       |   31| *
       |   32| * Dispatch is an abstract model for expressing concurrency via simple but
       |   33| * powerful API.
       |   34| *
       |   35| * At the core, dispatch provides serial FIFO queues to which blocks may be
       |   36| * submitted. Blocks submitted to these dispatch queues are invoked on a pool
       |   37| * of threads fully managed by the system. No guarantee is made regarding
       |   38| * which thread a block will be invoked on; however, it is guaranteed that only
       |   39| * one block submitted to the FIFO dispatch queue will be invoked at a time.
       |   40| *
       |   41| * When multiple queues have blocks to be processed, the system is free to
       |   42| * allocate additional threads to invoke the blocks concurrently. When the
       |   43| * queues become empty, these threads are automatically released.
       |   44| */
       |   45|
       |   46|/*!
       |   47| * @typedef dispatch_queue_t
       |   48| *
       |   49| * @abstract
       |   50| * Dispatch queues invoke blocks submitted to them serially in FIFO order. A
       |   51| * queue will only invoke one block at a time, but independent queues may each
       |   52| * invoke their blocks concurrently with respect to each other.
       |   53| *
       |   54| * @discussion
       |   55| * Dispatch queues are lightweight objects to which blocks may be submitted.
       |   56| * The system manages a pool of threads which process dispatch queues and
       |   57| * invoke blocks submitted to them.
       |   58| *
       |   59| * Conceptually a dispatch queue may have its own thread of execution, and
       |   60| * interaction between queues is highly asynchronous.
       |   61| *
       |   62| * Dispatch queues are reference counted via calls to dispatch_retain() and
       |   63| * dispatch_release(). Pending blocks submitted to a queue also hold a
       |   64| * reference to the queue until they have finished. Once all references to a
       |   65| * queue have been released, the queue will be deallocated by the system.
       |   66| */
       |   67|DISPATCH_DECL(dispatch_queue);
       |   68|
       |   69|__BEGIN_DECLS
       |   70|
       |   71|/*!
       |   72| * @function dispatch_async
       |   73| *
       |   74| * @abstract
       |   75| * Submits a block for asynchronous execution on a dispatch queue.
       |   76| *
       |   77| * @discussion
       |   78| * The dispatch_async() function is the fundamental mechanism for submitting
       |   79| * blocks to a dispatch queue.
       |   80| *
       |   81| * Calls to dispatch_async() always return immediately after the block has
       |   82| * been submitted, and never wait for the block to be invoked.
       |   83| *
       |   84| * The target queue determines whether the block will be invoked serially or
       |   85| * concurrently with respect to other blocks submitted to that same queue.
       |   86| * Serial queues are processed concurrently with respect to each other.
       |   87| *
       |   88| * @param queue
       |   89| * The target dispatch queue to which the block is submitted.
       |   90| * The system will hold a reference on the target queue until the block
       |   91| * has finished.
       |   92| * The result of passing NULL in this parameter is undefined.
       |   93| *
       |   94| * @param block
       |   95| * The block to submit to the target dispatch queue. This function performs
       |   96| * Block_copy() and Block_release() on behalf of callers.
       |   97| * The result of passing NULL in this parameter is undefined.
       |   98| */
       |   99|#ifdef __BLOCKS__
       |  100|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  101|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  102|void
       |  103|dispatch_async(dispatch_queue_t queue, dispatch_block_t block);
       |  104|#endif
       |  105|
       |  106|/*!
       |  107| * @function dispatch_async_f
       |  108| *
       |  109| * @abstract
       |  110| * Submits a function for asynchronous execution on a dispatch queue.
       |  111| *
       |  112| * @discussion
       |  113| * See dispatch_async() for details.
       |  114| *
       |  115| * @param queue
       |  116| * The target dispatch queue to which the function is submitted.
       |  117| * The system will hold a reference on the target queue until the function
       |  118| * has returned.
       |  119| * The result of passing NULL in this parameter is undefined.
       |  120| *
       |  121| * @param context
       |  122| * The application-defined context parameter to pass to the function.
       |  123| *
       |  124| * @param work
       |  125| * The application-defined function to invoke on the target queue. The first
       |  126| * parameter passed to this function is the context provided to
       |  127| * dispatch_async_f().
       |  128| * The result of passing NULL in this parameter is undefined.
       |  129| */
       |  130|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  131|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  132|void
       |  133|dispatch_async_f(dispatch_queue_t queue,
       |  134|	void *context,
       |  135|	dispatch_function_t work);
       |  136|
       |  137|/*!
       |  138| * @function dispatch_sync
       |  139| *
       |  140| * @abstract
       |  141| * Submits a block for synchronous execution on a dispatch queue.
       |  142| *
       |  143| * @discussion
       |  144| * Submits a block to a dispatch queue like dispatch_async(), however
       |  145| * dispatch_sync() will not return until the block has finished.
       |  146| *
       |  147| * Calls to dispatch_sync() targeting the current queue will result
       |  148| * in dead-lock. Use of dispatch_sync() is also subject to the same
       |  149| * multi-party dead-lock problems that may result from the use of a mutex.
       |  150| * Use of dispatch_async() is preferred.
       |  151| *
       |  152| * Unlike dispatch_async(), no retain is performed on the target queue. Because
       |  153| * calls to this function are synchronous, the dispatch_sync() "borrows" the
       |  154| * reference of the caller.
       |  155| *
       |  156| * As an optimization, dispatch_sync() invokes the block on the current
       |  157| * thread when possible.
       |  158| *
       |  159| * @param queue
       |  160| * The target dispatch queue to which the block is submitted.
       |  161| * The result of passing NULL in this parameter is undefined.
       |  162| *
       |  163| * @param block
       |  164| * The block to be invoked on the target dispatch queue.
       |  165| * The result of passing NULL in this parameter is undefined.
       |  166| */
       |  167|#ifdef __BLOCKS__
       |  168|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  169|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  170|void
       |  171|dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);
       |  172|#endif
       |  173|
       |  174|/*!
       |  175| * @function dispatch_sync_f
       |  176| *
       |  177| * @abstract
       |  178| * Submits a function for synchronous execution on a dispatch queue.
       |  179| *
       |  180| * @discussion
       |  181| * See dispatch_sync() for details.
       |  182| *
       |  183| * @param queue
       |  184| * The target dispatch queue to which the function is submitted.
       |  185| * The result of passing NULL in this parameter is undefined.
       |  186| *
       |  187| * @param context
       |  188| * The application-defined context parameter to pass to the function.
       |  189| *
       |  190| * @param work
       |  191| * The application-defined function to invoke on the target queue. The first
       |  192| * parameter passed to this function is the context provided to
       |  193| * dispatch_sync_f().
       |  194| * The result of passing NULL in this parameter is undefined.
       |  195| */
       |  196|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  197|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  198|void
       |  199|dispatch_sync_f(dispatch_queue_t queue,
       |  200|	void *context,
       |  201|	dispatch_function_t work);
       |  202|
       |  203|/*!
       |  204| * @function dispatch_apply
       |  205| *
       |  206| * @abstract
       |  207| * Submits a block to a dispatch queue for multiple invocations.
       |  208| *
       |  209| * @discussion
       |  210| * Submits a block to a dispatch queue for multiple invocations. This function
       |  211| * waits for the task block to complete before returning. If the target queue
       |  212| * is concurrent, the block may be invoked concurrently, and it must therefore
       |  213| * be reentrant safe.
       |  214| *
       |  215| * Each invocation of the block will be passed the current index of iteration.
       |  216| *
       |  217| * @param iterations
       |  218| * The number of iterations to perform.
       |  219| *
       |  220| * @param queue
       |  221| * The target dispatch queue to which the block is submitted.
       |  222| * The result of passing NULL in this parameter is undefined.
       |  223| *
       |  224| * @param block
       |  225| * The block to be invoked the specified number of iterations.
       |  226| * The result of passing NULL in this parameter is undefined.
       |  227| */
       |  228|#ifdef __BLOCKS__
       |  229|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  230|DISPATCH_EXPORT DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  231|void
       |  232|dispatch_apply(size_t iterations, dispatch_queue_t queue,
       |  233|		void (^block)(size_t));
       |  234|#endif
       |  235|
       |  236|/*!
       |  237| * @function dispatch_apply_f
       |  238| *
       |  239| * @abstract
       |  240| * Submits a function to a dispatch queue for multiple invocations.
       |  241| *
       |  242| * @discussion
       |  243| * See dispatch_apply() for details.
       |  244| *
       |  245| * @param iterations
       |  246| * The number of iterations to perform.
       |  247| *
       |  248| * @param queue
       |  249| * The target dispatch queue to which the function is submitted.
       |  250| * The result of passing NULL in this parameter is undefined.
       |  251| *
       |  252| * @param context
       |  253| * The application-defined context parameter to pass to the function.
       |  254| *
       |  255| * @param work
       |  256| * The application-defined function to invoke on the target queue. The first
       |  257| * parameter passed to this function is the context provided to
       |  258| * dispatch_apply_f(). The second parameter passed to this function is the
       |  259| * current index of iteration.
       |  260| * The result of passing NULL in this parameter is undefined.
       |  261| */
       |  262|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  263|DISPATCH_EXPORT DISPATCH_NONNULL4 DISPATCH_NOTHROW
       |  264|void
       |  265|dispatch_apply_f(size_t iterations, dispatch_queue_t queue,
       |  266|	void *context,
       |  267|	void (*work)(void *, size_t));
       |  268|
       |  269|/*!
       |  270| * @function dispatch_get_current_queue
       |  271| *
       |  272| * @abstract
       |  273| * Returns the queue on which the currently executing block is running.
       |  274| *
       |  275| * @discussion
       |  276| * Returns the queue on which the currently executing block is running.
       |  277| *
       |  278| * When dispatch_get_current_queue() is called outside of the context of a
       |  279| * submitted block, it will return the default concurrent queue.
       |  280| *
       |  281| * Recommended for debugging and logging purposes only:
       |  282| * The code must not make any assumptions about the queue returned, unless it
       |  283| * is one of the global queues or a queue the code has itself created.
       |  284| * The code must not assume that synchronous execution onto a queue is safe
       |  285| * from deadlock if that queue is not the one returned by
       |  286| * dispatch_get_current_queue().
       |  287| *
       |  288| * When dispatch_get_current_queue() is called on the main thread, it may
       |  289| * or may not return the same value as dispatch_get_main_queue(). Comparing
       |  290| * the two is not a valid way to test whether code is executing on the
       |  291| * main thread.
       |  292| *
       |  293| * This function is deprecated and will be removed in a future release.
       |  294| *
       |  295| * @result
       |  296| * Returns the current queue.
       |  297| */
       |  298|__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6,__MAC_10_9,__IPHONE_4_0,__IPHONE_6_0)
       |  299|DISPATCH_EXPORT DISPATCH_PURE DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |  300|dispatch_queue_t
       |  301|dispatch_get_current_queue(void);
       |  302|
       |  303|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  304|DISPATCH_EXPORT struct dispatch_queue_s _dispatch_main_q;
       |  305|
       |  306|/*!
       |  307| * @function dispatch_get_main_queue
       |  308| *
       |  309| * @abstract
       |  310| * Returns the default queue that is bound to the main thread.
       |  311| *
       |  312| * @discussion
       |  313| * In order to invoke blocks submitted to the main queue, the application must
       |  314| * call dispatch_main(), NSApplicationMain(), or use a CFRunLoop on the main
       |  315| * thread.
       |  316| *
       |  317| * @result
       |  318| * Returns the main queue. This queue is created automatically on behalf of
       |  319| * the main thread before main() is called.
       |  320| */
       |  321|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_CONST DISPATCH_NOTHROW
       |  322|dispatch_queue_t
       |  323|dispatch_get_main_queue(void)
       |  324|{
       |  325|	return DISPATCH_GLOBAL_OBJECT(dispatch_queue_t, _dispatch_main_q);
       |  326|}
       |  327|
       |  328|/*!
       |  329| * @typedef dispatch_queue_priority_t
       |  330| * Type of dispatch_queue_priority
       |  331| *
       |  332| * @constant DISPATCH_QUEUE_PRIORITY_HIGH
       |  333| * Items dispatched to the queue will run at high priority,
       |  334| * i.e. the queue will be scheduled for execution before
       |  335| * any default priority or low priority queue.
       |  336| *
       |  337| * @constant DISPATCH_QUEUE_PRIORITY_DEFAULT
       |  338| * Items dispatched to the queue will run at the default
       |  339| * priority, i.e. the queue will be scheduled for execution
       |  340| * after all high priority queues have been scheduled, but
       |  341| * before any low priority queues have been scheduled.
       |  342| *
       |  343| * @constant DISPATCH_QUEUE_PRIORITY_LOW
       |  344| * Items dispatched to the queue will run at low priority,
       |  345| * i.e. the queue will be scheduled for execution after all
       |  346| * default priority and high priority queues have been
       |  347| * scheduled.
       |  348| *
       |  349| * @constant DISPATCH_QUEUE_PRIORITY_BACKGROUND
       |  350| * Items dispatched to the queue will run at background priority, i.e. the queue
       |  351| * will be scheduled for execution after all higher priority queues have been
       |  352| * scheduled and the system will run items on this queue on a thread with
       |  353| * background status as per setpriority(2) (i.e. disk I/O is throttled and the
       |  354| * thread's scheduling priority is set to lowest value).
       |  355| */
       |  356|#define DISPATCH_QUEUE_PRIORITY_HIGH 2
      0|  357|#define DISPATCH_QUEUE_PRIORITY_DEFAULT 0
       |  358|#define DISPATCH_QUEUE_PRIORITY_LOW (-2)
      0|  359|#define DISPATCH_QUEUE_PRIORITY_BACKGROUND INT16_MIN
       |  360|
       |  361|typedef long dispatch_queue_priority_t;
       |  362|
       |  363|/*!
       |  364| * @typedef dispatch_qos_class_t
       |  365| * Alias for qos_class_t type.
       |  366| */
       |  367|#if __has_include(<sys/qos.h>)
       |  368|#include <sys/qos.h>
       |  369|typedef qos_class_t dispatch_qos_class_t;
       |  370|#else
       |  371|typedef unsigned int dispatch_qos_class_t;
       |  372|#endif
       |  373|
       |  374|/*!
       |  375| * @function dispatch_get_global_queue
       |  376| *
       |  377| * @abstract
       |  378| * Returns a well-known global concurrent queue of a given quality of service
       |  379| * class.
       |  380| *
       |  381| * @discussion
       |  382| * The well-known global concurrent queues may not be modified. Calls to
       |  383| * dispatch_suspend(), dispatch_resume(), dispatch_set_context(), etc., will
       |  384| * have no effect when used with queues returned by this function.
       |  385| *
       |  386| * @param identifier
       |  387| * A quality of service class defined in qos_class_t or a priority defined in
       |  388| * dispatch_queue_priority_t.
       |  389| *
       |  390| * It is recommended to use quality of service class values to identify the
       |  391| * well-known global concurrent queues:
       |  392| *  - QOS_CLASS_USER_INTERACTIVE
       |  393| *  - QOS_CLASS_USER_INITIATED
       |  394| *  - QOS_CLASS_DEFAULT
       |  395| *  - QOS_CLASS_UTILITY
       |  396| *  - QOS_CLASS_BACKGROUND
       |  397| *
       |  398| * The global concurrent queues may still be identified by their priority,
       |  399| * which map to the following QOS classes:
       |  400| *  - DISPATCH_QUEUE_PRIORITY_HIGH:         QOS_CLASS_USER_INITIATED
       |  401| *  - DISPATCH_QUEUE_PRIORITY_DEFAULT:      QOS_CLASS_DEFAULT
       |  402| *  - DISPATCH_QUEUE_PRIORITY_LOW:          QOS_CLASS_UTILITY
       |  403| *  - DISPATCH_QUEUE_PRIORITY_BACKGROUND:   QOS_CLASS_BACKGROUND
       |  404| *
       |  405| * @param flags
       |  406| * Reserved for future use. Passing any value other than zero may result in
       |  407| * a NULL return value.
       |  408| *
       |  409| * @result
       |  410| * Returns the requested global queue or NULL if the requested global queue
       |  411| * does not exist.
       |  412| */
       |  413|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  414|DISPATCH_EXPORT DISPATCH_CONST DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |  415|dispatch_queue_t
       |  416|dispatch_get_global_queue(long identifier, unsigned long flags);
       |  417|
       |  418|/*!
       |  419| * @typedef dispatch_queue_attr_t
       |  420| *
       |  421| * @abstract
       |  422| * Attribute for dispatch queues.
       |  423| */
       |  424|DISPATCH_DECL(dispatch_queue_attr);
       |  425|
       |  426|/*!
       |  427| * @const DISPATCH_QUEUE_SERIAL
       |  428| * @discussion A dispatch queue that invokes blocks serially in FIFO order.
       |  429| */
      0|  430|#define DISPATCH_QUEUE_SERIAL NULL
       |  431|
       |  432|/*!
       |  433| * @const DISPATCH_QUEUE_CONCURRENT
       |  434| * @discussion A dispatch queue that may invoke blocks concurrently and supports
       |  435| * barrier blocks submitted with the dispatch barrier API.
       |  436| */
       |  437|#define DISPATCH_QUEUE_CONCURRENT \
      0|  438|		DISPATCH_GLOBAL_OBJECT(dispatch_queue_attr_t, \
      0|  439|		_dispatch_queue_attr_concurrent)
       |  440|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_3)
       |  441|DISPATCH_EXPORT
       |  442|struct dispatch_queue_attr_s _dispatch_queue_attr_concurrent;
       |  443|
       |  444|/*!
       |  445| * @function dispatch_queue_attr_make_with_qos_class
       |  446| *
       |  447| * @abstract
       |  448| * Returns an attribute value which may be provided to dispatch_queue_create()
       |  449| * in order to assign a QOS class and relative priority to the queue.
       |  450| *
       |  451| * @discussion
       |  452| * When specified in this manner, the QOS class and relative priority take
       |  453| * precedence over those inherited from the dispatch queue's target queue (if
       |  454| * any) as long that does not result in a lower QOS class and relative priority.
       |  455| *
       |  456| * The global queue priorities map to the following QOS classes:
       |  457| *  - DISPATCH_QUEUE_PRIORITY_HIGH:         QOS_CLASS_USER_INITIATED
       |  458| *  - DISPATCH_QUEUE_PRIORITY_DEFAULT:      QOS_CLASS_DEFAULT
       |  459| *  - DISPATCH_QUEUE_PRIORITY_LOW:          QOS_CLASS_UTILITY
       |  460| *  - DISPATCH_QUEUE_PRIORITY_BACKGROUND:   QOS_CLASS_BACKGROUND
       |  461| *
       |  462| * Example:
       |  463| * <code>
       |  464| *	dispatch_queue_t queue;
       |  465| *	dispatch_queue_attr_t attr;
       |  466| *	attr = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL,
       |  467| *			QOS_CLASS_UTILITY, 0);
       |  468| *	queue = dispatch_queue_create("com.example.myqueue", attr);
       |  469| * </code>
       |  470| *
       |  471| * @param attr
       |  472| * A queue attribute value to be combined with the QOS class, or NULL.
       |  473| *
       |  474| * @param qos_class
       |  475| * A QOS class value:
       |  476| *  - QOS_CLASS_USER_INTERACTIVE
       |  477| *  - QOS_CLASS_USER_INITIATED
       |  478| *  - QOS_CLASS_DEFAULT
       |  479| *  - QOS_CLASS_UTILITY
       |  480| *  - QOS_CLASS_BACKGROUND
       |  481| * Passing any other value results in NULL being returned.
       |  482| *
       |  483| * @param relative_priority
       |  484| * A relative priority within the QOS class. This value is a negative
       |  485| * offset from the maximum supported scheduler priority for the given class.
       |  486| * Passing a value greater than zero or less than QOS_MIN_RELATIVE_PRIORITY
       |  487| * results in NULL being returned.
       |  488| *
       |  489| * @return
       |  490| * Returns an attribute value which may be provided to dispatch_queue_create(),
       |  491| * or NULL if an invalid QOS class was requested.
       |  492| * The new value combines the attributes specified by the 'attr' parameter and
       |  493| * the new QOS class and relative priority.
       |  494| */
       |  495|__OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0)
       |  496|DISPATCH_EXPORT DISPATCH_WARN_RESULT DISPATCH_PURE DISPATCH_NOTHROW
       |  497|dispatch_queue_attr_t
       |  498|dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr,
       |  499|		dispatch_qos_class_t qos_class, int relative_priority);
       |  500|
       |  501|/*!
       |  502| * @function dispatch_queue_create
       |  503| *
       |  504| * @abstract
       |  505| * Creates a new dispatch queue to which blocks may be submitted.
       |  506| *
       |  507| * @discussion
       |  508| * Dispatch queues created with the DISPATCH_QUEUE_SERIAL or a NULL attribute
       |  509| * invoke blocks serially in FIFO order.
       |  510| *
       |  511| * Dispatch queues created with the DISPATCH_QUEUE_CONCURRENT attribute may
       |  512| * invoke blocks concurrently (similarly to the global concurrent queues, but
       |  513| * potentially with more overhead), and support barrier blocks submitted with
       |  514| * the dispatch barrier API, which e.g. enables the implementation of efficient
       |  515| * reader-writer schemes.
       |  516| *
       |  517| * When a dispatch queue is no longer needed, it should be released with
       |  518| * dispatch_release(). Note that any pending blocks submitted to a queue will
       |  519| * hold a reference to that queue. Therefore a queue will not be deallocated
       |  520| * until all pending blocks have finished.
       |  521| *
       |  522| * Passing the result of the dispatch_queue_attr_make_with_qos_class() function
       |  523| * to the attr parameter of this function allows a quality of service class and
       |  524| * relative priority to be specified for the newly created queue.
       |  525| * The quality of service class so specified takes precedence over the quality
       |  526| * of service class of the newly created dispatch queue's target queue (if any)
       |  527| * as long that does not result in a lower QOS class and relative priority.
       |  528| *
       |  529| * When no quality of service class is specified, the target queue of a newly
       |  530| * created dispatch queue is the default priority global concurrent queue.
       |  531| *
       |  532| * @param label
       |  533| * A string label to attach to the queue.
       |  534| * This parameter is optional and may be NULL.
       |  535| *
       |  536| * @param attr
       |  537| * DISPATCH_QUEUE_SERIAL, DISPATCH_QUEUE_CONCURRENT, or the result of a call to
       |  538| * the function dispatch_queue_attr_make_with_qos_class().
       |  539| *
       |  540| * @result
       |  541| * The newly created dispatch queue.
       |  542| */
       |  543|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  544|DISPATCH_EXPORT DISPATCH_MALLOC DISPATCH_RETURNS_RETAINED DISPATCH_WARN_RESULT
       |  545|DISPATCH_NOTHROW
       |  546|dispatch_queue_t
       |  547|dispatch_queue_create(const char *label, dispatch_queue_attr_t attr);
       |  548|
       |  549|/*!
       |  550| * @const DISPATCH_CURRENT_QUEUE_LABEL
       |  551| * @discussion Constant to pass to the dispatch_queue_get_label() function to
       |  552| * retrieve the label of the current queue.
       |  553| */
       |  554|#define DISPATCH_CURRENT_QUEUE_LABEL NULL
       |  555|
       |  556|/*!
       |  557| * @function dispatch_queue_get_label
       |  558| *
       |  559| * @abstract
       |  560| * Returns the label of the given queue, as specified when the queue was
       |  561| * created, or the empty string if a NULL label was specified.
       |  562| *
       |  563| * Passing DISPATCH_CURRENT_QUEUE_LABEL will return the label of the current
       |  564| * queue.
       |  565| *
       |  566| * @param queue
       |  567| * The queue to query, or DISPATCH_CURRENT_QUEUE_LABEL.
       |  568| *
       |  569| * @result
       |  570| * The label of the queue.
       |  571| */
       |  572|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  573|DISPATCH_EXPORT DISPATCH_PURE DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |  574|const char *
       |  575|dispatch_queue_get_label(dispatch_queue_t queue);
       |  576|
       |  577|/*!
       |  578| * @function dispatch_queue_get_qos_class
       |  579| *
       |  580| * @abstract
       |  581| * Returns the QOS class and relative priority of the given queue.
       |  582| *
       |  583| * @discussion
       |  584| * If the given queue was created with an attribute value returned from
       |  585| * dispatch_queue_attr_make_with_qos_class(), this function returns the QOS
       |  586| * class and relative priority specified at that time; for any other attribute
       |  587| * value it returns a QOS class of QOS_CLASS_UNSPECIFIED and a relative
       |  588| * priority of 0.
       |  589| *
       |  590| * If the given queue is one of the global queues, this function returns its
       |  591| * assigned QOS class value as documented under dispatch_get_global_queue() and
       |  592| * a relative priority of 0; in the case of the main queue it returns the QOS
       |  593| * value provided by qos_class_main() and a relative priority of 0.
       |  594| *
       |  595| * @param queue
       |  596| * The queue to query.
       |  597| *
       |  598| * @param relative_priority_ptr
       |  599| * A pointer to an int variable to be filled with the relative priority offset
       |  600| * within the QOS class, or NULL.
       |  601| *
       |  602| * @return
       |  603| * A QOS class value:
       |  604| *	- QOS_CLASS_USER_INTERACTIVE
       |  605| *	- QOS_CLASS_USER_INITIATED
       |  606| *	- QOS_CLASS_DEFAULT
       |  607| *	- QOS_CLASS_UTILITY
       |  608| *	- QOS_CLASS_BACKGROUND
       |  609| *	- QOS_CLASS_UNSPECIFIED
       |  610| */
       |  611|__OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0)
       |  612|DISPATCH_EXPORT DISPATCH_WARN_RESULT DISPATCH_NONNULL1 DISPATCH_NOTHROW
       |  613|dispatch_qos_class_t
       |  614|dispatch_queue_get_qos_class(dispatch_queue_t queue,
       |  615|		int *relative_priority_ptr);
       |  616|
       |  617|/*!
       |  618| * @const DISPATCH_TARGET_QUEUE_DEFAULT
       |  619| * @discussion Constant to pass to the dispatch_set_target_queue() and
       |  620| * dispatch_source_create() functions to indicate that the default target queue
       |  621| * for the given object type should be used.
       |  622| */
       |  623|#define DISPATCH_TARGET_QUEUE_DEFAULT NULL
       |  624|
       |  625|/*!
       |  626| * @function dispatch_set_target_queue
       |  627| *
       |  628| * @abstract
       |  629| * Sets the target queue for the given object.
       |  630| *
       |  631| * @discussion
       |  632| * An object's target queue is responsible for processing the object.
       |  633| *
       |  634| * When no quality of service class and relative priority is specified for a
       |  635| * dispatch queue at the time of creation, a dispatch queue's quality of service
       |  636| * class is inherited from its target queue. The dispatch_get_global_queue()
       |  637| * function may be used to obtain a target queue of a specific quality of
       |  638| * service class, however the use of dispatch_queue_attr_make_with_qos_class()
       |  639| * is recommended instead.
       |  640| *
       |  641| * Blocks submitted to a serial queue whose target queue is another serial
       |  642| * queue will not be invoked concurrently with blocks submitted to the target
       |  643| * queue or to any other queue with that same target queue.
       |  644| *
       |  645| * The result of introducing a cycle into the hierarchy of target queues is
       |  646| * undefined.
       |  647| *
       |  648| * A dispatch source's target queue specifies where its event handler and
       |  649| * cancellation handler blocks will be submitted.
       |  650| *
       |  651| * A dispatch I/O channel's target queue specifies where where its I/O
       |  652| * operations are executed. If the channel's target queue's priority is set to
       |  653| * DISPATCH_QUEUE_PRIORITY_BACKGROUND, then the I/O operations performed by
       |  654| * dispatch_io_read() or dispatch_io_write() on that queue will be
       |  655| * throttled when there is I/O contention.
       |  656| *
       |  657| * For all other dispatch object types, the only function of the target queue
       |  658| * is to determine where an object's finalizer function is invoked.
       |  659| *
       |  660| * @param object
       |  661| * The object to modify.
       |  662| * The result of passing NULL in this parameter is undefined.
       |  663| *
       |  664| * @param queue
       |  665| * The new target queue for the object. The queue is retained, and the
       |  666| * previous target queue, if any, is released.
       |  667| * If queue is DISPATCH_TARGET_QUEUE_DEFAULT, set the object's target queue
       |  668| * to the default target queue for the given object type.
       |  669| */
       |  670|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  671|DISPATCH_EXPORT DISPATCH_NOTHROW // DISPATCH_NONNULL1
       |  672|void
       |  673|dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue);
       |  674|
       |  675|/*!
       |  676| * @function dispatch_main
       |  677| *
       |  678| * @abstract
       |  679| * Execute blocks submitted to the main queue.
       |  680| *
       |  681| * @discussion
       |  682| * This function "parks" the main thread and waits for blocks to be submitted
       |  683| * to the main queue. This function never returns.
       |  684| *
       |  685| * Applications that call NSApplicationMain() or CFRunLoopRun() on the
       |  686| * main thread do not need to call dispatch_main().
       |  687| */
       |  688|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  689|DISPATCH_EXPORT DISPATCH_NOTHROW DISPATCH_NORETURN
       |  690|void
       |  691|dispatch_main(void);
       |  692|
       |  693|/*!
       |  694| * @function dispatch_after
       |  695| *
       |  696| * @abstract
       |  697| * Schedule a block for execution on a given queue at a specified time.
       |  698| *
       |  699| * @discussion
       |  700| * Passing DISPATCH_TIME_NOW as the "when" parameter is supported, but not as
       |  701| * optimal as calling dispatch_async() instead. Passing DISPATCH_TIME_FOREVER
       |  702| * is undefined.
       |  703| *
       |  704| * @param when
       |  705| * A temporal milestone returned by dispatch_time() or dispatch_walltime().
       |  706| *
       |  707| * @param queue
       |  708| * A queue to which the given block will be submitted at the specified time.
       |  709| * The result of passing NULL in this parameter is undefined.
       |  710| *
       |  711| * @param block
       |  712| * The block of code to execute.
       |  713| * The result of passing NULL in this parameter is undefined.
       |  714| */
       |  715|#ifdef __BLOCKS__
       |  716|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  717|DISPATCH_EXPORT DISPATCH_NONNULL2 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  718|void
       |  719|dispatch_after(dispatch_time_t when,
       |  720|	dispatch_queue_t queue,
       |  721|	dispatch_block_t block);
       |  722|#endif
       |  723|
       |  724|/*!
       |  725| * @function dispatch_after_f
       |  726| *
       |  727| * @abstract
       |  728| * Schedule a function for execution on a given queue at a specified time.
       |  729| *
       |  730| * @discussion
       |  731| * See dispatch_after() for details.
       |  732| *
       |  733| * @param when
       |  734| * A temporal milestone returned by dispatch_time() or dispatch_walltime().
       |  735| *
       |  736| * @param queue
       |  737| * A queue to which the given function will be submitted at the specified time.
       |  738| * The result of passing NULL in this parameter is undefined.
       |  739| *
       |  740| * @param context
       |  741| * The application-defined context parameter to pass to the function.
       |  742| *
       |  743| * @param work
       |  744| * The application-defined function to invoke on the target queue. The first
       |  745| * parameter passed to this function is the context provided to
       |  746| * dispatch_after_f().
       |  747| * The result of passing NULL in this parameter is undefined.
       |  748| */
       |  749|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  750|DISPATCH_EXPORT DISPATCH_NONNULL2 DISPATCH_NONNULL4 DISPATCH_NOTHROW
       |  751|void
       |  752|dispatch_after_f(dispatch_time_t when,
       |  753|	dispatch_queue_t queue,
       |  754|	void *context,
       |  755|	dispatch_function_t work);
       |  756|
       |  757|/*!
       |  758| * @functiongroup Dispatch Barrier API
       |  759| * The dispatch barrier API is a mechanism for submitting barrier blocks to a
       |  760| * dispatch queue, analogous to the dispatch_async()/dispatch_sync() API.
       |  761| * It enables the implementation of efficient reader/writer schemes.
       |  762| * Barrier blocks only behave specially when submitted to queues created with
       |  763| * the DISPATCH_QUEUE_CONCURRENT attribute; on such a queue, a barrier block
       |  764| * will not run until all blocks submitted to the queue earlier have completed,
       |  765| * and any blocks submitted to the queue after a barrier block will not run
       |  766| * until the barrier block has completed.
       |  767| * When submitted to a a global queue or to a queue not created with the
       |  768| * DISPATCH_QUEUE_CONCURRENT attribute, barrier blocks behave identically to
       |  769| * blocks submitted with the dispatch_async()/dispatch_sync() API.
       |  770| */
       |  771|
       |  772|/*!
       |  773| * @function dispatch_barrier_async
       |  774| *
       |  775| * @abstract
       |  776| * Submits a barrier block for asynchronous execution on a dispatch queue.
       |  777| *
       |  778| * @discussion
       |  779| * Submits a block to a dispatch queue like dispatch_async(), but marks that
       |  780| * block as a barrier (relevant only on DISPATCH_QUEUE_CONCURRENT queues).
       |  781| *
       |  782| * See dispatch_async() for details.
       |  783| *
       |  784| * @param queue
       |  785| * The target dispatch queue to which the block is submitted.
       |  786| * The system will hold a reference on the target queue until the block
       |  787| * has finished.
       |  788| * The result of passing NULL in this parameter is undefined.
       |  789| *
       |  790| * @param block
       |  791| * The block to submit to the target dispatch queue. This function performs
       |  792| * Block_copy() and Block_release() on behalf of callers.
       |  793| * The result of passing NULL in this parameter is undefined.
       |  794| */
       |  795|#ifdef __BLOCKS__
       |  796|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_3)
       |  797|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  798|void
       |  799|dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block);
       |  800|#endif
       |  801|
       |  802|/*!
       |  803| * @function dispatch_barrier_async_f
       |  804| *
       |  805| * @abstract
       |  806| * Submits a barrier function for asynchronous execution on a dispatch queue.
       |  807| *
       |  808| * @discussion
       |  809| * Submits a function to a dispatch queue like dispatch_async_f(), but marks
       |  810| * that function as a barrier (relevant only on DISPATCH_QUEUE_CONCURRENT
       |  811| * queues).
       |  812| *
       |  813| * See dispatch_async_f() for details.
       |  814| *
       |  815| * @param queue
       |  816| * The target dispatch queue to which the function is submitted.
       |  817| * The system will hold a reference on the target queue until the function
       |  818| * has returned.
       |  819| * The result of passing NULL in this parameter is undefined.
       |  820| *
       |  821| * @param context
       |  822| * The application-defined context parameter to pass to the function.
       |  823| *
       |  824| * @param work
       |  825| * The application-defined function to invoke on the target queue. The first
       |  826| * parameter passed to this function is the context provided to
       |  827| * dispatch_barrier_async_f().
       |  828| * The result of passing NULL in this parameter is undefined.
       |  829| */
       |  830|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_3)
       |  831|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  832|void
       |  833|dispatch_barrier_async_f(dispatch_queue_t queue,
       |  834|	void *context,
       |  835|	dispatch_function_t work);
       |  836|
       |  837|/*!
       |  838| * @function dispatch_barrier_sync
       |  839| *
       |  840| * @abstract
       |  841| * Submits a barrier block for synchronous execution on a dispatch queue.
       |  842| *
       |  843| * @discussion
       |  844| * Submits a block to a dispatch queue like dispatch_sync(), but marks that
       |  845| * block as a barrier (relevant only on DISPATCH_QUEUE_CONCURRENT queues).
       |  846| *
       |  847| * See dispatch_sync() for details.
       |  848| *
       |  849| * @param queue
       |  850| * The target dispatch queue to which the block is submitted.
       |  851| * The result of passing NULL in this parameter is undefined.
       |  852| *
       |  853| * @param block
       |  854| * The block to be invoked on the target dispatch queue.
       |  855| * The result of passing NULL in this parameter is undefined.
       |  856| */
       |  857|#ifdef __BLOCKS__
       |  858|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_3)
       |  859|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  860|void
       |  861|dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block);
       |  862|#endif
       |  863|
       |  864|/*!
       |  865| * @function dispatch_barrier_sync_f
       |  866| *
       |  867| * @abstract
       |  868| * Submits a barrier function for synchronous execution on a dispatch queue.
       |  869| *
       |  870| * @discussion
       |  871| * Submits a function to a dispatch queue like dispatch_sync_f(), but marks that
       |  872| * fuction as a barrier (relevant only on DISPATCH_QUEUE_CONCURRENT queues).
       |  873| *
       |  874| * See dispatch_sync_f() for details.
       |  875| *
       |  876| * @param queue
       |  877| * The target dispatch queue to which the function is submitted.
       |  878| * The result of passing NULL in this parameter is undefined.
       |  879| *
       |  880| * @param context
       |  881| * The application-defined context parameter to pass to the function.
       |  882| *
       |  883| * @param work
       |  884| * The application-defined function to invoke on the target queue. The first
       |  885| * parameter passed to this function is the context provided to
       |  886| * dispatch_barrier_sync_f().
       |  887| * The result of passing NULL in this parameter is undefined.
       |  888| */
       |  889|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_3)
       |  890|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  891|void
       |  892|dispatch_barrier_sync_f(dispatch_queue_t queue,
       |  893|	void *context,
       |  894|	dispatch_function_t work);
       |  895|
       |  896|/*!
       |  897| * @functiongroup Dispatch queue-specific contexts
       |  898| * This API allows different subsystems to associate context to a shared queue
       |  899| * without risk of collision and to retrieve that context from blocks executing
       |  900| * on that queue or any of its child queues in the target queue hierarchy.
       |  901| */
       |  902|
       |  903|/*!
       |  904| * @function dispatch_queue_set_specific
       |  905| *
       |  906| * @abstract
       |  907| * Associates a subsystem-specific context with a dispatch queue, for a key
       |  908| * unique to the subsystem.
       |  909| *
       |  910| * @discussion
       |  911| * The specified destructor will be invoked with the context on the default
       |  912| * priority global concurrent queue when a new context is set for the same key,
       |  913| * or after all references to the queue have been released.
       |  914| *
       |  915| * @param queue
       |  916| * The dispatch queue to modify.
       |  917| * The result of passing NULL in this parameter is undefined.
       |  918| *
       |  919| * @param key
       |  920| * The key to set the context for, typically a pointer to a static variable
       |  921| * specific to the subsystem. Keys are only compared as pointers and never
       |  922| * dereferenced. Passing a string constant directly is not recommended.
       |  923| * The NULL key is reserved and attemps to set a context for it are ignored.
       |  924| *
       |  925| * @param context
       |  926| * The new subsystem-specific context for the object. This may be NULL.
       |  927| *
       |  928| * @param destructor
       |  929| * The destructor function pointer. This may be NULL and is ignored if context
       |  930| * is NULL.
       |  931| */
       |  932|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_5_0)
       |  933|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NOTHROW
       |  934|void
       |  935|dispatch_queue_set_specific(dispatch_queue_t queue, const void *key,
       |  936|	void *context, dispatch_function_t destructor);
       |  937|
       |  938|/*!
       |  939| * @function dispatch_queue_get_specific
       |  940| *
       |  941| * @abstract
       |  942| * Returns the subsystem-specific context associated with a dispatch queue, for
       |  943| * a key unique to the subsystem.
       |  944| *
       |  945| * @discussion
       |  946| * Returns the context for the specified key if it has been set on the specified
       |  947| * queue.
       |  948| *
       |  949| * @param queue
       |  950| * The dispatch queue to query.
       |  951| * The result of passing NULL in this parameter is undefined.
       |  952| *
       |  953| * @param key
       |  954| * The key to get the context for, typically a pointer to a static variable
       |  955| * specific to the subsystem. Keys are only compared as pointers and never
       |  956| * dereferenced. Passing a string constant directly is not recommended.
       |  957| *
       |  958| * @result
       |  959| * The context for the specified key or NULL if no context was found.
       |  960| */
       |  961|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_5_0)
       |  962|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_PURE DISPATCH_WARN_RESULT
       |  963|DISPATCH_NOTHROW
       |  964|void *
       |  965|dispatch_queue_get_specific(dispatch_queue_t queue, const void *key);
       |  966|
       |  967|/*!
       |  968| * @function dispatch_get_specific
       |  969| *
       |  970| * @abstract
       |  971| * Returns the current subsystem-specific context for a key unique to the
       |  972| * subsystem.
       |  973| *
       |  974| * @discussion
       |  975| * When called from a block executing on a queue, returns the context for the
       |  976| * specified key if it has been set on the queue, otherwise returns the result
       |  977| * of dispatch_get_specific() executed on the queue's target queue or NULL
       |  978| * if the current queue is a global concurrent queue.
       |  979| *
       |  980| * @param key
       |  981| * The key to get the context for, typically a pointer to a static variable
       |  982| * specific to the subsystem. Keys are only compared as pointers and never
       |  983| * dereferenced. Passing a string constant directly is not recommended.
       |  984| *
       |  985| * @result
       |  986| * The context for the specified key or NULL if no context was found.
       |  987| */
       |  988|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_5_0)
       |  989|DISPATCH_EXPORT DISPATCH_PURE DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |  990|void *
       |  991|dispatch_get_specific(const void *key);
       |  992|
       |  993|__END_DECLS
       |  994|
       |  995|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/dispatch/time.h:
       |    1|/*
       |    2| * Copyright (c) 2008-2011 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_APACHE_LICENSE_HEADER_START@
       |    5| *
       |    6| * Licensed under the Apache License, Version 2.0 (the "License");
       |    7| * you may not use this file except in compliance with the License.
       |    8| * You may obtain a copy of the License at
       |    9| *
       |   10| *     http://www.apache.org/licenses/LICENSE-2.0
       |   11| *
       |   12| * Unless required by applicable law or agreed to in writing, software
       |   13| * distributed under the License is distributed on an "AS IS" BASIS,
       |   14| * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       |   15| * See the License for the specific language governing permissions and
       |   16| * limitations under the License.
       |   17| *
       |   18| * @APPLE_APACHE_LICENSE_HEADER_END@
       |   19| */
       |   20|
       |   21|#ifndef __DISPATCH_TIME__
       |   22|#define __DISPATCH_TIME__
       |   23|
       |   24|#ifndef __DISPATCH_INDIRECT__
       |   25|#error "Please #include <dispatch/dispatch.h> instead of this file directly."
       |   26|#include <dispatch/base.h> // for HeaderDoc
       |   27|#endif
       |   28|
       |   29|#include <stdint.h>
       |   30|
       |   31|// <rdar://problem/6368156&7563559>
       |   32|#if TARGET_OS_MAC
       |   33|#include <mach/clock_types.h>
       |   34|#endif
       |   35|
       |   36|#ifdef NSEC_PER_SEC
       |   37|#undef NSEC_PER_SEC
       |   38|#endif
       |   39|#ifdef USEC_PER_SEC
       |   40|#undef USEC_PER_SEC
       |   41|#endif
       |   42|#ifdef NSEC_PER_USEC
       |   43|#undef NSEC_PER_USEC
       |   44|#endif
       |   45|#ifdef NSEC_PER_MSEC
       |   46|#undef NSEC_PER_MSEC
       |   47|#endif
       |   48|#define NSEC_PER_SEC 1000000000ull
       |   49|#define NSEC_PER_MSEC 1000000ull
       |   50|#define USEC_PER_SEC 1000000ull
       |   51|#define NSEC_PER_USEC 1000ull
       |   52|
       |   53|__BEGIN_DECLS
       |   54|
       |   55|struct timespec;
       |   56|
       |   57|/*!
       |   58| * @typedef dispatch_time_t
       |   59| *
       |   60| * @abstract
       |   61| * A somewhat abstract representation of time; where zero means "now" and
       |   62| * DISPATCH_TIME_FOREVER means "infinity" and every value in between is an
       |   63| * opaque encoding.
       |   64| */
       |   65|typedef uint64_t dispatch_time_t;
       |   66|
       |   67|#define DISPATCH_TIME_NOW (0ull)
      0|   68|#define DISPATCH_TIME_FOREVER (~0ull)
       |   69|
       |   70|/*!
       |   71| * @function dispatch_time
       |   72| *
       |   73| * @abstract
       |   74| * Create dispatch_time_t relative to the default clock or modify an existing
       |   75| * dispatch_time_t.
       |   76| *
       |   77| * @discussion
       |   78| * On Mac OS X the default clock is based on mach_absolute_time().
       |   79| *
       |   80| * @param when
       |   81| * An optional dispatch_time_t to add nanoseconds to. If zero is passed, then
       |   82| * dispatch_time() will use the result of mach_absolute_time().
       |   83| *
       |   84| * @param delta
       |   85| * Nanoseconds to add.
       |   86| *
       |   87| * @result
       |   88| * A new dispatch_time_t.
       |   89| */
       |   90|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |   91|DISPATCH_EXPORT DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |   92|dispatch_time_t
       |   93|dispatch_time(dispatch_time_t when, int64_t delta);
       |   94|
       |   95|/*!
       |   96| * @function dispatch_walltime
       |   97| *
       |   98| * @abstract
       |   99| * Create a dispatch_time_t using the wall clock.
       |  100| *
       |  101| * @discussion
       |  102| * On Mac OS X the wall clock is based on gettimeofday(3).
       |  103| *
       |  104| * @param when
       |  105| * A struct timespect to add time to. If NULL is passed, then
       |  106| * dispatch_walltime() will use the result of gettimeofday(3).
       |  107| *
       |  108| * @param delta
       |  109| * Nanoseconds to add.
       |  110| *
       |  111| * @result
       |  112| * A new dispatch_time_t.
       |  113| */
       |  114|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  115|DISPATCH_EXPORT DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |  116|dispatch_time_t
       |  117|dispatch_walltime(const struct timespec *when, int64_t delta);
       |  118|
       |  119|__END_DECLS
       |  120|
       |  121|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/objc/NSObjCRuntime.h:
       |    1|/*	NSObjCRuntime.h
       |    2|	Copyright (c) 1994-2012, Apple Inc. All rights reserved.
       |    3|*/
       |    4|
       |    5|#ifndef _OBJC_NSOBJCRUNTIME_H_
       |    6|#define _OBJC_NSOBJCRUNTIME_H_
       |    7|
       |    8|#include <TargetConditionals.h>
       |    9|#include <objc/objc.h>
       |   10|
       |   11|#if __LP64__ || (TARGET_OS_EMBEDDED && !TARGET_OS_IPHONE) || TARGET_OS_WIN32 || NS_BUILD_32_LIKE_64
       |   12|typedef long NSInteger;
       |   13|typedef unsigned long NSUInteger;
       |   14|#else
       |   15|typedef int NSInteger;
       |   16|typedef unsigned int NSUInteger;
       |   17|#endif
       |   18|
      0|   19|#define NSIntegerMax    LONG_MAX
       |   20|#define NSIntegerMin    LONG_MIN
       |   21|#define NSUIntegerMax   ULONG_MAX
       |   22|
       |   23|#define NSINTEGER_DEFINED 1
       |   24|
       |   25|#ifndef NS_DESIGNATED_INITIALIZER
       |   26|#if __has_attribute(objc_designated_initializer)
       |   27|#define NS_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
       |   28|#else
       |   29|#define NS_DESIGNATED_INITIALIZER
       |   30|#endif
       |   31|#endif
       |   32|
       |   33|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/objc/objc.h:
       |    1|/*
       |    2| * Copyright (c) 1999-2007 Apple Inc.  All Rights Reserved.
       |    3| * 
       |    4| * @APPLE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. Please obtain a copy of the License at
       |   10| * http://www.opensource.apple.com/apsl/ and read it before using this
       |   11| * file.
       |   12| * 
       |   13| * The Original Code and all software distributed under the License are
       |   14| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   15| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   16| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   18| * Please see the License for the specific language governing rights and
       |   19| * limitations under the License.
       |   20| * 
       |   21| * @APPLE_LICENSE_HEADER_END@
       |   22| */
       |   23|/*
       |   24| *	objc.h
       |   25| *	Copyright 1988-1996, NeXT Software, Inc.
       |   26| */
       |   27|
       |   28|#ifndef _OBJC_OBJC_H_
  ------------------
  | -[testUITests setUp]:
  |      1|   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
  |      1|   18| * Please see the License for the specific language governing rights and
  |      1|   19| * limitations under the License.
  |      1|   20| * 
  |      1|   21| * @APPLE_LICENSE_HEADER_END@
  |      1|   22| */
  |      1|   23|/*
  |      1|   24| *	objc.h
  |      1|   25| *	Copyright 1988-1996, NeXT Software, Inc.
  |      1|   26| */
  |      1|   27|
  |      1|   28|#ifndef _OBJC_OBJC_H_
  ------------------
       |   29|#define _OBJC_OBJC_H_
       |   30|
       |   31|#include <sys/types.h>      // for __DARWIN_NULL
       |   32|#include <Availability.h>
       |   33|#include <objc/objc-api.h>
       |   34|#include <stdbool.h>
       |   35|
       |   36|#if !OBJC_TYPES_DEFINED
       |   37|/// An opaque type that represents an Objective-C class.
       |   38|typedef struct objc_class *Class;
       |   39|
       |   40|/// Represents an instance of a class.
       |   41|struct objc_object {
       |   42|    Class isa  OBJC_ISA_AVAILABILITY;
       |   43|};
       |   44|
       |   45|/// A pointer to an instance of a class.
       |   46|typedef struct objc_object *id;
       |   47|#endif
       |   48|
       |   49|/// An opaque type that represents a method selector.
       |   50|typedef struct objc_selector *SEL;
       |   51|
       |   52|/// A pointer to the function of a method implementation. 
       |   53|#if !OBJC_OLD_DISPATCH_PROTOTYPES
       |   54|typedef void (*IMP)(void /* id, SEL, ... */ ); 
       |   55|#else
       |   56|typedef id (*IMP)(id, SEL, ...); 
       |   57|#endif
       |   58|
       |   59|#define OBJC_BOOL_DEFINED
       |   60|
       |   61|/// Type to represent a boolean value.
  ------------------
  | AFErrorOrUnderlyingErrorHasCodeInDomain:
  |      0|   53|#if !OBJC_OLD_DISPATCH_PROTOTYPES
  |      0|   54|typedef void (*IMP)(void /* id, SEL, ... */ ); 
  |      0|   55|#else
  |      0|   56|typedef id (*IMP)(id, SEL, ...); 
  |      0|   57|#endif
  |      0|   58|
  |      0|   59|#define OBJC_BOOL_DEFINED
  |      0|   60|
  |      0|   61|/// Type to represent a boolean value.
  ------------------
       |   62|#if (TARGET_OS_IPHONE && __LP64__)  ||  TARGET_OS_WATCH
       |   63|#define OBJC_BOOL_IS_BOOL 1
       |   64|typedef bool BOOL;
       |   65|#else
       |   66|#define OBJC_BOOL_IS_CHAR 1
       |   67|typedef signed char BOOL; 
       |   68|// BOOL is explicitly signed so @encode(BOOL) == "c" rather than "C" 
       |   69|// even if -funsigned-char is used.
       |   70|#endif
       |   71|
  ------------------
  | AFNetworkReachabilityStatusForFlags:
  |      0|   50|typedef struct objc_selector *SEL;
  |      0|   51|
  |      0|   52|/// A pointer to the function of a method implementation. 
  |      0|   53|#if !OBJC_OLD_DISPATCH_PROTOTYPES
  |      0|   54|typedef void (*IMP)(void /* id, SEL, ... */ ); 
  |      0|   55|#else
  |      0|   56|typedef id (*IMP)(id, SEL, ...); 
  |      0|   57|#endif
  |      0|   58|
  |      0|   59|#define OBJC_BOOL_DEFINED
  |      0|   60|
  |      0|   61|/// Type to represent a boolean value.
  |      0|   62|#if (TARGET_OS_IPHONE && __LP64__)  ||  TARGET_OS_WATCH
  |      0|   63|#define OBJC_BOOL_IS_BOOL 1
  |      0|   64|typedef bool BOOL;
  |      0|   65|#else
  |      0|   66|#define OBJC_BOOL_IS_CHAR 1
  |      0|   67|typedef signed char BOOL; 
  |      0|   68|// BOOL is explicitly signed so @encode(BOOL) == "c" rather than "C" 
  |      0|   69|// even if -funsigned-char is used.
  |      0|   70|#endif
  |      0|   71|
  ------------------
       |   72|#if __has_feature(objc_bool)
      0|   73|#define YES __objc_yes
      4|   74|#define NO  __objc_no
       |   75|#else
       |   76|#define YES ((BOOL)1)
       |   77|#define NO  ((BOOL)0)
       |   78|#endif
       |   79|
       |   80|#ifndef Nil
       |   81|# if __has_feature(cxx_nullptr)
       |   82|#   define Nil nullptr
       |   83|# else
       |   84|#   define Nil __DARWIN_NULL
       |   85|# endif
       |   86|#endif
       |   87|
       |   88|#ifndef nil
       |   89|# if __has_feature(cxx_nullptr)
       |   90|#   define nil nullptr
       |   91|# else
       |   92|#   define nil __DARWIN_NULL
       |   93|# endif
       |   94|#endif
       |   95|
       |   96|#if ! (defined(__OBJC_GC__)  ||  __has_feature(objc_arc))
       |   97|#define __strong /* empty */
       |   98|#endif
  ------------------
  | -[AFNetworkActivityIndicatorManager setEnabled:]:
  |      0|   93|# endif
  |      0|   94|#endif
  |      0|   95|
  |      0|   96|#if ! (defined(__OBJC_GC__)  ||  __has_feature(objc_arc))
  |      0|   97|#define __strong /* empty */
  |      0|   98|#endif
  ------------------
       |   99|
       |  100|#if !__has_feature(objc_arc)
       |  101|#define __unsafe_unretained /* empty */
  ------------------
  | AFServerTrustIsValid:
  |      0|   92|#   define nil __DARWIN_NULL
  |      0|   93|# endif
  |      0|   94|#endif
  |      0|   95|
  |      0|   96|#if ! (defined(__OBJC_GC__)  ||  __has_feature(objc_arc))
  |      0|   97|#define __strong /* empty */
  |      0|   98|#endif
  |      0|   99|
  |      0|  100|#if !__has_feature(objc_arc)
  |      0|  101|#define __unsafe_unretained /* empty */
  ------------------
       |  102|#define __autoreleasing /* empty */
       |  103|#endif
       |  104|
       |  105|
       |  106|/** 
       |  107| * Returns the name of the method specified by a given selector.
       |  108| * 
       |  109| * @param sel A pointer of type \c SEL. Pass the selector whose name you wish to determine.
       |  110| * 
       |  111| * @return A C string indicating the name of the selector.
       |  112| */
       |  113|OBJC_EXPORT const char *sel_getName(SEL sel)
       |  114|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  115|
       |  116|/** 
       |  117| * Registers a method with the Objective-C runtime system, maps the method 
       |  118| * name to a selector, and returns the selector value.
       |  119| * 
       |  120| * @param str A pointer to a C string. Pass the name of the method you wish to register.
       |  121| * 
       |  122| * @return A pointer of type SEL specifying the selector for the named method.
       |  123| * 
       |  124| * @note You must register a method name with the Objective-C runtime system to obtain the
       |  125| *  method’s selector before you can add the method to a class definition. If the method name
       |  126| *  has already been registered, this function simply returns the selector.
       |  127| */
       |  128|OBJC_EXPORT SEL sel_registerName(const char *str)
       |  129|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  130|
  ------------------
  | +[AFImageDownloader defaultURLSessionConfiguration]:
  |      0|  116|/** 
  |      0|  117| * Registers a method with the Objective-C runtime system, maps the method 
  |      0|  118| * name to a selector, and returns the selector value.
  |      0|  119| * 
  |      0|  120| * @param str A pointer to a C string. Pass the name of the method you wish to register.
  |      0|  121| * 
  |      0|  122| * @return A pointer of type SEL specifying the selector for the named method.
  |      0|  123| * 
  |      0|  124| * @note You must register a method name with the Objective-C runtime system to obtain the
  |      0|  125| *  method’s selector before you can add the method to a class definition. If the method name
  |      0|  126| *  has already been registered, this function simply returns the selector.
  |      0|  127| */
  |      0|  128|OBJC_EXPORT SEL sel_registerName(const char *str)
  |      0|  129|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  130|
  ------------------
       |  131|/** 
       |  132| * Returns the class name of a given object.
       |  133| * 
       |  134| * @param obj An Objective-C object.
       |  135| * 
       |  136| * @return The name of the class of which \e obj is an instance.
       |  137| */
       |  138|OBJC_EXPORT const char *object_getClassName(id obj)
       |  139|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  140|
       |  141|/** 
       |  142| * Returns a pointer to any extra bytes allocated with an instance given object.
  ------------------
  | __51-[AFAutoPurgingImageCache addImage:withIdentifier:]_block_invoke105:
  |      0|  123| * 
  |      0|  124| * @note You must register a method name with the Objective-C runtime system to obtain the
  |      0|  125| *  method’s selector before you can add the method to a class definition. If the method name
  |      0|  126| *  has already been registered, this function simply returns the selector.
  |      0|  127| */
  |      0|  128|OBJC_EXPORT SEL sel_registerName(const char *str)
  |      0|  129|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  130|
  |      0|  131|/** 
  |      0|  132| * Returns the class name of a given object.
  |      0|  133| * 
  |      0|  134| * @param obj An Objective-C object.
  |      0|  135| * 
  |      0|  136| * @return The name of the class of which \e obj is an instance.
  |      0|  137| */
  |      0|  138|OBJC_EXPORT const char *object_getClassName(id obj)
  |      0|  139|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  140|
  |      0|  141|/** 
  |      0|  142| * Returns a pointer to any extra bytes allocated with an instance given object.
  ------------------
       |  143| * 
       |  144| * @param obj An Objective-C object.
       |  145| * 
       |  146| * @return A pointer to any extra bytes allocated with \e obj. If \e obj was
       |  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
       |  148| * 
       |  149| * @note This function returns a pointer to any extra bytes allocated with the instance
       |  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
       |  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
       |  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
       |  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
       |  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  ------------------
  | __53-[AFAutoPurgingImageCache removeImageWithIdentifier:]_block_invoke:
  |      0|  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  |      0|  148| * 
  |      0|  149| * @note This function returns a pointer to any extra bytes allocated with the instance
  |      0|  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  |      0|  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
  |      0|  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  |      0|  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  |      0|  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  ------------------
       |  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
       |  156| */
  ------------------
  | -[AFAutoPurgingImageCache removeImageWithIdentifier:]:
  |      0|  145| * 
  |      0|  146| * @return A pointer to any extra bytes allocated with \e obj. If \e obj was
  |      0|  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  |      0|  148| * 
  |      0|  149| * @note This function returns a pointer to any extra bytes allocated with the instance
  |      0|  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  |      0|  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
  |      0|  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  |      0|  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  |      0|  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  |      0|  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
  |      0|  156| */
  ------------------
       |  157|OBJC_EXPORT void *object_getIndexedIvars(id obj)
  ------------------
  | -[AFHTTPResponseSerializer validateResponse:data:error:]:
  |      0|  113|OBJC_EXPORT const char *sel_getName(SEL sel)
  |      0|  114|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  115|
  |      0|  116|/** 
  |      0|  117| * Registers a method with the Objective-C runtime system, maps the method 
  |      0|  118| * name to a selector, and returns the selector value.
  |      0|  119| * 
  |      0|  120| * @param str A pointer to a C string. Pass the name of the method you wish to register.
  |      0|  121| * 
  |      0|  122| * @return A pointer of type SEL specifying the selector for the named method.
  |      0|  123| * 
  |      0|  124| * @note You must register a method name with the Objective-C runtime system to obtain the
  |      0|  125| *  method’s selector before you can add the method to a class definition. If the method name
  |      0|  126| *  has already been registered, this function simply returns the selector.
  |      0|  127| */
  |      0|  128|OBJC_EXPORT SEL sel_registerName(const char *str)
  |      0|  129|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  130|
  |      0|  131|/** 
  |      0|  132| * Returns the class name of a given object.
  |      0|  133| * 
  |      0|  134| * @param obj An Objective-C object.
  |      0|  135| * 
  |      0|  136| * @return The name of the class of which \e obj is an instance.
  |      0|  137| */
  |      0|  138|OBJC_EXPORT const char *object_getClassName(id obj)
  |      0|  139|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  140|
  |      0|  141|/** 
  |      0|  142| * Returns a pointer to any extra bytes allocated with an instance given object.
  |      0|  143| * 
  |      0|  144| * @param obj An Objective-C object.
  |      0|  145| * 
  |      0|  146| * @return A pointer to any extra bytes allocated with \e obj. If \e obj was
  |      0|  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  |      0|  148| * 
  |      0|  149| * @note This function returns a pointer to any extra bytes allocated with the instance
  |      0|  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  |      0|  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
  |      0|  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  |      0|  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  |      0|  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  |      0|  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
  |      0|  156| */
  |      0|  157|OBJC_EXPORT void *object_getIndexedIvars(id obj)
  ------------------
       |  158|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  159|
       |  160|/** 
       |  161| * Identifies a selector as being valid or invalid.
       |  162| * 
       |  163| * @param sel The selector you want to identify.
       |  164| * 
  ------------------
  | AFQueryStringPairsFromKeyAndValue:
  |      0|  135| * 
  |      0|  136| * @return The name of the class of which \e obj is an instance.
  |      0|  137| */
  |      0|  138|OBJC_EXPORT const char *object_getClassName(id obj)
  |      0|  139|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  140|
  |      0|  141|/** 
  |      0|  142| * Returns a pointer to any extra bytes allocated with an instance given object.
  |      0|  143| * 
  |      0|  144| * @param obj An Objective-C object.
  |      0|  145| * 
  |      0|  146| * @return A pointer to any extra bytes allocated with \e obj. If \e obj was
  |      0|  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  |      0|  148| * 
  |      0|  149| * @note This function returns a pointer to any extra bytes allocated with the instance
  |      0|  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  |      0|  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
  |      0|  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  |      0|  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  |      0|  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  |      0|  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
  |      0|  156| */
  |      0|  157|OBJC_EXPORT void *object_getIndexedIvars(id obj)
  |      0|  158|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  159|
  |      0|  160|/** 
  |      0|  161| * Identifies a selector as being valid or invalid.
  |      0|  162| * 
  |      0|  163| * @param sel The selector you want to identify.
  |      0|  164| * 
  ------------------
       |  165| * @return YES if selector is valid and has a function implementation, NO otherwise. 
       |  166| * 
  ------------------
  | __42-[AFAutoPurgingImageCache removeAllImages]_block_invoke:
  |      0|  160|/** 
  |      0|  161| * Identifies a selector as being valid or invalid.
  |      0|  162| * 
  |      0|  163| * @param sel The selector you want to identify.
  |      0|  164| * 
  |      0|  165| * @return YES if selector is valid and has a function implementation, NO otherwise. 
  |      0|  166| * 
  ------------------
       |  167| * @warning On some platforms, an invalid reference (to invalid memory addresses) can cause
       |  168| *  a crash. 
  ------------------
  | -[AFAutoPurgingImageCache removeAllImages]:
  |      0|  158|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  159|
  |      0|  160|/** 
  |      0|  161| * Identifies a selector as being valid or invalid.
  |      0|  162| * 
  |      0|  163| * @param sel The selector you want to identify.
  |      0|  164| * 
  |      0|  165| * @return YES if selector is valid and has a function implementation, NO otherwise. 
  |      0|  166| * 
  |      0|  167| * @warning On some platforms, an invalid reference (to invalid memory addresses) can cause
  |      0|  168| *  a crash. 
  ------------------
       |  169| */
       |  170|OBJC_EXPORT BOOL sel_isMapped(SEL sel)
       |  171|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  172|
       |  173|/** 
       |  174| * Registers a method name with the Objective-C runtime system.
  ------------------
  | +[AFHTTPResponseSerializer supportsSecureCoding]:
  |      0|  172|
  |      0|  173|/** 
  |      0|  174| * Registers a method name with the Objective-C runtime system.
  ------------------
       |  175| * 
       |  176| * @param str A pointer to a C string. Pass the name of the method you wish to register.
       |  177| * 
       |  178| * @return A pointer of type SEL specifying the selector for the named method.
       |  179| * 
       |  180| * @note The implementation of this method is identical to the implementation of \c sel_registerName.
       |  181| * @note Prior to OS X version 10.0, this method tried to find the selector mapped to the given name
       |  182| *  and returned \c NULL if the selector was not found. This was changed for safety, because it was
       |  183| *  observed that many of the callers of this function did not check the return value for \c NULL.
       |  184| */
       |  185|OBJC_EXPORT SEL sel_getUid(const char *str)
       |  186|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  187|
       |  188|
       |  189|// Obsolete ARC conversions. Deprecation forthcoming.
       |  190|// Use CFBridgingRetain, CFBridgingRelease, and __bridge casts instead.
       |  191|
       |  192|typedef const void* objc_objectptr_t;
       |  193|
       |  194|#if __has_feature(objc_arc)
       |  195|#   define objc_retainedObject(o) ((__bridge_transfer id)(objc_objectptr_t)(o))
       |  196|#   define objc_unretainedObject(o) ((__bridge id)(objc_objectptr_t)(o))
       |  197|#   define objc_unretainedPointer(o) ((__bridge objc_objectptr_t)(id)(o))
       |  198|#else
       |  199|#   define objc_retainedObject(o) ((id)(objc_objectptr_t)(o))
       |  200|#   define objc_unretainedObject(o) ((id)(objc_objectptr_t)(o))
  ------------------
  | -[AFNetworkActivityIndicatorManager setCurrentState:]:
  |      0|  175| * 
  |      0|  176| * @param str A pointer to a C string. Pass the name of the method you wish to register.
  |      0|  177| * 
  |      0|  178| * @return A pointer of type SEL specifying the selector for the named method.
  |      0|  179| * 
  |      0|  180| * @note The implementation of this method is identical to the implementation of \c sel_registerName.
  |      0|  181| * @note Prior to OS X version 10.0, this method tried to find the selector mapped to the given name
  |      0|  182| *  and returned \c NULL if the selector was not found. This was changed for safety, because it was
  |      0|  183| *  observed that many of the callers of this function did not check the return value for \c NULL.
  |      0|  184| */
  |      0|  185|OBJC_EXPORT SEL sel_getUid(const char *str)
  |      0|  186|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  187|
  |      0|  188|
  |      0|  189|// Obsolete ARC conversions. Deprecation forthcoming.
  |      0|  190|// Use CFBridgingRetain, CFBridgingRelease, and __bridge casts instead.
  |      0|  191|
  |      0|  192|typedef const void* objc_objectptr_t;
  |      0|  193|
  |      0|  194|#if __has_feature(objc_arc)
  |      0|  195|#   define objc_retainedObject(o) ((__bridge_transfer id)(objc_objectptr_t)(o))
  |      0|  196|#   define objc_unretainedObject(o) ((__bridge id)(objc_objectptr_t)(o))
  |      0|  197|#   define objc_unretainedPointer(o) ((__bridge objc_objectptr_t)(id)(o))
  |      0|  198|#else
  |      0|  199|#   define objc_retainedObject(o) ((id)(objc_objectptr_t)(o))
  |      0|  200|#   define objc_unretainedObject(o) ((id)(objc_objectptr_t)(o))
  ------------------
       |  201|#   define objc_unretainedPointer(o) ((objc_objectptr_t)(id)(o))
       |  202|#endif
       |  203|
       |  204|
       |  205|#if !__OBJC2__
       |  206|
       |  207|// The following declarations are provided here for source compatibility.
       |  208|
       |  209|#if defined(__LP64__)
       |  210|    typedef long arith_t;
  ------------------
  | -[AFSecurityPolicy init]:
  |      0|  201|#   define objc_unretainedPointer(o) ((objc_objectptr_t)(id)(o))
  |      0|  202|#endif
  |      0|  203|
  |      0|  204|
  |      0|  205|#if !__OBJC2__
  |      0|  206|
  |      0|  207|// The following declarations are provided here for source compatibility.
  |      0|  208|
  |      0|  209|#if defined(__LP64__)
  |      0|  210|    typedef long arith_t;
  ------------------
       |  211|    typedef unsigned long uarith_t;
       |  212|#   define ARITH_SHIFT 32
       |  213|#else
  ------------------
  | -[AFURLSessionManagerTaskDelegate setupProgressForTask:]:
  |      0|  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  |      0|  148| * 
  |      0|  149| * @note This function returns a pointer to any extra bytes allocated with the instance
  |      0|  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  |      0|  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
  |      0|  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  |      0|  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  |      0|  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  |      0|  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
  |      0|  156| */
  |      0|  157|OBJC_EXPORT void *object_getIndexedIvars(id obj)
  |      0|  158|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  159|
  |      0|  160|/** 
  |      0|  161| * Identifies a selector as being valid or invalid.
  |      0|  162| * 
  |      0|  163| * @param sel The selector you want to identify.
  |      0|  164| * 
  |      0|  165| * @return YES if selector is valid and has a function implementation, NO otherwise. 
  |      0|  166| * 
  |      0|  167| * @warning On some platforms, an invalid reference (to invalid memory addresses) can cause
  |      0|  168| *  a crash. 
  |      0|  169| */
  |      0|  170|OBJC_EXPORT BOOL sel_isMapped(SEL sel)
  |      0|  171|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  172|
  |      0|  173|/** 
  |      0|  174| * Registers a method name with the Objective-C runtime system.
  |      0|  175| * 
  |      0|  176| * @param str A pointer to a C string. Pass the name of the method you wish to register.
  |      0|  177| * 
  |      0|  178| * @return A pointer of type SEL specifying the selector for the named method.
  |      0|  179| * 
  |      0|  180| * @note The implementation of this method is identical to the implementation of \c sel_registerName.
  |      0|  181| * @note Prior to OS X version 10.0, this method tried to find the selector mapped to the given name
  |      0|  182| *  and returned \c NULL if the selector was not found. This was changed for safety, because it was
  |      0|  183| *  observed that many of the callers of this function did not check the return value for \c NULL.
  |      0|  184| */
  |      0|  185|OBJC_EXPORT SEL sel_getUid(const char *str)
  |      0|  186|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  187|
  |      0|  188|
  |      0|  189|// Obsolete ARC conversions. Deprecation forthcoming.
  |      0|  190|// Use CFBridgingRetain, CFBridgingRelease, and __bridge casts instead.
  |      0|  191|
  |      0|  192|typedef const void* objc_objectptr_t;
  |      0|  193|
  |      0|  194|#if __has_feature(objc_arc)
  |      0|  195|#   define objc_retainedObject(o) ((__bridge_transfer id)(objc_objectptr_t)(o))
  |      0|  196|#   define objc_unretainedObject(o) ((__bridge id)(objc_objectptr_t)(o))
  |      0|  197|#   define objc_unretainedPointer(o) ((__bridge objc_objectptr_t)(id)(o))
  |      0|  198|#else
  |      0|  199|#   define objc_retainedObject(o) ((id)(objc_objectptr_t)(o))
  |      0|  200|#   define objc_unretainedObject(o) ((id)(objc_objectptr_t)(o))
  |      0|  201|#   define objc_unretainedPointer(o) ((objc_objectptr_t)(id)(o))
  |      0|  202|#endif
  |      0|  203|
  |      0|  204|
  |      0|  205|#if !__OBJC2__
  |      0|  206|
  |      0|  207|// The following declarations are provided here for source compatibility.
  |      0|  208|
  |      0|  209|#if defined(__LP64__)
  |      0|  210|    typedef long arith_t;
  |      0|  211|    typedef unsigned long uarith_t;
  |      0|  212|#   define ARITH_SHIFT 32
  |      0|  213|#else
  ------------------
       |  214|    typedef int arith_t;
       |  215|    typedef unsigned uarith_t;
       |  216|#   define ARITH_SHIFT 16
       |  217|#endif
       |  218|
       |  219|typedef char *STR;
       |  220|
       |  221|#define ISSELECTOR(sel) sel_isMapped(sel)
       |  222|#define SELNAME(sel)	sel_getName(sel)
       |  223|#define SELUID(str)	sel_getUid(str)
       |  224|#define NAMEOF(obj)     object_getClassName(obj)
       |  225|#define IV(obj)         object_getIndexedIvars(obj)
       |  226|
       |  227|#endif
       |  228|
       |  229|#endif  /* _OBJC_OBJC_H_ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/stdint.h:
       |    1|/*
       |    2| * Copyright (c) 2000-2010 Apple Inc.
       |    3| * All rights reserved.
       |    4| */
       |    5|
       |    6|#ifndef _STDINT_H_
       |    7|#define _STDINT_H_
       |    8|
       |    9|#if __LP64__
       |   10|#define __WORDSIZE 64
       |   11|#else
       |   12|#define __WORDSIZE 32
       |   13|#endif
       |   14|
       |   15|/* from ISO/IEC 988:1999 spec */
       |   16|
       |   17|/* 7.18.1.1 Exact-width integer types */
       |   18|#include <sys/_types/_int8_t.h>
       |   19|#include <sys/_types/_int16_t.h>
       |   20|#include <sys/_types/_int32_t.h>
       |   21|#include <sys/_types/_int64_t.h>
       |   22|
       |   23|#include <_types/_uint8_t.h>
       |   24|#include <_types/_uint16_t.h>
       |   25|#include <_types/_uint32_t.h>
       |   26|#include <_types/_uint64_t.h>
       |   27|
       |   28|/* 7.18.1.2 Minimum-width integer types */
       |   29|typedef int8_t           int_least8_t;
       |   30|typedef int16_t         int_least16_t;
       |   31|typedef int32_t         int_least32_t;
       |   32|typedef int64_t         int_least64_t;
       |   33|typedef uint8_t         uint_least8_t;
       |   34|typedef uint16_t       uint_least16_t;
       |   35|typedef uint32_t       uint_least32_t;
       |   36|typedef uint64_t       uint_least64_t;
       |   37|
       |   38|
       |   39|/* 7.18.1.3 Fastest-width integer types */
       |   40|typedef int8_t            int_fast8_t;
       |   41|typedef int16_t          int_fast16_t;
       |   42|typedef int32_t          int_fast32_t;
       |   43|typedef int64_t          int_fast64_t;
       |   44|typedef uint8_t          uint_fast8_t;
       |   45|typedef uint16_t        uint_fast16_t;
       |   46|typedef uint32_t        uint_fast32_t;
       |   47|typedef uint64_t        uint_fast64_t;
       |   48|
       |   49|
       |   50|/* 7.18.1.4 Integer types capable of holding object pointers */
       |   51|
       |   52|#include <sys/_types.h>
       |   53|#include <sys/_types/_intptr_t.h>
       |   54|#include <sys/_types/_uintptr_t.h>
       |   55|
       |   56|
       |   57|/* 7.18.1.5 Greatest-width integer types */
       |   58|#include <_types/_intmax_t.h>
       |   59|#include <_types/_uintmax_t.h>
       |   60|
       |   61|/* 7.18.2 Limits of specified-width integer types:
       |   62| *   These #defines specify the minimum and maximum limits
       |   63| *   of each of the types declared above.
       |   64| */
       |   65|
       |   66|
       |   67|/* 7.18.2.1 Limits of exact-width integer types */
       |   68|#define INT8_MAX         127
       |   69|#define INT16_MAX        32767
       |   70|#define INT32_MAX        2147483647
       |   71|#define INT64_MAX        9223372036854775807LL
       |   72|
       |   73|#define INT8_MIN          -128
      0|   74|#define INT16_MIN         -32768
       |   75|   /*
       |   76|      Note:  the literal "most negative int" cannot be written in C --
       |   77|      the rules in the standard (section 6.4.4.1 in C99) will give it
       |   78|      an unsigned type, so INT32_MIN (and the most negative member of
       |   79|      any larger signed type) must be written via a constant expression.
       |   80|   */
       |   81|#define INT32_MIN        (-INT32_MAX-1)
       |   82|#define INT64_MIN        (-INT64_MAX-1)
       |   83|
       |   84|#define UINT8_MAX         255
       |   85|#define UINT16_MAX        65535
       |   86|#define UINT32_MAX        4294967295U
       |   87|#define UINT64_MAX        18446744073709551615ULL
       |   88|
       |   89|/* 7.18.2.2 Limits of minimum-width integer types */
       |   90|#define INT_LEAST8_MIN    INT8_MIN
       |   91|#define INT_LEAST16_MIN   INT16_MIN
       |   92|#define INT_LEAST32_MIN   INT32_MIN
       |   93|#define INT_LEAST64_MIN   INT64_MIN
       |   94|
       |   95|#define INT_LEAST8_MAX    INT8_MAX
       |   96|#define INT_LEAST16_MAX   INT16_MAX
       |   97|#define INT_LEAST32_MAX   INT32_MAX
       |   98|#define INT_LEAST64_MAX   INT64_MAX
       |   99|
       |  100|#define UINT_LEAST8_MAX   UINT8_MAX
       |  101|#define UINT_LEAST16_MAX  UINT16_MAX
       |  102|#define UINT_LEAST32_MAX  UINT32_MAX
       |  103|#define UINT_LEAST64_MAX  UINT64_MAX
       |  104|
       |  105|/* 7.18.2.3 Limits of fastest minimum-width integer types */
       |  106|#define INT_FAST8_MIN     INT8_MIN
       |  107|#define INT_FAST16_MIN    INT16_MIN
       |  108|#define INT_FAST32_MIN    INT32_MIN
       |  109|#define INT_FAST64_MIN    INT64_MIN
       |  110|
       |  111|#define INT_FAST8_MAX     INT8_MAX
       |  112|#define INT_FAST16_MAX    INT16_MAX
       |  113|#define INT_FAST32_MAX    INT32_MAX
       |  114|#define INT_FAST64_MAX    INT64_MAX
       |  115|
       |  116|#define UINT_FAST8_MAX    UINT8_MAX
       |  117|#define UINT_FAST16_MAX   UINT16_MAX
       |  118|#define UINT_FAST32_MAX   UINT32_MAX
       |  119|#define UINT_FAST64_MAX   UINT64_MAX
       |  120|
       |  121|/* 7.18.2.4 Limits of integer types capable of holding object pointers */
       |  122|
       |  123|#if __WORDSIZE == 64
       |  124|#define INTPTR_MIN	  INT64_MIN
       |  125|#define INTPTR_MAX	  INT64_MAX
       |  126|#else
       |  127|#define INTPTR_MIN        INT32_MIN
       |  128|#define INTPTR_MAX        INT32_MAX
       |  129|#endif
       |  130|
       |  131|#if __WORDSIZE == 64
       |  132|#define UINTPTR_MAX	  UINT64_MAX
       |  133|#else
       |  134|#define UINTPTR_MAX       UINT32_MAX
       |  135|#endif
       |  136|
       |  137|/* 7.18.2.5 Limits of greatest-width integer types */
       |  138|#define INTMAX_MIN        INT64_MIN
       |  139|#define INTMAX_MAX        INT64_MAX
       |  140|
       |  141|#define UINTMAX_MAX       UINT64_MAX
       |  142|
       |  143|/* 7.18.3 "Other" */
       |  144|#if __WORDSIZE == 64
       |  145|#define PTRDIFF_MIN	  INT64_MIN
       |  146|#define PTRDIFF_MAX	  INT64_MAX
       |  147|#else
       |  148|#define PTRDIFF_MIN       INT32_MIN
       |  149|#define PTRDIFF_MAX       INT32_MAX
       |  150|#endif
       |  151|
       |  152|#if __WORDSIZE == 64
       |  153|#define SIZE_MAX	  UINT64_MAX
       |  154|#else
       |  155|#define SIZE_MAX          UINT32_MAX
       |  156|#endif
       |  157|
       |  158|#if defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ >= 1
       |  159|#define RSIZE_MAX         (SIZE_MAX >> 1)
       |  160|#endif
       |  161|
       |  162|#ifndef WCHAR_MAX
       |  163|#  ifdef __WCHAR_MAX__
       |  164|#    define WCHAR_MAX     __WCHAR_MAX__
       |  165|#  else
       |  166|#    define WCHAR_MAX     0x7fffffff
       |  167|#  endif
       |  168|#endif
       |  169|
       |  170|/* WCHAR_MIN should be 0 if wchar_t is an unsigned type and
       |  171|   (-WCHAR_MAX-1) if wchar_t is a signed type.  Unfortunately,
       |  172|   it turns out that -fshort-wchar changes the signedness of
       |  173|   the type. */
       |  174|#ifndef WCHAR_MIN
       |  175|#  if WCHAR_MAX == 0xffff
       |  176|#    define WCHAR_MIN       0
       |  177|#  else
       |  178|#    define WCHAR_MIN       (-WCHAR_MAX-1)
       |  179|#  endif
       |  180|#endif
       |  181|
       |  182|#define WINT_MIN	  INT32_MIN
       |  183|#define WINT_MAX	  INT32_MAX
       |  184|
       |  185|#define SIG_ATOMIC_MIN	  INT32_MIN
       |  186|#define SIG_ATOMIC_MAX	  INT32_MAX
       |  187|
       |  188|/* 7.18.4 Macros for integer constants */
       |  189|#define INT8_C(v)    (v)
       |  190|#define INT16_C(v)   (v)
       |  191|#define INT32_C(v)   (v)
       |  192|#define INT64_C(v)   (v ## LL)
       |  193|
       |  194|#define UINT8_C(v)   (v ## U)
       |  195|#define UINT16_C(v)  (v ## U)
       |  196|#define UINT32_C(v)  (v ## U)
       |  197|#define UINT64_C(v)  (v ## ULL)
       |  198|
       |  199|#ifdef __LP64__
       |  200|#define INTMAX_C(v)  (v ## L)
       |  201|#define UINTMAX_C(v) (v ## UL)
       |  202|#else
       |  203|#define INTMAX_C(v)  (v ## LL)
       |  204|#define UINTMAX_C(v) (v ## ULL)
       |  205|#endif
       |  206|
       |  207|#endif /* _STDINT_H_ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/sys/_types.h:
       |    1|/*
       |    2| * Copyright (c) 2003-2007 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. The rights granted to you under the License
       |   10| * may not be used to create, or enable the creation or redistribution of,
       |   11| * unlawful or unlicensed copies of an Apple operating system, or to
       |   12| * circumvent, violate, or enable the circumvention or violation of, any
       |   13| * terms of an Apple operating system software license agreement.
       |   14| * 
       |   15| * Please obtain a copy of the License at
       |   16| * http://www.opensource.apple.com/apsl/ and read it before using this file.
       |   17| * 
       |   18| * The Original Code and all software distributed under the License are
       |   19| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   20| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   21| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   22| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   23| * Please see the License for the specific language governing rights and
       |   24| * limitations under the License.
       |   25| * 
       |   26| * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
       |   27| */
       |   28|
       |   29|#ifndef _SYS__TYPES_H_
       |   30|#define _SYS__TYPES_H_
       |   31|
       |   32|#include <sys/cdefs.h>
       |   33|#include <machine/_types.h>
       |   34|
       |   35|/*
       |   36| * Type definitions; takes common type definitions that must be used
       |   37| * in multiple header files due to [XSI], removes them from the system
       |   38| * space, and puts them in the implementation space.
       |   39| */
       |   40|
       |   41|#ifdef __cplusplus
       |   42|#ifdef __GNUG__
       |   43|#define __DARWIN_NULL __null
  ------------------
  | AFNetworkRequestFromNotification:
  |      0|   37| * in multiple header files due to [XSI], removes them from the system
  |      0|   38| * space, and puts them in the implementation space.
  |      0|   39| */
  |      0|   40|
  |      0|   41|#ifdef __cplusplus
  |      0|   42|#ifdef __GNUG__
  |      0|   43|#define __DARWIN_NULL __null
  ------------------
       |   44|#else /* ! __GNUG__ */
       |   45|#ifdef __LP64__
       |   46|#define __DARWIN_NULL (0L)
  ------------------
  | -[UIActivityIndicatorView(AFNetworking) af_notificationObserver]:
  |      0|   39| */
  |      0|   40|
  |      0|   41|#ifdef __cplusplus
  |      0|   42|#ifdef __GNUG__
  |      0|   43|#define __DARWIN_NULL __null
  |      0|   44|#else /* ! __GNUG__ */
  |      0|   45|#ifdef __LP64__
  |      0|   46|#define __DARWIN_NULL (0L)
  ------------------
       |   47|#else /* !__LP64__ */
  ------------------
  | -[UIRefreshControl(AFNetworking) af_notificationObserver]:
  |      0|   40|
  |      0|   41|#ifdef __cplusplus
  |      0|   42|#ifdef __GNUG__
  |      0|   43|#define __DARWIN_NULL __null
  |      0|   44|#else /* ! __GNUG__ */
  |      0|   45|#ifdef __LP64__
  |      0|   46|#define __DARWIN_NULL (0L)
  |      0|   47|#else /* !__LP64__ */
  ------------------
       |   48|#define __DARWIN_NULL 0
       |   49|#endif /* __LP64__ */
       |   50|#endif /* __GNUG__ */
       |   51|#else /* ! __cplusplus */
      3|   52|#define __DARWIN_NULL ((void *)0)
  ------------------
  | +[AFHTTPSessionManager manager]:
  |      0|   50|#endif /* __GNUG__ */
  |      0|   51|#else /* ! __cplusplus */
  |      0|   52|#define __DARWIN_NULL ((void *)0)
  ------------------
       |   53|#endif /* __cplusplus */
       |   54|
       |   55|typedef	__int64_t	__darwin_blkcnt_t;	/* total blocks */
       |   56|typedef	__int32_t	__darwin_blksize_t;	/* preferred block size */
  ------------------
  | -[AFHTTPSessionManager init]:
  |      0|   54|
  |      0|   55|typedef	__int64_t	__darwin_blkcnt_t;	/* total blocks */
  |      0|   56|typedef	__int32_t	__darwin_blksize_t;	/* preferred block size */
  ------------------
       |   57|typedef __int32_t	__darwin_dev_t;		/* dev_t */
       |   58|typedef unsigned int	__darwin_fsblkcnt_t;	/* Used by statvfs and fstatvfs */
       |   59|typedef unsigned int	__darwin_fsfilcnt_t;	/* Used by statvfs and fstatvfs */
       |   60|typedef __uint32_t	__darwin_gid_t;		/* [???] process and group IDs */
  ------------------
  | -[AFHTTPSessionManager initWithBaseURL:]:
  |      0|   58|typedef unsigned int	__darwin_fsblkcnt_t;	/* Used by statvfs and fstatvfs */
  |      0|   59|typedef unsigned int	__darwin_fsfilcnt_t;	/* Used by statvfs and fstatvfs */
  |      0|   60|typedef __uint32_t	__darwin_gid_t;		/* [???] process and group IDs */
  ------------------
       |   61|typedef __uint32_t	__darwin_id_t;		/* [XSI] pid_t, uid_t, or gid_t*/
       |   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
       |   63|#if __DARWIN_64_BIT_INO_T
       |   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  ------------------
  | -[AFHTTPSessionManager initWithSessionConfiguration:]:
  |      0|   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
  |      0|   63|#if __DARWIN_64_BIT_INO_T
  |      0|   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  ------------------
       |   65|#else /* !__DARWIN_64_BIT_INO_T */
  ------------------
  | -[UIWebView(AFNetworking) sessionManager]:
  |      0|   52|#define __DARWIN_NULL ((void *)0)
  |      0|   53|#endif /* __cplusplus */
  |      0|   54|
  |      0|   55|typedef	__int64_t	__darwin_blkcnt_t;	/* total blocks */
  |      0|   56|typedef	__int32_t	__darwin_blksize_t;	/* preferred block size */
  |      0|   57|typedef __int32_t	__darwin_dev_t;		/* dev_t */
  |      0|   58|typedef unsigned int	__darwin_fsblkcnt_t;	/* Used by statvfs and fstatvfs */
  |      0|   59|typedef unsigned int	__darwin_fsfilcnt_t;	/* Used by statvfs and fstatvfs */
  |      0|   60|typedef __uint32_t	__darwin_gid_t;		/* [???] process and group IDs */
  |      0|   61|typedef __uint32_t	__darwin_id_t;		/* [XSI] pid_t, uid_t, or gid_t*/
  |      0|   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
  |      0|   63|#if __DARWIN_64_BIT_INO_T
  |      0|   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  |      0|   65|#else /* !__DARWIN_64_BIT_INO_T */
  ------------------
       |   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
  ------------------
  | -[UIImageView(AFNetworking) setImageWithURL:]:
  |      0|   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  |      0|   65|#else /* !__DARWIN_64_BIT_INO_T */
  |      0|   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
  ------------------
       |   67|#endif /* __DARWIN_64_BIT_INO_T */
       |   68|typedef __darwin_natural_t __darwin_mach_port_name_t; /* Used by mach */
       |   69|typedef __darwin_mach_port_name_t __darwin_mach_port_t; /* Used by mach */
  ------------------
  | +[AFNetworkActivityIndicatorManager sharedManager]:
  |      0|   61|typedef __uint32_t	__darwin_id_t;		/* [XSI] pid_t, uid_t, or gid_t*/
  |      0|   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
  |      0|   63|#if __DARWIN_64_BIT_INO_T
  |      0|   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  |      0|   65|#else /* !__DARWIN_64_BIT_INO_T */
  |      0|   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
  |      0|   67|#endif /* __DARWIN_64_BIT_INO_T */
  |      0|   68|typedef __darwin_natural_t __darwin_mach_port_name_t; /* Used by mach */
  |      0|   69|typedef __darwin_mach_port_name_t __darwin_mach_port_t; /* Used by mach */
  ------------------
       |   70|typedef __uint16_t	__darwin_mode_t;	/* [???] Some file attributes */
       |   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
       |   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
       |   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
       |   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
       |   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  ------------------
  | -[UIImageView(AFNetworking) setImageWithURL:placeholderImage:]:
  |      0|   70|typedef __uint16_t	__darwin_mode_t;	/* [???] Some file attributes */
  |      0|   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
  |      0|   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
  |      0|   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
  |      0|   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
  |      0|   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  ------------------
       |   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
       |   77|typedef	unsigned char	__darwin_uuid_t[16];
       |   78|typedef	char	__darwin_uuid_string_t[37];
       |   79|
       |   80|#include <sys/_pthread/_pthread_types.h>
       |   81|
       |   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
  ------------------
  | -[UIWebView(AFNetworking) responseSerializer]:
  |      0|   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
  |      0|   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
  |      0|   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
  |      0|   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
  |      0|   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  |      0|   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
  |      0|   77|typedef	unsigned char	__darwin_uuid_t[16];
  |      0|   78|typedef	char	__darwin_uuid_string_t[37];
  |      0|   79|
  |      0|   80|#include <sys/_pthread/_pthread_types.h>
  |      0|   81|
  |      0|   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
  ------------------
       |   83|#define __offsetof(type, field) __builtin_offsetof(type, field)
       |   84|#else /* !(gcc >= 3.5) */
  ------------------
  | -[AFNetworkActivityIndicatorManager init]:
  |      0|   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
  |      0|   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
  |      0|   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
  |      0|   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
  |      0|   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  |      0|   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
  |      0|   77|typedef	unsigned char	__darwin_uuid_t[16];
  |      0|   78|typedef	char	__darwin_uuid_string_t[37];
  |      0|   79|
  |      0|   80|#include <sys/_pthread/_pthread_types.h>
  |      0|   81|
  |      0|   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
  |      0|   83|#define __offsetof(type, field) __builtin_offsetof(type, field)
  |      0|   84|#else /* !(gcc >= 3.5) */
  ------------------
       |   85|#define __offsetof(type, field) ((size_t)(&((type *)0)->field))
  ------------------
  | -[AFHTTPSessionManager initWithBaseURL:sessionConfiguration:]:
  |      0|   68|typedef __darwin_natural_t __darwin_mach_port_name_t; /* Used by mach */
  |      0|   69|typedef __darwin_mach_port_name_t __darwin_mach_port_t; /* Used by mach */
  |      0|   70|typedef __uint16_t	__darwin_mode_t;	/* [???] Some file attributes */
  |      0|   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
  |      0|   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
  |      0|   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
  |      0|   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
  |      0|   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  |      0|   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
  |      0|   77|typedef	unsigned char	__darwin_uuid_t[16];
  |      0|   78|typedef	char	__darwin_uuid_string_t[37];
  |      0|   79|
  |      0|   80|#include <sys/_pthread/_pthread_types.h>
  |      0|   81|
  |      0|   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
  |      0|   83|#define __offsetof(type, field) __builtin_offsetof(type, field)
  |      0|   84|#else /* !(gcc >= 3.5) */
  |      0|   85|#define __offsetof(type, field) ((size_t)(&((type *)0)->field))
  ------------------
       |   86|#endif /* (gcc >= 3.5) */
       |   87|
       |   88|
  ------------------
  | -[AFRefreshControlNotificationObserver setRefreshingWithStateOfTask:]:
  |      0|   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
  |      0|   67|#endif /* __DARWIN_64_BIT_INO_T */
  |      0|   68|typedef __darwin_natural_t __darwin_mach_port_name_t; /* Used by mach */
  |      0|   69|typedef __darwin_mach_port_name_t __darwin_mach_port_t; /* Used by mach */
  |      0|   70|typedef __uint16_t	__darwin_mode_t;	/* [???] Some file attributes */
  |      0|   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
  |      0|   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
  |      0|   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
  |      0|   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
  |      0|   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  |      0|   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
  |      0|   77|typedef	unsigned char	__darwin_uuid_t[16];
  |      0|   78|typedef	char	__darwin_uuid_string_t[37];
  |      0|   79|
  |      0|   80|#include <sys/_pthread/_pthread_types.h>
  |      0|   81|
  |      0|   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
  |      0|   83|#define __offsetof(type, field) __builtin_offsetof(type, field)
  |      0|   84|#else /* !(gcc >= 3.5) */
  |      0|   85|#define __offsetof(type, field) ((size_t)(&((type *)0)->field))
  |      0|   86|#endif /* (gcc >= 3.5) */
  |      0|   87|
  |      0|   88|
  ------------------
       |   89|#endif	/* _SYS__TYPES_H_ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/sys/socket.h:
       |    1|/*
       |    2| * Copyright (c) 2000-2015 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. The rights granted to you under the License
       |   10| * may not be used to create, or enable the creation or redistribution of,
       |   11| * unlawful or unlicensed copies of an Apple operating system, or to
       |   12| * circumvent, violate, or enable the circumvention or violation of, any
       |   13| * terms of an Apple operating system software license agreement.
       |   14| * 
       |   15| * Please obtain a copy of the License at
       |   16| * http://www.opensource.apple.com/apsl/ and read it before using this file.
       |   17| * 
       |   18| * The Original Code and all software distributed under the License are
       |   19| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   20| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   21| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   22| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   23| * Please see the License for the specific language governing rights and
       |   24| * limitations under the License.
       |   25| * 
       |   26| * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
       |   27| */
       |   28|/* Copyright (c) 1998, 1999 Apple Computer, Inc. All Rights Reserved */
       |   29|/* Copyright (c) 1995 NeXT Computer, Inc. All Rights Reserved */
       |   30|/*
       |   31| * Copyright (c) 1982, 1985, 1986, 1988, 1993, 1994
       |   32| *	The Regents of the University of California.  All rights reserved.
       |   33| *
       |   34| * Redistribution and use in source and binary forms, with or without
       |   35| * modification, are permitted provided that the following conditions
       |   36| * are met:
       |   37| * 1. Redistributions of source code must retain the above copyright
       |   38| *    notice, this list of conditions and the following disclaimer.
       |   39| * 2. Redistributions in binary form must reproduce the above copyright
       |   40| *    notice, this list of conditions and the following disclaimer in the
       |   41| *    documentation and/or other materials provided with the distribution.
       |   42| * 3. All advertising materials mentioning features or use of this software
       |   43| *    must display the following acknowledgement:
       |   44| *	This product includes software developed by the University of
       |   45| *	California, Berkeley and its contributors.
       |   46| * 4. Neither the name of the University nor the names of its contributors
       |   47| *    may be used to endorse or promote products derived from this software
       |   48| *    without specific prior written permission.
       |   49| *
       |   50| * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
       |   51| * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       |   52| * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       |   53| * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
       |   54| * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
       |   55| * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
       |   56| * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       |   57| * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
       |   58| * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
       |   59| * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
       |   60| * SUCH DAMAGE.
       |   61| *
       |   62| *	@(#)socket.h	8.4 (Berkeley) 2/21/94
       |   63| * $FreeBSD: src/sys/sys/socket.h,v 1.39.2.7 2001/07/03 11:02:01 ume Exp $
       |   64| */
       |   65|/*
       |   66| * NOTICE: This file was modified by SPARTA, Inc. in 2005 to introduce
       |   67| * support for mandatory and extensible security protections.  This notice
       |   68| * is included in support of clause 2.2 (b) of the Apple Public License,
       |   69| * Version 2.0.
       |   70| */
       |   71|
       |   72|#ifndef _SYS_SOCKET_H_
       |   73|#define	_SYS_SOCKET_H_
       |   74|
       |   75|#include <sys/types.h>
       |   76|#include <sys/cdefs.h>
       |   77|#include <machine/_param.h>
       |   78|
       |   79|
       |   80|#include <Availability.h>
       |   81|
       |   82|/*
       |   83| * Definitions related to sockets: types, address families, options.
       |   84| */
       |   85|
       |   86|/*
       |   87| * Data types.
       |   88| */
       |   89|
       |   90|#include <sys/_types/_gid_t.h>
       |   91|#include <sys/_types/_off_t.h>
       |   92|#include <sys/_types/_pid_t.h>
       |   93|#include <sys/_types/_sa_family_t.h>
       |   94|#include <sys/_types/_socklen_t.h>
       |   95|
       |   96|/* XXX Not explicitly defined by POSIX, but function return types are */
       |   97|#include <sys/_types/_size_t.h>
       |   98| 
       |   99|/* XXX Not explicitly defined by POSIX, but function return types are */
       |  100|#include <sys/_types/_ssize_t.h>
       |  101|
       |  102|/*
       |  103| * [XSI] The iovec structure shall be defined as described in <sys/uio.h>.
       |  104| */
       |  105|#include <sys/_types/_iovec_t.h>
       |  106|
       |  107| 
       |  108|/*
       |  109| * Types
       |  110| */
       |  111|#define	SOCK_STREAM	1		/* stream socket */
       |  112|#define	SOCK_DGRAM	2		/* datagram socket */
       |  113|#define	SOCK_RAW	3		/* raw-protocol interface */
       |  114|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  115|#define	SOCK_RDM	4		/* reliably-delivered message */
       |  116|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  117|#define	SOCK_SEQPACKET	5		/* sequenced packet stream */
       |  118|
       |  119|/*
       |  120| * Option flags per-socket.
       |  121| */
       |  122|#define	SO_DEBUG	0x0001		/* turn on debugging info recording */
       |  123|#define	SO_ACCEPTCONN	0x0002		/* socket has had listen() */
       |  124|#define	SO_REUSEADDR	0x0004		/* allow local address reuse */
       |  125|#define	SO_KEEPALIVE	0x0008		/* keep connections alive */
       |  126|#define	SO_DONTROUTE	0x0010		/* just use interface addresses */
       |  127|#define	SO_BROADCAST	0x0020		/* permit sending of broadcast msgs */
       |  128|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  129|#define	SO_USELOOPBACK	0x0040		/* bypass hardware when possible */
       |  130|#define SO_LINGER	0x0080          /* linger on close if data present (in ticks) */
       |  131|#else
       |  132|#define SO_LINGER	0x1080          /* linger on close if data present (in seconds) */
       |  133|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  134|#define	SO_OOBINLINE	0x0100		/* leave received OOB data in line */
       |  135|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  136|#define	SO_REUSEPORT	0x0200		/* allow local address & port reuse */
       |  137|#define	SO_TIMESTAMP	0x0400		/* timestamp received dgram traffic */
       |  138|#define SO_TIMESTAMP_MONOTONIC	0x0800	/* Monotonically increasing timestamp on rcvd dgram */
       |  139|#ifndef __APPLE__
       |  140|#define	SO_ACCEPTFILTER	0x1000		/* there is an accept filter */
       |  141|#else
       |  142|#define SO_DONTTRUNC	0x2000		/* APPLE: Retain unread data */
       |  143|					/*  (ATOMIC proto) */
       |  144|#define SO_WANTMORE	0x4000		/* APPLE: Give hint when more data ready */
       |  145|#define SO_WANTOOBFLAG	0x8000		/* APPLE: Want OOB in MSG_FLAG on receive */
       |  146|
       |  147|
       |  148|#endif  /* (!__APPLE__) */
       |  149|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  150|
       |  151|/*
       |  152| * Additional options, not kept in so_options.
       |  153| */
       |  154|#define SO_SNDBUF	0x1001		/* send buffer size */
       |  155|#define SO_RCVBUF	0x1002		/* receive buffer size */
       |  156|#define SO_SNDLOWAT	0x1003		/* send low-water mark */
       |  157|#define SO_RCVLOWAT	0x1004		/* receive low-water mark */
       |  158|#define SO_SNDTIMEO	0x1005		/* send timeout */
       |  159|#define SO_RCVTIMEO	0x1006		/* receive timeout */
       |  160|#define	SO_ERROR	0x1007		/* get error status and clear */
       |  161|#define	SO_TYPE		0x1008		/* get socket type */
       |  162|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  163|/*efine	SO_PRIVSTATE	0x1009		   get/deny privileged state */
       |  164|#define SO_LABEL        0x1010          /* socket's MAC label */
       |  165|#define SO_PEERLABEL    0x1011          /* socket's peer MAC label */
       |  166|#ifdef __APPLE__
       |  167|#define SO_NREAD	0x1020		/* APPLE: get 1st-packet byte count */
       |  168|#define SO_NKE		0x1021		/* APPLE: Install socket-level NKE */
       |  169|#define SO_NOSIGPIPE	0x1022		/* APPLE: No SIGPIPE on EPIPE */
       |  170|#define SO_NOADDRERR	0x1023		/* APPLE: Returns EADDRNOTAVAIL when src is not available anymore */
       |  171|#define SO_NWRITE	0x1024		/* APPLE: Get number of bytes currently in send socket buffer */
       |  172|#define SO_REUSESHAREUID	0x1025		/* APPLE: Allow reuse of port/socket by different userids */
       |  173|#ifdef __APPLE_API_PRIVATE
       |  174|#define SO_NOTIFYCONFLICT	0x1026	/* APPLE: send notification if there is a bind on a port which is already in use */
       |  175|#define	SO_UPCALLCLOSEWAIT	0x1027	/* APPLE: block on close until an upcall returns */
       |  176|#endif
       |  177|#define SO_LINGER_SEC	0x1080          /* linger on close if data present (in seconds) */
       |  178|#define SO_RANDOMPORT   0x1082  /* APPLE: request local port randomization */
       |  179|#define SO_NP_EXTENSIONS	0x1083	/* To turn off some POSIX behavior */
       |  180|#endif
       |  181|
       |  182|#define SO_NUMRCVPKT		0x1112	/* number of datagrams in receive socket buffer */
       |  183|
       |  184|typedef __uint32_t sae_associd_t;
       |  185|#define	SAE_ASSOCID_ANY	0
       |  186|#define	SAE_ASSOCID_ALL	((sae_associd_t)(-1ULL))
       |  187|
       |  188|typedef __uint32_t sae_connid_t;
       |  189|#define	SAE_CONNID_ANY	0
       |  190|#define	SAE_CONNID_ALL	((sae_connid_t)(-1ULL))
       |  191|
       |  192|/* connectx() flag parameters */
       |  193|#define CONNECT_RESUME_ON_READ_WRITE	0x1 /* resume connect() on read/write */
       |  194|#define CONNECT_DATA_IDEMPOTENT		0x2 /* data is idempotent */
       |  195|
       |  196|/* sockaddr endpoints */
       |  197|typedef struct sa_endpoints {
       |  198|	unsigned int	sae_srcif;      /* optional source interface */
       |  199|	struct sockaddr	*sae_srcaddr;   /* optional source address */
       |  200|	socklen_t	sae_srcaddrlen; /* size of source address */
       |  201|	struct sockaddr	*sae_dstaddr;   /* destination address */
       |  202|	socklen_t	sae_dstaddrlen; /* size of destination address */
       |  203|} sa_endpoints_t;
       |  204|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  205|
       |  206|/*
       |  207| * Structure used for manipulating linger option.
       |  208| */
       |  209|struct	linger {
       |  210|	int	l_onoff;		/* option on/off */
       |  211|	int	l_linger;		/* linger time */
       |  212|};
       |  213|
       |  214|#ifndef __APPLE__
       |  215|struct	accept_filter_arg {
       |  216|	char	af_name[16];
       |  217|	char	af_arg[256-16];
       |  218|};
       |  219|#endif
       |  220|
       |  221|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  222|#ifdef __APPLE__
       |  223|
       |  224|/*
       |  225| * Structure to control non-portable Sockets extension to POSIX  
       |  226| */
       |  227|struct so_np_extensions {
       |  228|	u_int32_t	npx_flags;
       |  229|	u_int32_t	npx_mask;
       |  230|};
       |  231|
       |  232|#define SONPX_SETOPTSHUT	0x000000001     /* flag for allowing setsockopt after shutdown */
       |  233|
       |  234|
       |  235|
       |  236|#endif
       |  237|#endif
       |  238|
       |  239|/*
       |  240| * Level number for (get/set)sockopt() to apply to socket itself.
       |  241| */
       |  242|#define	SOL_SOCKET	0xffff		/* options for socket level */
       |  243|
       |  244|
       |  245|/*
       |  246| * Address families.
       |  247| */
       |  248|#define	AF_UNSPEC	0		/* unspecified */
       |  249|#define	AF_UNIX		1		/* local to host (pipes) */
       |  250|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  251|#define	AF_LOCAL	AF_UNIX		/* backward compatibility */
       |  252|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
      0|  253|#define	AF_INET		2		/* internetwork: UDP, TCP, etc. */
       |  254|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  255|#define	AF_IMPLINK	3		/* arpanet imp addresses */
       |  256|#define	AF_PUP		4		/* pup protocols: e.g. BSP */
       |  257|#define	AF_CHAOS	5		/* mit CHAOS protocols */
       |  258|#define	AF_NS		6		/* XEROX NS protocols */
       |  259|#define	AF_ISO		7		/* ISO protocols */
       |  260|#define	AF_OSI		AF_ISO
       |  261|#define	AF_ECMA		8		/* European computer manufacturers */
       |  262|#define	AF_DATAKIT	9		/* datakit protocols */
       |  263|#define	AF_CCITT	10		/* CCITT protocols, X.25 etc */
       |  264|#define	AF_SNA		11		/* IBM SNA */
       |  265|#define AF_DECnet	12		/* DECnet */
       |  266|#define AF_DLI		13		/* DEC Direct data link interface */
       |  267|#define AF_LAT		14		/* LAT */
       |  268|#define	AF_HYLINK	15		/* NSC Hyperchannel */
       |  269|#define	AF_APPLETALK	16		/* Apple Talk */
       |  270|#define	AF_ROUTE	17		/* Internal Routing Protocol */
       |  271|#define	AF_LINK		18		/* Link layer interface */
       |  272|#define	pseudo_AF_XTP	19		/* eXpress Transfer Protocol (no AF) */
       |  273|#define	AF_COIP		20		/* connection-oriented IP, aka ST II */
       |  274|#define	AF_CNT		21		/* Computer Network Technology */
       |  275|#define pseudo_AF_RTIP	22		/* Help Identify RTIP packets */
       |  276|#define	AF_IPX		23		/* Novell Internet Protocol */
       |  277|#define	AF_SIP		24		/* Simple Internet Protocol */
       |  278|#define pseudo_AF_PIP	25		/* Help Identify PIP packets */
       |  279|/*define pseudo_AF_BLUE	26	   Identify packets for Blue Box - Not used */
       |  280|#define AF_NDRV		27		/* Network Driver 'raw' access */
       |  281|#define	AF_ISDN		28		/* Integrated Services Digital Network*/
       |  282|#define	AF_E164		AF_ISDN		/* CCITT E.164 recommendation */
       |  283|#define	pseudo_AF_KEY	29		/* Internal key-management function */
       |  284|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  285|#define	AF_INET6	30		/* IPv6 */
       |  286|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  287|#define	AF_NATM		31		/* native ATM access */
       |  288|#define AF_SYSTEM	32		/* Kernel event messages */
       |  289|#define AF_NETBIOS	33		/* NetBIOS */
       |  290|#define AF_PPP		34		/* PPP communication protocol */
       |  291|#define pseudo_AF_HDRCMPLT 35		/* Used by BPF to not rewrite headers
       |  292|					 * in interface output routine */
       |  293|#define AF_RESERVED_36	36		/* Reserved for internal usage */
       |  294|#define AF_IEEE80211    37              /* IEEE 802.11 protocol */
       |  295|#define AF_UTUN		38
       |  296|#define	AF_MAX		40
       |  297|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  298|
       |  299|/*
       |  300| * [XSI] Structure used by kernel to store most addresses.
       |  301| */
       |  302|struct sockaddr {
       |  303|	__uint8_t	sa_len;		/* total length */
       |  304|	sa_family_t	sa_family;	/* [XSI] address family */
       |  305|	char		sa_data[14];	/* [XSI] addr value (actually larger) */
       |  306|};
       |  307|
       |  308|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  309|#define	SOCK_MAXADDRLEN	255		/* longest possible addresses */
       |  310|
       |  311|/*
       |  312| * Structure used by kernel to pass protocol
       |  313| * information in raw sockets.
       |  314| */
       |  315|struct sockproto {
       |  316|	__uint16_t	sp_family;		/* address family */
       |  317|	__uint16_t	sp_protocol;		/* protocol */
       |  318|};
       |  319|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE)*/
       |  320|
       |  321|/*
       |  322| * RFC 2553: protocol-independent placeholder for socket addresses
       |  323| */
       |  324|#define	_SS_MAXSIZE	128
       |  325|#define	_SS_ALIGNSIZE	(sizeof(__int64_t))
       |  326|#define	_SS_PAD1SIZE	\
       |  327|		(_SS_ALIGNSIZE - sizeof(__uint8_t) - sizeof(sa_family_t))
       |  328|#define	_SS_PAD2SIZE	\
       |  329|		(_SS_MAXSIZE - sizeof(__uint8_t) - sizeof(sa_family_t) - \
       |  330|				_SS_PAD1SIZE - _SS_ALIGNSIZE)
       |  331|
       |  332|/*
       |  333| * [XSI] sockaddr_storage
       |  334| */
       |  335|struct sockaddr_storage {
       |  336|	__uint8_t	ss_len;		/* address length */
       |  337|	sa_family_t	ss_family;	/* [XSI] address family */
       |  338|	char			__ss_pad1[_SS_PAD1SIZE];
       |  339|	__int64_t	__ss_align;	/* force structure storage alignment */
       |  340|	char			__ss_pad2[_SS_PAD2SIZE];
       |  341|};
       |  342|
       |  343|
       |  344|/*
       |  345| * Protocol families, same as address families for now.
       |  346| */
       |  347|#define	PF_UNSPEC	AF_UNSPEC
       |  348|#define	PF_LOCAL	AF_LOCAL
       |  349|#define	PF_UNIX		PF_LOCAL	/* backward compatibility */
       |  350|#define	PF_INET		AF_INET
       |  351|#define	PF_IMPLINK	AF_IMPLINK
       |  352|#define	PF_PUP		AF_PUP
       |  353|#define	PF_CHAOS	AF_CHAOS
       |  354|#define	PF_NS		AF_NS
       |  355|#define	PF_ISO		AF_ISO
       |  356|#define	PF_OSI		AF_ISO
       |  357|#define	PF_ECMA		AF_ECMA
       |  358|#define	PF_DATAKIT	AF_DATAKIT
       |  359|#define	PF_CCITT	AF_CCITT
       |  360|#define	PF_SNA		AF_SNA
       |  361|#define PF_DECnet	AF_DECnet
       |  362|#define PF_DLI		AF_DLI
       |  363|#define PF_LAT		AF_LAT
       |  364|#define	PF_HYLINK	AF_HYLINK
       |  365|#define	PF_APPLETALK	AF_APPLETALK
       |  366|#define	PF_ROUTE	AF_ROUTE
       |  367|#define	PF_LINK		AF_LINK
       |  368|#define	PF_XTP		pseudo_AF_XTP	/* really just proto family, no AF */
       |  369|#define	PF_COIP		AF_COIP
       |  370|#define	PF_CNT		AF_CNT
       |  371|#define	PF_SIP		AF_SIP
       |  372|#define	PF_IPX		AF_IPX		/* same format as AF_NS */
       |  373|#define PF_RTIP		pseudo_AF_RTIP	/* same format as AF_INET */
       |  374|#define PF_PIP		pseudo_AF_PIP
       |  375|#define PF_NDRV		AF_NDRV
       |  376|#define	PF_ISDN		AF_ISDN
       |  377|#define	PF_KEY		pseudo_AF_KEY
       |  378|#define	PF_INET6	AF_INET6
       |  379|#define	PF_NATM		AF_NATM
       |  380|#define PF_SYSTEM	AF_SYSTEM
       |  381|#define PF_NETBIOS	AF_NETBIOS
       |  382|#define PF_PPP		AF_PPP
       |  383|#define PF_RESERVED_36  AF_RESERVED_36
       |  384|#define PF_UTUN		AF_UTUN
       |  385|#define	PF_MAX		AF_MAX
       |  386|
       |  387|/*
       |  388| * These do not have socket-layer support:
       |  389| */
       |  390|#define	PF_VLAN		((uint32_t)0x766c616e)	/* 'vlan' */
       |  391|#define PF_BOND		((uint32_t)0x626f6e64)	/* 'bond' */
       |  392|
       |  393|/*
       |  394| * Definitions for network related sysctl, CTL_NET.
       |  395| *
       |  396| * Second level is protocol family.
       |  397| * Third level is protocol number.
       |  398| *
       |  399| * Further levels are defined by the individual families below.
       |  400| */
       |  401|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  402|#define NET_MAXID	AF_MAX
       |  403|#endif /* (_POSIX_C_SOURCE && !_DARWIN_C_SOURCE) */
       |  404|
       |  405|
       |  406|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  407|/*
       |  408| * PF_ROUTE - Routing table
       |  409| *
       |  410| * Three additional levels are defined:
       |  411| *	Fourth: address family, 0 is wildcard
       |  412| *	Fifth: type of info, defined below
       |  413| *	Sixth: flag(s) to mask with for NET_RT_FLAGS
       |  414| */
       |  415|#define NET_RT_DUMP		1	/* dump; may limit to a.f. */
       |  416|#define NET_RT_FLAGS		2	/* by flags, e.g. RESOLVING */
       |  417|#define NET_RT_IFLIST		3	/* survey interface list */
       |  418|#define NET_RT_STAT		4	/* routing statistics */
       |  419|#define NET_RT_TRASH		5	/* routes not in table but not freed */
       |  420|#define NET_RT_IFLIST2		6	/* interface list with addresses */
       |  421|#define NET_RT_DUMP2		7	/* dump; may limit to a.f. */
       |  422|#define	NET_RT_MAXID		10
       |  423|#endif /* (_POSIX_C_SOURCE && !_DARWIN_C_SOURCE) */
       |  424|
       |  425|
       |  426|/*
       |  427| * Maximum queue length specifiable by listen.
       |  428| */
       |  429|#define	SOMAXCONN	128
       |  430|
       |  431|/*
       |  432| * [XSI] Message header for recvmsg and sendmsg calls.
       |  433| * Used value-result for recvmsg, value only for sendmsg.
       |  434| */
       |  435|struct msghdr {
       |  436|	void		*msg_name;	/* [XSI] optional address */
       |  437|	socklen_t	msg_namelen;	/* [XSI] size of address */
       |  438|	struct		iovec *msg_iov;	/* [XSI] scatter/gather array */
       |  439|	int		msg_iovlen;	/* [XSI] # elements in msg_iov */
       |  440|	void		*msg_control;	/* [XSI] ancillary data, see below */
       |  441|	socklen_t	msg_controllen;	/* [XSI] ancillary data buffer len */
       |  442|	int		msg_flags;	/* [XSI] flags on received message */
       |  443|};
       |  444|
       |  445|
       |  446|
       |  447|#define	MSG_OOB		0x1		/* process out-of-band data */
       |  448|#define	MSG_PEEK	0x2		/* peek at incoming message */
       |  449|#define	MSG_DONTROUTE	0x4		/* send without using routing tables */
       |  450|#define	MSG_EOR		0x8		/* data completes record */
       |  451|#define	MSG_TRUNC	0x10		/* data discarded before delivery */
       |  452|#define	MSG_CTRUNC	0x20		/* control data lost before delivery */
       |  453|#define	MSG_WAITALL	0x40		/* wait for full request or error */
       |  454|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  455|#define	MSG_DONTWAIT	0x80		/* this message should be nonblocking */
       |  456|#define	MSG_EOF		0x100		/* data completes connection */
       |  457|#ifdef __APPLE__
       |  458|#ifdef __APPLE_API_OBSOLETE
       |  459|#define MSG_WAITSTREAM  0x200           /* wait up to full request.. may return partial */
       |  460|#endif
       |  461|#define MSG_FLUSH	0x400		/* Start of 'hold' seq; dump so_temp */
       |  462|#define MSG_HOLD	0x800		/* Hold frag in so_temp */
       |  463|#define MSG_SEND	0x1000		/* Send the packet in so_temp */
       |  464|#define MSG_HAVEMORE	0x2000		/* Data ready to be read */
       |  465|#define MSG_RCVMORE	0x4000		/* Data remains in current pkt */
       |  466|#endif
       |  467|#define MSG_NEEDSA	0x10000		/* Fail receive if socket address cannot be allocated */
       |  468|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  469|
       |  470|/*
       |  471| * Header for ancillary data objects in msg_control buffer.
       |  472| * Used for additional information with/about a datagram
       |  473| * not expressible by flags.  The format is a sequence
       |  474| * of message elements headed by cmsghdr structures.
       |  475| */
       |  476|struct cmsghdr {
       |  477|	socklen_t	cmsg_len;	/* [XSI] data byte count, including hdr */
       |  478|	int		cmsg_level;	/* [XSI] originating protocol */
       |  479|	int		cmsg_type;	/* [XSI] protocol-specific type */
       |  480|/* followed by	unsigned char  cmsg_data[]; */
       |  481|};
       |  482|
       |  483|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  484|#ifndef __APPLE__
       |  485|/*
       |  486| * While we may have more groups than this, the cmsgcred struct must
       |  487| * be able to fit in an mbuf, and NGROUPS_MAX is too large to allow
       |  488| * this.
       |  489|*/
       |  490|#define CMGROUP_MAX 16
       |  491|
       |  492|/*
       |  493| * Credentials structure, used to verify the identity of a peer
       |  494| * process that has sent us a message. This is allocated by the
       |  495| * peer process but filled in by the kernel. This prevents the
       |  496| * peer from lying about its identity. (Note that cmcred_groups[0]
       |  497| * is the effective GID.)
       |  498| */
       |  499|struct cmsgcred {
       |  500|	pid_t	cmcred_pid;		/* PID of sending process */
       |  501|	uid_t	cmcred_uid;		/* real UID of sending process */
       |  502|	uid_t	cmcred_euid;		/* effective UID of sending process */
       |  503|	gid_t	cmcred_gid;		/* real GID of sending process */
       |  504|	short	cmcred_ngroups;		/* number or groups */
       |  505|	gid_t	cmcred_groups[CMGROUP_MAX];	/* groups */
       |  506|};
       |  507|#endif
       |  508|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  509|
       |  510|/* given pointer to struct cmsghdr, return pointer to data */
       |  511|#define	CMSG_DATA(cmsg)		((unsigned char *)(cmsg) + \
       |  512|				 __DARWIN_ALIGN32(sizeof(struct cmsghdr)))
       |  513|
       |  514|/*
       |  515| * RFC 2292 requires to check msg_controllen, in case that the kernel returns
       |  516| * an empty list for some reasons.
       |  517| */
       |  518|#define CMSG_FIRSTHDR(mhdr) \
       |  519|        ((mhdr)->msg_controllen >= sizeof(struct cmsghdr) ? \
       |  520|         (struct cmsghdr *)(mhdr)->msg_control : \
       |  521|         (struct cmsghdr *)0L)
       |  522|
       |  523|
       |  524|/* 
       |  525| * Given pointer to struct cmsghdr, return pointer to next cmsghdr
       |  526| * RFC 2292 says that CMSG_NXTHDR(mhdr, NULL) is equivalent to CMSG_FIRSTHDR(mhdr)
       |  527| */
       |  528|#define	CMSG_NXTHDR(mhdr, cmsg)						\
       |  529|	((char *)(cmsg) == (char *)0L ? CMSG_FIRSTHDR(mhdr) :		\
       |  530|	 ((((unsigned char *)(cmsg) +					\
       |  531|	    __DARWIN_ALIGN32((__uint32_t)(cmsg)->cmsg_len) +		\
       |  532|	    __DARWIN_ALIGN32(sizeof(struct cmsghdr))) >			\
       |  533|	    ((unsigned char *)(mhdr)->msg_control +			\
       |  534|	     (mhdr)->msg_controllen)) ?					\
       |  535|	  (struct cmsghdr *)0L /* NULL */ :				\
       |  536|	  (struct cmsghdr *)(void *)((unsigned char *)(cmsg) +		\
       |  537|	 		    __DARWIN_ALIGN32((__uint32_t)(cmsg)->cmsg_len))))
       |  538|
       |  539|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  540|/* RFC 2292 additions */
       |  541|#define	CMSG_SPACE(l)		(__DARWIN_ALIGN32(sizeof(struct cmsghdr)) + __DARWIN_ALIGN32(l))
       |  542|#define	CMSG_LEN(l)		(__DARWIN_ALIGN32(sizeof(struct cmsghdr)) + (l))
       |  543|
       |  544|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  545|
       |  546|/* "Socket"-level control message types: */
       |  547|#define	SCM_RIGHTS			0x01	/* access rights (array of int) */
       |  548|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  549|#define	SCM_TIMESTAMP			0x02	/* timestamp (struct timeval) */
       |  550|#define	SCM_CREDS			0x03	/* process creds (struct cmsgcred) */
       |  551|#define	SCM_TIMESTAMP_MONOTONIC		0x04	/* timestamp (uint64_t) */ 
       |  552|
       |  553|
       |  554|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  555|
       |  556|/*
       |  557| * howto arguments for shutdown(2), specified by Posix.1g.
       |  558| */
       |  559|#define	SHUT_RD		0		/* shut down the reading side */
       |  560|#define	SHUT_WR		1		/* shut down the writing side */
       |  561|#define	SHUT_RDWR	2		/* shut down both sides */
       |  562|
       |  563|#if !defined(_POSIX_C_SOURCE)
       |  564|/*
       |  565| * sendfile(2) header/trailer struct
       |  566| */
       |  567|struct sf_hdtr {
       |  568|	struct iovec *headers;	/* pointer to an array of header struct iovec's */
       |  569|	int hdr_cnt;		/* number of header iovec's */
       |  570|	struct iovec *trailers;	/* pointer to an array of trailer struct iovec's */
       |  571|	int trl_cnt;		/* number of trailer iovec's */
       |  572|};
       |  573|
       |  574|
       |  575|#endif	/* !_POSIX_C_SOURCE */
       |  576|
       |  577|
       |  578|__BEGIN_DECLS
       |  579|
       |  580|int	accept(int, struct sockaddr * __restrict, socklen_t * __restrict)
       |  581|		__DARWIN_ALIAS_C(accept);
       |  582|int	bind(int, const struct sockaddr *, socklen_t) __DARWIN_ALIAS(bind);
       |  583|int	connect(int, const struct sockaddr *, socklen_t) __DARWIN_ALIAS_C( connect);
       |  584|int	getpeername(int, struct sockaddr * __restrict, socklen_t * __restrict)
       |  585|		__DARWIN_ALIAS(getpeername);
       |  586|int	getsockname(int, struct sockaddr * __restrict, socklen_t * __restrict)
       |  587|		__DARWIN_ALIAS(getsockname);
       |  588|int	getsockopt(int, int, int, void * __restrict, socklen_t * __restrict);
       |  589|int	listen(int, int) __DARWIN_ALIAS(listen);
       |  590|ssize_t	recv(int, void *, size_t, int) __DARWIN_ALIAS_C(recv);
       |  591|ssize_t	recvfrom(int, void *, size_t, int, struct sockaddr * __restrict,
       |  592|		socklen_t * __restrict) __DARWIN_ALIAS_C(recvfrom);
       |  593|ssize_t	recvmsg(int, struct msghdr *, int) __DARWIN_ALIAS_C(recvmsg);
       |  594|ssize_t	send(int, const void *, size_t, int) __DARWIN_ALIAS_C(send);
       |  595|ssize_t	sendmsg(int, const struct msghdr *, int) __DARWIN_ALIAS_C(sendmsg);
       |  596|ssize_t	sendto(int, const void *, size_t,
       |  597|		int, const struct sockaddr *, socklen_t) __DARWIN_ALIAS_C(sendto);
       |  598|int	setsockopt(int, int, int, const void *, socklen_t);
       |  599|int	shutdown(int, int);
       |  600|int	sockatmark(int) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_2_0);
       |  601|int	socket(int, int, int);
       |  602|int	socketpair(int, int, int, int *) __DARWIN_ALIAS(socketpair);
       |  603|
       |  604|#if !defined(_POSIX_C_SOURCE)
       |  605|int	sendfile(int, int, off_t, off_t *, struct sf_hdtr *, int);
       |  606|#endif	/* !_POSIX_C_SOURCE */
       |  607|
       |  608|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  609|void	pfctlinput(int, struct sockaddr *);
       |  610|int connectx(int , const sa_endpoints_t *, sae_associd_t, unsigned int,
       |  611|    const struct iovec *, unsigned int, size_t *, sae_connid_t *);
       |  612|int disconnectx(int , sae_associd_t, sae_connid_t);
       |  613|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  614|__END_DECLS
       |  615|
       |  616|
       |  617|#endif /* !_SYS_SOCKET_H_ */

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.0.2/include/limits.h:
       |    1|/*===---- limits.h - Standard header for integer sizes --------------------===*\
       |    2| *
       |    3| * Copyright (c) 2009 Chris Lattner
       |    4| *
       |    5| * Permission is hereby granted, free of charge, to any person obtaining a copy
       |    6| * of this software and associated documentation files (the "Software"), to deal
       |    7| * in the Software without restriction, including without limitation the rights
       |    8| * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       |    9| * copies of the Software, and to permit persons to whom the Software is
       |   10| * furnished to do so, subject to the following conditions:
       |   11| *
       |   12| * The above copyright notice and this permission notice shall be included in
       |   13| * all copies or substantial portions of the Software.
       |   14| *
       |   15| * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       |   16| * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       |   18| * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       |   19| * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       |   20| * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
       |   21| * THE SOFTWARE.
       |   22| *
       |   23|\*===----------------------------------------------------------------------===*/
       |   24|
       |   25|#ifndef __CLANG_LIMITS_H
       |   26|#define __CLANG_LIMITS_H
       |   27|
       |   28|/* The system's limits.h may, in turn, try to #include_next GCC's limits.h.
       |   29|   Avert this #include_next madness. */
       |   30|#if defined __GNUC__ && !defined _GCC_LIMITS_H_
       |   31|#define _GCC_LIMITS_H_
       |   32|#endif
       |   33|
       |   34|/* System headers include a number of constants from POSIX in <limits.h>.
       |   35|   Include it if we're hosted. */
       |   36|#if __STDC_HOSTED__ && __has_include_next(<limits.h>)
       |   37|#include_next <limits.h>
       |   38|#endif
       |   39|
       |   40|/* Many system headers try to "help us out" by defining these.  No really, we
       |   41|   know how big each datatype is. */
       |   42|#undef  SCHAR_MIN
       |   43|#undef  SCHAR_MAX
       |   44|#undef  UCHAR_MAX
       |   45|#undef  SHRT_MIN
       |   46|#undef  SHRT_MAX
       |   47|#undef  USHRT_MAX
       |   48|#undef  INT_MIN
       |   49|#undef  INT_MAX
       |   50|#undef  UINT_MAX
       |   51|#undef  LONG_MIN
       |   52|#undef  LONG_MAX
       |   53|#undef  ULONG_MAX
       |   54|
       |   55|#undef  CHAR_BIT
       |   56|#undef  CHAR_MIN
       |   57|#undef  CHAR_MAX
       |   58|
       |   59|/* C90/99 5.2.4.2.1 */
       |   60|#define SCHAR_MAX __SCHAR_MAX__
       |   61|#define SHRT_MAX  __SHRT_MAX__
       |   62|#define INT_MAX   __INT_MAX__
      0|   63|#define LONG_MAX  __LONG_MAX__
       |   64|
       |   65|#define SCHAR_MIN (-__SCHAR_MAX__-1)
       |   66|#define SHRT_MIN  (-__SHRT_MAX__ -1)
       |   67|#define INT_MIN   (-__INT_MAX__  -1)
       |   68|#define LONG_MIN  (-__LONG_MAX__ -1L)
       |   69|
       |   70|#define UCHAR_MAX (__SCHAR_MAX__*2  +1)
       |   71|#define USHRT_MAX (__SHRT_MAX__ *2  +1)
       |   72|#define UINT_MAX  (__INT_MAX__  *2U +1U)
       |   73|#define ULONG_MAX (__LONG_MAX__ *2UL+1UL)
       |   74|
       |   75|#ifndef MB_LEN_MAX
       |   76|#define MB_LEN_MAX 1
       |   77|#endif
       |   78|
       |   79|#define CHAR_BIT  __CHAR_BIT__
       |   80|
       |   81|#ifdef __CHAR_UNSIGNED__  /* -funsigned-char */
       |   82|#define CHAR_MIN 0
       |   83|#define CHAR_MAX UCHAR_MAX
       |   84|#else
       |   85|#define CHAR_MIN SCHAR_MIN
       |   86|#define CHAR_MAX __SCHAR_MAX__
       |   87|#endif
       |   88|
       |   89|/* C99 5.2.4.2.1: Added long long.
       |   90|   C++11 18.3.3.2: same contents as the Standard C Library header <limits.h>.
       |   91| */
       |   92|#if __STDC_VERSION__ >= 199901L || __cplusplus >= 201103L
       |   93|
       |   94|#undef  LLONG_MIN
       |   95|#undef  LLONG_MAX
       |   96|#undef  ULLONG_MAX
       |   97|
       |   98|#define LLONG_MAX  __LONG_LONG_MAX__
       |   99|#define LLONG_MIN  (-__LONG_LONG_MAX__-1LL)
       |  100|#define ULLONG_MAX (__LONG_LONG_MAX__*2ULL+1ULL)
       |  101|#endif
       |  102|
       |  103|/* LONG_LONG_MIN/LONG_LONG_MAX/ULONG_LONG_MAX are a GNU extension.  It's too bad
       |  104|   that we don't have something like #pragma poison that could be used to
       |  105|   deprecate a macro - the code should just use LLONG_MAX and friends.
       |  106| */
       |  107|#if defined(__GNU_LIBRARY__) ? defined(__USE_GNU) : !defined(__STRICT_ANSI__)
       |  108|
       |  109|#undef   LONG_LONG_MIN
       |  110|#undef   LONG_LONG_MAX
       |  111|#undef   ULONG_LONG_MAX
       |  112|
       |  113|#define LONG_LONG_MAX  __LONG_LONG_MAX__
       |  114|#define LONG_LONG_MIN  (-__LONG_LONG_MAX__-1LL)
       |  115|#define ULONG_LONG_MAX (__LONG_LONG_MAX__*2ULL+1ULL)
       |  116|#endif
       |  117|
       |  118|#endif /* __CLANG_LIMITS_H */

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.0.2/include/stdbool.h:
       |    1|/*===---- stdbool.h - Standard header for booleans -------------------------===
       |    2| *
       |    3| * Copyright (c) 2008 Eli Friedman
       |    4| *
       |    5| * Permission is hereby granted, free of charge, to any person obtaining a copy
       |    6| * of this software and associated documentation files (the "Software"), to deal
       |    7| * in the Software without restriction, including without limitation the rights
       |    8| * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       |    9| * copies of the Software, and to permit persons to whom the Software is
       |   10| * furnished to do so, subject to the following conditions:
       |   11| *
       |   12| * The above copyright notice and this permission notice shall be included in
       |   13| * all copies or substantial portions of the Software.
       |   14| *
       |   15| * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       |   16| * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       |   18| * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       |   19| * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       |   20| * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
       |   21| * THE SOFTWARE.
       |   22| *
       |   23| *===-----------------------------------------------------------------------===
       |   24| */
       |   25|
       |   26|#ifndef __STDBOOL_H
       |   27|#define __STDBOOL_H
       |   28|
       |   29|/* Don't define bool, true, and false in C++, except as a GNU extension. */
       |   30|#ifndef __cplusplus
       |   31|#define bool _Bool
      0|   32|#define true 1
      0|   33|#define false 0
       |   34|#elif defined(__GNUC__) && !defined(__STRICT_ANSI__)
       |   35|/* Define _Bool, bool, false, true as a GNU extension. */
       |   36|#define _Bool bool
       |   37|#define bool  bool
       |   38|#define false false
       |   39|#define true  true
       |   40|#endif
       |   41|
       |   42|#define __bool_true_false_are_defined 1
       |   43|
       |   44|#endif /* __STDBOOL_H */

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.0.2/include/stddef.h:
       |    1|/*===---- stddef.h - Basic type definitions --------------------------------===
       |    2| *
       |    3| * Copyright (c) 2008 Eli Friedman
       |    4| *
       |    5| * Permission is hereby granted, free of charge, to any person obtaining a copy
       |    6| * of this software and associated documentation files (the "Software"), to deal
       |    7| * in the Software without restriction, including without limitation the rights
       |    8| * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       |    9| * copies of the Software, and to permit persons to whom the Software is
       |   10| * furnished to do so, subject to the following conditions:
       |   11| *
       |   12| * The above copyright notice and this permission notice shall be included in
       |   13| * all copies or substantial portions of the Software.
       |   14| *
       |   15| * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       |   16| * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       |   18| * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       |   19| * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       |   20| * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
       |   21| * THE SOFTWARE.
       |   22| *
       |   23| *===-----------------------------------------------------------------------===
       |   24| */
       |   25|
       |   26|#if !defined(__STDDEF_H) || defined(__need_ptrdiff_t) ||                       \
       |   27|    defined(__need_size_t) || defined(__need_wchar_t) ||                       \
       |   28|    defined(__need_NULL) || defined(__need_wint_t)
       |   29|
       |   30|#if !defined(__need_ptrdiff_t) && !defined(__need_size_t) &&                   \
       |   31|    !defined(__need_wchar_t) && !defined(__need_NULL) &&                       \
       |   32|    !defined(__need_wint_t)
       |   33|/* Always define miscellaneous pieces when modules are available. */
       |   34|#if !__has_feature(modules)
       |   35|#define __STDDEF_H
       |   36|#endif
  ------------------
  | __url_session_manager_creation_queue_block_invoke:
  |      0|   34|#if !__has_feature(modules)
  |      0|   35|#define __STDDEF_H
  |      0|   36|#endif
  ------------------
       |   37|#define __need_ptrdiff_t
       |   38|#define __need_size_t
       |   39|#define __need_wchar_t
       |   40|#define __need_NULL
       |   41|#define __need_STDDEF_H_misc
       |   42|/* __need_wint_t is intentionally not defined here. */
       |   43|#endif
       |   44|
       |   45|#if defined(__need_ptrdiff_t)
       |   46|#if !defined(_PTRDIFF_T) || __has_feature(modules)
       |   47|/* Always define ptrdiff_t when modules are available. */
       |   48|#if !__has_feature(modules)
       |   49|#define _PTRDIFF_T
       |   50|#endif
       |   51|typedef __PTRDIFF_TYPE__ ptrdiff_t;
       |   52|#endif
       |   53|#undef __need_ptrdiff_t
       |   54|#endif /* defined(__need_ptrdiff_t) */
       |   55|
       |   56|#if defined(__need_size_t)
       |   57|#if !defined(_SIZE_T) || __has_feature(modules)
       |   58|/* Always define size_t when modules are available. */
       |   59|#if !__has_feature(modules)
       |   60|#define _SIZE_T
       |   61|#endif
       |   62|typedef __SIZE_TYPE__ size_t;
       |   63|#endif
       |   64|#undef __need_size_t
       |   65|#endif /*defined(__need_size_t) */
       |   66|
       |   67|#if defined(__need_STDDEF_H_misc)
       |   68|/* ISO9899:2011 7.20 (C11 Annex K): Define rsize_t if __STDC_WANT_LIB_EXT1__ is
       |   69| * enabled. */
       |   70|#if (defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ >= 1 && \
       |   71|     !defined(_RSIZE_T)) || __has_feature(modules)
       |   72|/* Always define rsize_t when modules are available. */
       |   73|#if !__has_feature(modules)
       |   74|#define _RSIZE_T
       |   75|#endif
       |   76|typedef __SIZE_TYPE__ rsize_t;
       |   77|#endif
       |   78|#endif /* defined(__need_STDDEF_H_misc) */
       |   79|
       |   80|#if defined(__need_wchar_t)
       |   81|#ifndef __cplusplus
       |   82|/* Always define wchar_t when modules are available. */
       |   83|#if !defined(_WCHAR_T) || __has_feature(modules)
       |   84|#if !__has_feature(modules)
       |   85|#define _WCHAR_T
       |   86|#if defined(_MSC_EXTENSIONS)
       |   87|#define _WCHAR_T_DEFINED
       |   88|#endif
       |   89|#endif
       |   90|typedef __WCHAR_TYPE__ wchar_t;
  ------------------
  | AFPublicKeyForCertificate:
  |      0|   51|typedef __PTRDIFF_TYPE__ ptrdiff_t;
  |      0|   52|#endif
  |      0|   53|#undef __need_ptrdiff_t
  |      0|   54|#endif /* defined(__need_ptrdiff_t) */
  |      0|   55|
  |      0|   56|#if defined(__need_size_t)
  |      0|   57|#if !defined(_SIZE_T) || __has_feature(modules)
  |      0|   58|/* Always define size_t when modules are available. */
  |      0|   59|#if !__has_feature(modules)
  |      0|   60|#define _SIZE_T
  |      0|   61|#endif
  |      0|   62|typedef __SIZE_TYPE__ size_t;
  |      0|   63|#endif
  |      0|   64|#undef __need_size_t
  |      0|   65|#endif /*defined(__need_size_t) */
  |      0|   66|
  |      0|   67|#if defined(__need_STDDEF_H_misc)
  |      0|   68|/* ISO9899:2011 7.20 (C11 Annex K): Define rsize_t if __STDC_WANT_LIB_EXT1__ is
  |      0|   69| * enabled. */
  |      0|   70|#if (defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ >= 1 && \
  |      0|   71|     !defined(_RSIZE_T)) || __has_feature(modules)
  |      0|   72|/* Always define rsize_t when modules are available. */
  |      0|   73|#if !__has_feature(modules)
  |      0|   74|#define _RSIZE_T
  |      0|   75|#endif
  |      0|   76|typedef __SIZE_TYPE__ rsize_t;
  |      0|   77|#endif
  |      0|   78|#endif /* defined(__need_STDDEF_H_misc) */
  |      0|   79|
  |      0|   80|#if defined(__need_wchar_t)
  |      0|   81|#ifndef __cplusplus
  |      0|   82|/* Always define wchar_t when modules are available. */
  |      0|   83|#if !defined(_WCHAR_T) || __has_feature(modules)
  |      0|   84|#if !__has_feature(modules)
  |      0|   85|#define _WCHAR_T
  |      0|   86|#if defined(_MSC_EXTENSIONS)
  |      0|   87|#define _WCHAR_T_DEFINED
  |      0|   88|#endif
  |      0|   89|#endif
  |      0|   90|typedef __WCHAR_TYPE__ wchar_t;
  ------------------
       |   91|#endif
       |   92|#endif
       |   93|#undef __need_wchar_t
       |   94|#endif /* defined(__need_wchar_t) */
       |   95|
       |   96|#if defined(__need_NULL)
       |   97|#undef NULL
       |   98|#ifdef __cplusplus
       |   99|#  if !defined(__MINGW32__) && !defined(_MSC_VER)
       |  100|#    define NULL __null
       |  101|#  else
       |  102|#    define NULL 0
       |  103|#  endif
       |  104|#else
      0|  105|#  define NULL ((void*)0)
       |  106|#endif
       |  107|#ifdef __cplusplus
       |  108|#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)
       |  109|namespace std { typedef decltype(nullptr) nullptr_t; }
       |  110|using ::std::nullptr_t;
       |  111|#endif
       |  112|#endif
       |  113|#undef __need_NULL
       |  114|#endif /* defined(__need_NULL) */
       |  115|
       |  116|#if defined(__need_STDDEF_H_misc)
       |  117|#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
       |  118|#include "__stddef_max_align_t.h"
       |  119|#endif
       |  120|#define offsetof(t, d) __builtin_offsetof(t, d)
       |  121|#undef __need_STDDEF_H_misc
       |  122|#endif  /* defined(__need_STDDEF_H_misc) */
       |  123|
       |  124|/* Some C libraries expect to see a wint_t here. Others (notably MinGW) will use
       |  125|__WINT_TYPE__ directly; accommodate both by requiring __need_wint_t */
       |  126|#if defined(__need_wint_t)
       |  127|/* Always define wint_t when modules are available. */
       |  128|#if !defined(_WINT_T) || __has_feature(modules)
       |  129|#if !__has_feature(modules)
       |  130|#define _WINT_T
       |  131|#endif
       |  132|typedef __WINT_TYPE__ wint_t;
       |  133|#endif
       |  134|#undef __need_wint_t
       |  135|#endif /* __need_wint_t */
       |  136|
       |  137|#endif

warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFNetworkReachabilityManager.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFSecurityPolicy.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFURLSessionManager.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/AFAutoPurgingImageCache.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/AFImageDownloader.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/AFNetworkActivityIndicatorManager.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIActivityIndicatorView+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIButton+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIImageView+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIProgressView+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIRefreshControl+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIWebView+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/testUITests/testUITests.m' isn't covered.

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h:
       |    1|/*	CFString.h
       |    2|	Copyright (c) 1998-2015, Apple Inc. All rights reserved.
       |    3|*/
       |    4|
       |    5|#if !defined(__COREFOUNDATION_CFSTRING__)
       |    6|#define __COREFOUNDATION_CFSTRING__ 1
       |    7|
       |    8|#include <CoreFoundation/CFBase.h>
       |    9|#include <CoreFoundation/CFArray.h>
       |   10|#include <CoreFoundation/CFData.h>
       |   11|#include <CoreFoundation/CFDictionary.h>
       |   12|#include <CoreFoundation/CFCharacterSet.h>
       |   13|#include <CoreFoundation/CFLocale.h>
       |   14|#include <stdarg.h>
       |   15|
       |   16|CF_IMPLICIT_BRIDGING_ENABLED
       |   17|CF_EXTERN_C_BEGIN
       |   18|
       |   19|/*
       |   20|Please note: CFStrings are conceptually an array of Unicode characters.
       |   21|However, in general, how a CFString stores this array is an implementation
       |   22|detail. For instance, CFString might choose to use an array of 8-bit characters
       |   23|to store its contents, or it might use multiple blocks of memory, or whatever.
       |   24|This is especially true since CFString is toll-free bridged with NSString, enabling
       |   25|any NSString instance to be used as a CFString. Furthermore, the implementation
       |   26|may change depending on the default system encoding, the user's language, 
       |   27|or even a release or update of the OS.
       |   28|
       |   29|What this means is that you should use the following advanced functions with care:
       |   30|
       |   31|  CFStringGetPascalStringPtr()
       |   32|  CFStringGetCStringPtr()
       |   33|  CFStringGetCharactersPtr()
       |   34|
       |   35|These functions are provided for optimization only. They will either return the desired
       |   36|pointer quickly, in constant time, or they return NULL. They might choose to return NULL
       |   37|for many reasons; for instance it's possible that for users running in different
       |   38|languages these sometimes return NULL; or in a future OS release the first two might
       |   39|switch to always returning NULL. Never observing NULL returns in your usages of these
       |   40|functions does not mean they won't ever return NULL. (But note the CFStringGetCharactersPtr()
       |   41|exception mentioned further below.)
       |   42|
       |   43|In your usages of these functions, if you get a NULL return, use the non-Ptr version
       |   44|of the functions as shown in this example:
       |   45|
       |   46|  char buffer[BUFSIZE];
       |   47|  const char *ptr = CFStringGetCStringPtr(str, encoding);
       |   48|  if (ptr == NULL) {
       |   49|      if (CFStringGetCString(str, buffer, BUFSIZE, encoding)) ptr = buffer;
       |   50|  }
       |   51|
       |   52|Note that CFStringGetCString() or CFStringGetPascalString() calls might still fail --- but
       |   53|that will happen in two circumstances only: The conversion from the UniChar contents of CFString
       |   54|to the specified encoding fails, or the buffer is too small. If they fail, that means
       |   55|the conversion was not possible.
       |   56|
       |   57|If you need a copy of the buffer in the above example, you might consider simply calling
       |   58|CFStringGetCString() in all cases --- CFStringGetCStringPtr() is simply an optimization.
       |   59|
       |   60|In addition, the following functions, which create immutable CFStrings from developer
       |   61|supplied buffers without copying the buffers, might have to actually copy
       |   62|under certain circumstances (If they do copy, the buffer will be dealt with by the
       |   63|"contentsDeallocator" argument.):
       |   64|
       |   65|  CFStringCreateWithPascalStringNoCopy()
       |   66|  CFStringCreateWithCStringNoCopy()
       |   67|  CFStringCreateWithCharactersNoCopy()
       |   68|
       |   69|You should of course never depend on the backing store of these CFStrings being
       |   70|what you provided, and in other no circumstance should you change the contents
       |   71|of that buffer (given that would break the invariant about the CFString being immutable).
       |   72|
       |   73|Having said all this, there are actually ways to create a CFString where the backing store
       |   74|is external, and can be manipulated by the developer or CFString itself:
       |   75|
       |   76|  CFStringCreateMutableWithExternalCharactersNoCopy()
       |   77|  CFStringSetExternalCharactersNoCopy()
       |   78|
       |   79|A "contentsAllocator" is used to realloc or free the backing store by CFString.
       |   80|kCFAllocatorNull can be provided to assure CFString will never realloc or free the buffer.
       |   81|Developer can call CFStringSetExternalCharactersNoCopy() to update
       |   82|CFString's idea of what's going on, if the buffer is changed externally. In these
       |   83|strings, CFStringGetCharactersPtr() is guaranteed to return the external buffer.
       |   84|
       |   85|These functions are here to allow wrapping a buffer of UniChar characters in a CFString,
       |   86|allowing the buffer to passed into CFString functions and also manipulated via CFString
       |   87|mutation functions. In general, developers should not use this technique for all strings,
       |   88|as it prevents CFString from using certain optimizations.
       |   89|*/
       |   90|
       |   91|/* Identifier for character encoding; the values are the same as Text Encoding Converter TextEncoding.
       |   92|*/
       |   93|typedef UInt32 CFStringEncoding;
       |   94|
       |   95|/* Platform-independent built-in encodings; always available on all platforms.
       |   96|   Call CFStringGetSystemEncoding() to get the default system encoding.
       |   97|*/
      0|   98|#define kCFStringEncodingInvalidId (0xffffffffU)
       |   99|typedef CF_ENUM(CFStringEncoding, CFStringBuiltInEncodings) {
       |  100|    kCFStringEncodingMacRoman = 0,
       |  101|    kCFStringEncodingWindowsLatin1 = 0x0500, /* ANSI codepage 1252 */
       |  102|    kCFStringEncodingISOLatin1 = 0x0201, /* ISO 8859-1 */
       |  103|    kCFStringEncodingNextStepLatin = 0x0B01, /* NextStep encoding*/
       |  104|    kCFStringEncodingASCII = 0x0600, /* 0..127 (in creating CFString, values greater than 0x7F are treated as corresponding Unicode value) */
       |  105|    kCFStringEncodingUnicode = 0x0100, /* kTextEncodingUnicodeDefault  + kTextEncodingDefaultFormat (aka kUnicode16BitFormat) */
       |  106|    kCFStringEncodingUTF8 = 0x08000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF8Format */
       |  107|    kCFStringEncodingNonLossyASCII = 0x0BFF, /* 7bit Unicode variants used by Cocoa & Java */
       |  108|
       |  109|    kCFStringEncodingUTF16 = 0x0100, /* kTextEncodingUnicodeDefault + kUnicodeUTF16Format (alias of kCFStringEncodingUnicode) */
       |  110|    kCFStringEncodingUTF16BE = 0x10000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF16BEFormat */
  ------------------
  | __64-[UIWebView(AFNetworking) loadRequest:progress:success:failure:]_block_invoke:
  |      0|   95|/* Platform-independent built-in encodings; always available on all platforms.
  |      0|   96|   Call CFStringGetSystemEncoding() to get the default system encoding.
  |      0|   97|*/
  |      0|   98|#define kCFStringEncodingInvalidId (0xffffffffU)
  |      0|   99|typedef CF_ENUM(CFStringEncoding, CFStringBuiltInEncodings) {
  |      0|  100|    kCFStringEncodingMacRoman = 0,
  |      0|  101|    kCFStringEncodingWindowsLatin1 = 0x0500, /* ANSI codepage 1252 */
  |      0|  102|    kCFStringEncodingISOLatin1 = 0x0201, /* ISO 8859-1 */
  |      0|  103|    kCFStringEncodingNextStepLatin = 0x0B01, /* NextStep encoding*/
  |      0|  104|    kCFStringEncodingASCII = 0x0600, /* 0..127 (in creating CFString, values greater than 0x7F are treated as corresponding Unicode value) */
  |      0|  105|    kCFStringEncodingUnicode = 0x0100, /* kTextEncodingUnicodeDefault  + kTextEncodingDefaultFormat (aka kUnicode16BitFormat) */
  |      0|  106|    kCFStringEncodingUTF8 = 0x08000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF8Format */
  |      0|  107|    kCFStringEncodingNonLossyASCII = 0x0BFF, /* 7bit Unicode variants used by Cocoa & Java */
  |      0|  108|
  |      0|  109|    kCFStringEncodingUTF16 = 0x0100, /* kTextEncodingUnicodeDefault + kUnicodeUTF16Format (alias of kCFStringEncodingUnicode) */
  |      0|  110|    kCFStringEncodingUTF16BE = 0x10000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF16BEFormat */
  ------------------
       |  111|    kCFStringEncodingUTF16LE = 0x14000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF16LEFormat */
       |  112|
       |  113|    kCFStringEncodingUTF32 = 0x0c000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF32Format */
       |  114|    kCFStringEncodingUTF32BE = 0x18000100, /* kTextEncodingUnicodeDefault + kUnicodeUTF32BEFormat */
       |  115|    kCFStringEncodingUTF32LE = 0x1c000100 /* kTextEncodingUnicodeDefault + kUnicodeUTF32LEFormat */
       |  116|};
       |  117|
       |  118|
       |  119|/* CFString type ID */
       |  120|CF_EXPORT
       |  121|CFTypeID CFStringGetTypeID(void);
       |  122|
       |  123|/* CFSTR() allows creation of compile-time constant CFStringRefs; the argument 
       |  124|should be a constant C-string.
       |  125|
       |  126|CFSTR(), not being a "Copy" or "Create" function, does not return a new
       |  127|reference for you. So, you should not release the return value. This is
       |  128|much like constant C or Pascal strings --- when you use "hello world"
       |  129|in a program, you do not free it.
       |  130|
       |  131|However, strings returned from CFSTR() can be retained and released in a
       |  132|properly nested fashion, just like any other CF type. That is, if you pass
       |  133|a CFSTR() return value to a function such as SetMenuItemWithCFString(), the
       |  134|function can retain it, then later, when it's done with it, it can release it.
       |  135|
       |  136|Non-7 bit characters (that is, above 127) in CFSTR() are supported, although care must
       |  137|be taken in dealing with files containing them. If you can trust your editor and tools
       |  138|to deal with non-ASCII characters in the source code, then you can use them directly 
       |  139|in CFSTR(); otherwise, you can represent such characters with their escaped octal 
       |  140|equivalents in the encoding the compiler will use to interpret them (for instance, 
       |  141|O-umlaut is \303\226 in UTF-8). UTF-8 is the recommended encoding here, 
       |  142|since it is the default choice with Mac OS X developer tools.
       |  143|*/
       |  144|#if TARGET_OS_WIN32 || TARGET_OS_LINUX
       |  145|#undef __CONSTANT_CFSTRINGS__
       |  146|#endif
       |  147|
       |  148|#ifdef __CONSTANT_CFSTRINGS__
       |  149|#define CFSTR(cStr)  ((CFStringRef) __builtin___CFStringMakeConstantString ("" cStr ""))
       |  150|#else
       |  151|#define CFSTR(cStr)  __CFStringMakeConstantString("" cStr "")
       |  152|#endif
       |  153|
       |  154|#if defined(__GNUC__) && (__GNUC__*10+__GNUC_MINOR__ >= 42) && defined(__APPLE_CC__) && (__APPLE_CC__ > 1) && !defined(__INTEL_COMPILER) && (TARGET_OS_MAC || TARGET_OS_EMBEDDED)
       |  155|#define CF_FORMAT_FUNCTION(F,A) __attribute__((format(CFString, F, A)))
       |  156|#define CF_FORMAT_ARGUMENT(A) __attribute__((format_arg(A)))
       |  157|#else
       |  158|#define CF_FORMAT_FUNCTION(F,A)
       |  159|#define CF_FORMAT_ARGUMENT(A)
       |  160|#endif
       |  161|
       |  162|/*** Immutable string creation functions ***/
       |  163|
       |  164|/* Functions to create basic immutable strings. The provided allocator is used for all memory activity in these functions.
       |  165|*/
       |  166|
       |  167|/* The following four functions copy the provided buffer into CFString's internal storage. */
       |  168|CF_EXPORT
       |  169|CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding);
       |  170|
       |  171|CF_EXPORT
       |  172|CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
       |  173|
       |  174|/* The following takes an explicit length, and allows you to specify whether the data is an external format --- that is, whether to pay attention to the BOM character (if any) and do byte swapping if necessary
       |  175|*/
       |  176|CF_EXPORT
       |  177|CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
       |  178|
       |  179|CF_EXPORT
       |  180|CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars);
       |  181|
       |  182|
       |  183|/* These functions try not to copy the provided buffer. The buffer will be deallocated 
       |  184|with the provided contentsDeallocator when it's no longer needed; to not free
       |  185|the buffer, specify kCFAllocatorNull here. As usual, NULL means default allocator.
       |  186|
       |  187|NOTE: Do not count on these buffers as being used by the string; 
       |  188|in some cases the CFString might free the buffer and use something else
       |  189|(for instance if it decides to always use Unicode encoding internally). 
       |  190|
       |  191|NOTE: If you are not transferring ownership of the buffer to the CFString
       |  192|(for instance, you supplied contentsDeallocator = kCFAllocatorNull), it is your
       |  193|responsibility to assure the buffer does not go away during the lifetime of the string.
       |  194|If the string is retained or copied, its lifetime might extend in ways you cannot
       |  195|predict. So, for strings created with buffers whose lifetimes you cannot
       |  196|guarantee, you need to be extremely careful --- do not hand it out to any
       |  197|APIs which might retain or copy the strings.
       |  198|*/
       |  199|CF_EXPORT
       |  200|CFStringRef CFStringCreateWithPascalStringNoCopy(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator);
       |  201|
       |  202|CF_EXPORT
       |  203|CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator);
       |  204|
       |  205|/* The following takes an explicit length, and allows you to specify whether the data is an external format --- that is, whether to pay attention to the BOM character (if any) and do byte swapping if necessary
       |  206|*/
       |  207|CF_EXPORT
       |  208|CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator);
       |  209|
       |  210|CF_EXPORT
       |  211|CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator);
       |  212|
       |  213|/* Create copies of part or all of the string.
       |  214|*/
       |  215|CF_EXPORT
       |  216|CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range);
       |  217|
       |  218|CF_EXPORT
       |  219|CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString);
       |  220|
       |  221|/* These functions create a CFString from the provided printf-like format string and arguments.
       |  222|*/
       |  223|CF_EXPORT
       |  224|CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...) CF_FORMAT_FUNCTION(3,4);
       |  225|
       |  226|CF_EXPORT
       |  227|CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments) CF_FORMAT_FUNCTION(3,0);
       |  228|
       |  229|/* Functions to create mutable strings. "maxLength", if not 0, is a hard bound on the length of the string. If 0, there is no limit on the length.
       |  230|*/
       |  231|CF_EXPORT
       |  232|CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength);
       |  233|
       |  234|CF_EXPORT
       |  235|CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString);
       |  236|
       |  237|/* This function creates a mutable string that has a developer supplied and directly editable backing store.
       |  238|The string will be manipulated within the provided buffer (if any) until it outgrows capacity; then the
       |  239|externalCharactersAllocator will be consulted for more memory. When the CFString is deallocated, the
       |  240|buffer will be freed with the externalCharactersAllocator. Provide kCFAllocatorNull here to prevent the buffer
       |  241|from ever being reallocated or deallocated by CFString. See comments at top of this file for more info.
       |  242|*/
       |  243|CF_EXPORT
       |  244|CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator);
       |  245|
       |  246|/*** Basic accessors for the contents ***/
       |  247|
       |  248|/* Number of 16-bit Unicode characters in the string.
       |  249|*/
       |  250|CF_EXPORT
       |  251|CFIndex CFStringGetLength(CFStringRef theString);
       |  252|
       |  253|/* Extracting the contents of the string. For obtaining multiple characters, calling
       |  254|CFStringGetCharacters() is more efficient than multiple calls to CFStringGetCharacterAtIndex().
       |  255|If the length of the string is not known (so you can't use a fixed size buffer for CFStringGetCharacters()),
       |  256|another method is to use is CFStringGetCharacterFromInlineBuffer() (see further below).
       |  257|*/
       |  258|CF_EXPORT
       |  259|UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx);
       |  260|
       |  261|CF_EXPORT
       |  262|void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer);
       |  263|
       |  264|
       |  265|/*** Conversion to other encodings ***/
       |  266|
       |  267|/* These two convert into the provided buffer; they return false if conversion isn't possible
       |  268|(due to conversion error, or not enough space in the provided buffer). 
       |  269|These functions do zero-terminate or put the length byte; the provided bufferSize should include
       |  270|space for this (so pass 256 for Str255). More sophisticated usages can go through CFStringGetBytes().
       |  271|These functions are equivalent to calling CFStringGetBytes() with 
       |  272|the range of the string; lossByte = 0; and isExternalRepresentation = false; 
       |  273|if successful, they then insert the leading length or terminating zero, as desired.
       |  274|*/
       |  275|CF_EXPORT
       |  276|Boolean CFStringGetPascalString(CFStringRef theString, StringPtr buffer, CFIndex bufferSize, CFStringEncoding encoding);
       |  277|
       |  278|CF_EXPORT
       |  279|Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding);
       |  280|
       |  281|/* These functions attempt to return in O(1) time the desired format for the string.
       |  282|Note that although this means a pointer to the internal structure is being returned,
       |  283|this can't always be counted on. Please see note at the top of the file for more
       |  284|details.
       |  285|*/
       |  286|CF_EXPORT
       |  287|ConstStringPtr CFStringGetPascalStringPtr(CFStringRef theString, CFStringEncoding encoding);	/* May return NULL at any time; be prepared for NULL */
       |  288|
  ------------------
  | -[AFJSONResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  236|
  |      0|  237|/* This function creates a mutable string that has a developer supplied and directly editable backing store.
  |      0|  238|The string will be manipulated within the provided buffer (if any) until it outgrows capacity; then the
  |      0|  239|externalCharactersAllocator will be consulted for more memory. When the CFString is deallocated, the
  |      0|  240|buffer will be freed with the externalCharactersAllocator. Provide kCFAllocatorNull here to prevent the buffer
  |      0|  241|from ever being reallocated or deallocated by CFString. See comments at top of this file for more info.
  |      0|  242|*/
  |      0|  243|CF_EXPORT
  |      0|  244|CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator);
  |      0|  245|
  |      0|  246|/*** Basic accessors for the contents ***/
  |      0|  247|
  |      0|  248|/* Number of 16-bit Unicode characters in the string.
  |      0|  249|*/
  |      0|  250|CF_EXPORT
  |      0|  251|CFIndex CFStringGetLength(CFStringRef theString);
  |      0|  252|
  |      0|  253|/* Extracting the contents of the string. For obtaining multiple characters, calling
  |      0|  254|CFStringGetCharacters() is more efficient than multiple calls to CFStringGetCharacterAtIndex().
  |      0|  255|If the length of the string is not known (so you can't use a fixed size buffer for CFStringGetCharacters()),
  |      0|  256|another method is to use is CFStringGetCharacterFromInlineBuffer() (see further below).
  |      0|  257|*/
  |      0|  258|CF_EXPORT
  |      0|  259|UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx);
  |      0|  260|
  |      0|  261|CF_EXPORT
  |      0|  262|void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer);
  |      0|  263|
  |      0|  264|
  |      0|  265|/*** Conversion to other encodings ***/
  |      0|  266|
  |      0|  267|/* These two convert into the provided buffer; they return false if conversion isn't possible
  |      0|  268|(due to conversion error, or not enough space in the provided buffer). 
  |      0|  269|These functions do zero-terminate or put the length byte; the provided bufferSize should include
  |      0|  270|space for this (so pass 256 for Str255). More sophisticated usages can go through CFStringGetBytes().
  |      0|  271|These functions are equivalent to calling CFStringGetBytes() with 
  |      0|  272|the range of the string; lossByte = 0; and isExternalRepresentation = false; 
  |      0|  273|if successful, they then insert the leading length or terminating zero, as desired.
  |      0|  274|*/
  |      0|  275|CF_EXPORT
  |      0|  276|Boolean CFStringGetPascalString(CFStringRef theString, StringPtr buffer, CFIndex bufferSize, CFStringEncoding encoding);
  |      0|  277|
  |      0|  278|CF_EXPORT
  |      0|  279|Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding);
  |      0|  280|
  |      0|  281|/* These functions attempt to return in O(1) time the desired format for the string.
  |      0|  282|Note that although this means a pointer to the internal structure is being returned,
  |      0|  283|this can't always be counted on. Please see note at the top of the file for more
  |      0|  284|details.
  |      0|  285|*/
  |      0|  286|CF_EXPORT
  |      0|  287|ConstStringPtr CFStringGetPascalStringPtr(CFStringRef theString, CFStringEncoding encoding);	/* May return NULL at any time; be prepared for NULL */
  |      0|  288|
  ------------------
       |  289|CF_EXPORT
       |  290|const char *CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding);		/* May return NULL at any time; be prepared for NULL */
       |  291|
       |  292|CF_EXPORT
       |  293|const UniChar *CFStringGetCharactersPtr(CFStringRef theString);					/* May return NULL at any time; be prepared for NULL */
       |  294|
       |  295|/* The primitive conversion routine; allows you to convert a string piece at a time
       |  296|       into a fixed size buffer. Returns number of characters converted. 
       |  297|   Characters that cannot be converted to the specified encoding are represented
       |  298|       with the byte specified by lossByte; if lossByte is 0, then lossy conversion
       |  299|       is not allowed and conversion stops, returning partial results.
       |  300|   Pass buffer==NULL if you don't care about the converted string (but just the convertability,
       |  301|       or number of bytes required). 
       |  302|   maxBufLength indicates the maximum number of bytes to generate. It is ignored when buffer==NULL.
       |  303|   Does not zero-terminate. If you want to create Pascal or C string, allow one extra byte at start or end. 
       |  304|   Setting isExternalRepresentation causes any extra bytes that would allow 
       |  305|       the data to be made persistent to be included; for instance, the Unicode BOM. Note that
       |  306|       CFString prepends UTF encoded data with the Unicode BOM <http://www.unicode.org/faq/utf_bom.html> 
       |  307|       when generating external representation if the target encoding allows. It's important to note that
       |  308|       only UTF-8, UTF-16, and UTF-32 define the handling of the byte order mark character, and the "LE"
       |  309|       and "BE" variants of UTF-16 and UTF-32 don't.
       |  310|*/
       |  311|CF_EXPORT
       |  312|CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen);
       |  313|
       |  314|/* Convenience functions String <-> Data. These generate "external" formats, that is, formats that
       |  315|   can be written out to disk. For instance, if the encoding is Unicode,
       |  316|   CFStringCreateFromExternalRepresentation() pays attention to the BOM character (if any) 
       |  317|   and does byte swapping if necessary. Similarly CFStringCreateExternalRepresentation() will  
       |  318|   include a BOM character if appropriate. See CFStringGetBytes() for more on this and lossByte.
       |  319|*/
       |  320|CF_EXPORT
       |  321|CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding);	/* May return NULL on conversion error */
       |  322|
       |  323|CF_EXPORT
       |  324|CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte);	/* May return NULL on conversion error */	
       |  325|
       |  326|/* Hints about the contents of a string
       |  327|*/
       |  328|CF_EXPORT
       |  329|CFStringEncoding CFStringGetSmallestEncoding(CFStringRef theString);	/* Result in O(n) time max */
       |  330|
       |  331|CF_EXPORT
       |  332|CFStringEncoding CFStringGetFastestEncoding(CFStringRef theString);	/* Result in O(1) time max */
       |  333|
       |  334|/* General encoding info
       |  335|*/
       |  336|CF_EXPORT
       |  337|CFStringEncoding CFStringGetSystemEncoding(void);		/* The default encoding for the system; untagged 8-bit characters are usually in this encoding */
       |  338|
       |  339|CF_EXPORT
       |  340|CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding);	/* Max bytes a string of specified length (in UniChars) will take up if encoded */
       |  341|
       |  342|
       |  343|/*** FileSystem path conversion functions ***/
       |  344|
       |  345|/* Extract the contents of the string as a NULL-terminated 8-bit string appropriate for passing to POSIX APIs (for example, normalized for HFS+).  The string is zero-terminated. false will be returned if the conversion results don't fit into the buffer.  Use CFStringGetMaximumSizeOfFileSystemRepresentation() if you want to make sure the buffer is of sufficient length.
       |  346|*/
       |  347|CF_EXPORT
       |  348|Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen);
       |  349|
       |  350|/* Get the upper bound on the number of bytes required to hold the file system representation for the string. This result is returned quickly as a very rough approximation, and could be much larger than the actual space required. The result includes space for the zero termination. If you are allocating a buffer for long-term keeping, it's recommended that you reallocate it smaller (to be the right size) after calling CFStringGetFileSystemRepresentation(). 
       |  351|*/
       |  352|CF_EXPORT
       |  353|CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string);
       |  354|
       |  355|/* Create a CFString from the specified zero-terminated POSIX file system representation.  If the conversion fails (possible due to bytes in the buffer not being a valid sequence of bytes for the appropriate character encoding), NULL is returned.
       |  356|*/
       |  357|CF_EXPORT
       |  358|CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer);
       |  359|
       |  360|
       |  361|/*** Comparison functions. ***/
       |  362|
       |  363|/* Find and compare flags; these are OR'ed together and provided as CFStringCompareFlags in the various functions. 
       |  364|*/
       |  365|typedef CF_OPTIONS(CFOptionFlags, CFStringCompareFlags) {
       |  366|    kCFCompareCaseInsensitive = 1,	
       |  367|    kCFCompareBackwards = 4,		/* Starting from the end of the string */
       |  368|    kCFCompareAnchored = 8,		/* Only at the specified starting point */
       |  369|    kCFCompareNonliteral = 16,		/* If specified, loose equivalence is performed (o-umlaut == o, umlaut) */
       |  370|    kCFCompareLocalized = 32,		/* User's default locale is used for the comparisons */
       |  371|    kCFCompareNumerically = 64,		/* Numeric comparison is used; that is, Foo2.txt < Foo7.txt < Foo25.txt */
       |  372|    kCFCompareDiacriticInsensitive CF_ENUM_AVAILABLE(10_5, 2_0) = 128, /* If specified, ignores diacritics (o-umlaut == o) */
       |  373|    kCFCompareWidthInsensitive CF_ENUM_AVAILABLE(10_5, 2_0) = 256, /* If specified, ignores width differences ('a' == UFF41) */
       |  374|    kCFCompareForcedOrdering CF_ENUM_AVAILABLE(10_5, 2_0) = 512 /* If specified, comparisons are forced to return either kCFCompareLessThan or kCFCompareGreaterThan if the strings are equivalent but not strictly equal, for stability when sorting (e.g. "aaa" > "AAA" with kCFCompareCaseInsensitive specified) */
       |  375|};
       |  376|
       |  377|/* The main comparison routine; compares specified range of the first string to (the full range of) the second string.
       |  378|   locale == NULL indicates canonical locale (the return value from CFLocaleGetSystem()).
       |  379|   kCFCompareNumerically, added in 10.2, does not work if kCFCompareLocalized is specified on systems before 10.3
       |  380|   kCFCompareBackwards and kCFCompareAnchored are not applicable.
       |  381|   rangeToCompare applies to the first string; that is, only the substring of theString1 specified by rangeToCompare is compared against all of theString2.
       |  382|*/
       |  383|CF_EXPORT
       |  384|CFComparisonResult CFStringCompareWithOptionsAndLocale(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions, CFLocaleRef locale) CF_AVAILABLE(10_5, 2_0);
       |  385|
       |  386|/* Comparison convenience. Uses the current user locale (the return value from CFLocaleCopyCurrent()) if kCFCompareLocalized. Refer to CFStringCompareWithOptionsAndLocale() for more info.
       |  387|*/
       |  388|CF_EXPORT
       |  389|CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions);
       |  390|
       |  391|/* Comparison convenience suitable for passing as sorting functions.
       |  392|   kCFCompareNumerically, added in 10.2, does not work if kCFCompareLocalized is specified on systems before 10.3
       |  393|   kCFCompareBackwards and kCFCompareAnchored are not applicable.
       |  394|*/
       |  395|CF_EXPORT
       |  396|CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
       |  397|
       |  398|/* CFStringFindWithOptionsAndLocale() returns the found range in the CFRange * argument; you can pass NULL for simple discovery check.
       |  399|   locale == NULL indicates canonical locale (the return value from CFLocaleGetSystem()).
       |  400|   If stringToFind is the empty string (zero length), nothing is found.
       |  401|   Ignores the kCFCompareNumerically option.
       |  402|   Only the substring of theString specified by rangeToSearch is searched for stringToFind.
       |  403|*/
       |  404|CF_EXPORT
       |  405|Boolean CFStringFindWithOptionsAndLocale(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFLocaleRef locale, CFRange *result) CF_AVAILABLE(10_5, 2_0);
       |  406|
       |  407|/* Find convenience. Uses the current user locale (the return value from CFLocaleCopyCurrent()) if kCFCompareLocalized. Refer to CFStringFindWithOptionsAndLocale() for more info.
       |  408|*/
       |  409|CF_EXPORT
       |  410|Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result);
       |  411|
       |  412|/* CFStringCreateArrayWithFindResults() returns an array of CFRange pointers, or NULL if there are no matches.
       |  413|   Overlapping instances are not found; so looking for "AA" in "AAA" finds just one range.
       |  414|   Post 10.1: If kCFCompareBackwards is provided, the scan is done from the end (which can give a different result), and
       |  415|      the results are stored in the array backwards (last found range in slot 0).
       |  416|   If stringToFind is the empty string (zero length), nothing is found.
       |  417|   kCFCompareAnchored causes just the consecutive instances at start (or end, if kCFCompareBackwards) to be reported. So, searching for "AB" in "ABABXAB..." you just get the first two occurrences.
       |  418|   Ignores the kCFCompareNumerically option.
       |  419|   Only the substring of theString specified by rangeToSearch is searched for stringToFind.
       |  420|*/
       |  421|CF_EXPORT
       |  422|CFArrayRef CFStringCreateArrayWithFindResults(CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags compareOptions);
       |  423|
       |  424|/* Find conveniences; see comments above concerning empty string and options.
       |  425|*/
       |  426|CF_EXPORT
       |  427|CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions);
       |  428|
       |  429|CF_EXPORT
       |  430|Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix);
       |  431|
       |  432|CF_EXPORT
       |  433|Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix);
       |  434|
       |  435|/*!
       |  436|	@function CFStringGetRangeOfComposedCharactersAtIndex
       |  437|	Returns the range of the composed character sequence at the specified index.
       |  438|	@param theString The CFString which is to be searched.  If this
       |  439|                		parameter is not a valid CFString, the behavior is
       |  440|              		undefined.
       |  441|	@param theIndex The index of the character contained in the
       |  442|			composed character sequence.  If the index is
       |  443|			outside the index space of the string (0 to N-1 inclusive,
       |  444|			where N is the length of the string), the behavior is
       |  445|			undefined.
       |  446|	@result The range of the composed character sequence.
       |  447|*/
       |  448|CF_EXPORT CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex);
       |  449|
       |  450|/*!
       |  451|	@function CFStringFindCharacterFromSet
       |  452|	Query the range of the first character contained in the specified character set.
       |  453|	@param theString The CFString which is to be searched.  If this
       |  454|                		parameter is not a valid CFString, the behavior is
       |  455|              		undefined.
       |  456|	@param theSet The CFCharacterSet against which the membership
       |  457|			of characters is checked.  If this parameter is not a valid
       |  458|			CFCharacterSet, the behavior is undefined.
       |  459|	@param range The range of characters within the string to search. If
       |  460|			the range location or end point (defined by the location
       |  461|			plus length minus 1) are outside the index space of the
       |  462|			string (0 to N-1 inclusive, where N is the length of the
       |  463|			string), the behavior is undefined. If the range length is
       |  464|			negative, the behavior is undefined. The range may be empty
       |  465|			(length 0), in which case no search is performed.
       |  466|	@param searchOptions The bitwise-or'ed option flags to control
       |  467|			the search behavior.  The supported options are
       |  468|			kCFCompareBackwards andkCFCompareAnchored.
       |  469|			If other option flags are specified, the behavior
       |  470|                        is undefined.
       |  471|	@param result The pointer to a CFRange supplied by the caller in
       |  472|			which the search result is stored.  Note that the length
       |  473|			of this range can be more than 1, if for instance the 
       |  474|			result is a composed character. If a pointer to an invalid
       |  475|			memory is specified, the behavior is undefined.
       |  476|	@result true, if at least a character which is a member of the character
       |  477|			set is found and result is filled, otherwise, false.
       |  478|*/
       |  479|CF_EXPORT Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result);
       |  480|
       |  481|/* Find range of bounds of the line(s) that span the indicated range (startIndex, numChars),
       |  482|   taking into account various possible line separator sequences (CR, CRLF, LF, and Unicode NextLine, LineSeparator, ParagraphSeparator).
       |  483|   All return values are "optional" (provide NULL if you don't want them)
       |  484|     lineBeginIndex: index of first character in line
       |  485|     lineEndIndex: index of first character of the next line (including terminating line separator characters)
       |  486|     contentsEndIndex: index of the first line separator character
       |  487|   Thus, lineEndIndex - lineBeginIndex is the number of chars in the line, including the line separators
       |  488|         contentsEndIndex - lineBeginIndex is the number of chars in the line w/out the line separators
       |  489|*/
       |  490|CF_EXPORT
       |  491|void CFStringGetLineBounds(CFStringRef theString, CFRange range, CFIndex *lineBeginIndex, CFIndex *lineEndIndex, CFIndex *contentsEndIndex); 
       |  492|
       |  493|/* Same as CFStringGetLineBounds(), however, will only look for paragraphs. Won't stop at Unicode NextLine or LineSeparator characters.
       |  494|*/
       |  495|CF_EXPORT
       |  496|void CFStringGetParagraphBounds(CFStringRef string, CFRange range, CFIndex *parBeginIndex, CFIndex *parEndIndex, CFIndex *contentsEndIndex) CF_AVAILABLE(10_5, 2_0);
       |  497|
       |  498|/*!
       |  499|	@function CFStringGetHyphenationLocationBeforeIndex
       |  500|	Retrieve the first potential hyphenation location found before the specified location.
       |  501|	@param string The CFString which is to be hyphenated.  If this
       |  502|                		parameter is not a valid CFString, the behavior is
       |  503|              		undefined.
       |  504|	@param location An index in the string.  If a valid hyphen index is returned, it 
       |  505|	                will be before this index.
       |  506|	@param limitRange The range of characters within the string to search. If
       |  507|			the range location or end point (defined by the location
       |  508|			plus length minus 1) are outside the index space of the
       |  509|			string (0 to N-1 inclusive, where N is the length of the
       |  510|			string), the behavior is undefined. If the range length is
       |  511|			negative, the behavior is undefined. The range may be empty
       |  512|			(length 0), in which case no hyphen location is generated.
       |  513|	@param options Reserved for future use.
       |  514|	@param locale Specifies which language's hyphenation conventions to use.
       |  515|			This must be a valid locale.  Hyphenation data is not available
       |  516|			for all locales.  You can use CFStringIsHyphenationAvailableForLocale
       |  517|			to test for availability of hyphenation data.
       |  518|	@param character The suggested hyphen character to insert.  Pass NULL if you
       |  519|			do not need this information.
       |  520|	@result an index in the string where it is appropriate to insert a hyphen, if
       |  521|			one exists; else kCFNotFound
       |  522|*/
       |  523|CF_EXPORT
       |  524|CFIndex CFStringGetHyphenationLocationBeforeIndex(CFStringRef string, CFIndex location, CFRange limitRange, CFOptionFlags options, CFLocaleRef locale, UTF32Char *character) CF_AVAILABLE(10_7, 4_2);
       |  525|
       |  526|CF_EXPORT
       |  527|Boolean CFStringIsHyphenationAvailableForLocale(CFLocaleRef locale) CF_AVAILABLE(10_7, 4_3);
       |  528|
       |  529|/*** Exploding and joining strings with a separator string ***/
       |  530|
       |  531|CF_EXPORT
       |  532|CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString);	/* Empty array returns empty string; one element array returns the element */
       |  533|
       |  534|CF_EXPORT
       |  535|CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString);	/* No separators in the string returns array with that string; string == sep returns two empty strings */
       |  536|
       |  537|
       |  538|/*** Parsing non-localized numbers from strings ***/
       |  539|
       |  540|CF_EXPORT
       |  541|SInt32 CFStringGetIntValue(CFStringRef str);		/* Skips whitespace; returns 0 on error, MAX or -MAX on overflow */
       |  542|
       |  543|CF_EXPORT
       |  544|double CFStringGetDoubleValue(CFStringRef str);	/* Skips whitespace; returns 0.0 on error */
       |  545|
       |  546|
       |  547|/*** MutableString functions ***/
       |  548|
       |  549|/* CFStringAppend("abcdef", "xxxxx") -> "abcdefxxxxx"
       |  550|   CFStringDelete("abcdef", CFRangeMake(2, 3)) -> "abf"
       |  551|   CFStringReplace("abcdef", CFRangeMake(2, 3), "xxxxx") -> "abxxxxxf"
       |  552|   CFStringReplaceAll("abcdef", "xxxxx") -> "xxxxx"
       |  553|*/
       |  554|CF_EXPORT
       |  555|void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString);
       |  556|
       |  557|CF_EXPORT
       |  558|void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars);
       |  559|
       |  560|CF_EXPORT
       |  561|void CFStringAppendPascalString(CFMutableStringRef theString, ConstStr255Param pStr, CFStringEncoding encoding);
       |  562|
       |  563|CF_EXPORT
       |  564|void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding);
       |  565|
       |  566|CF_EXPORT
       |  567|void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...) CF_FORMAT_FUNCTION(3,4);
       |  568|
       |  569|CF_EXPORT
       |  570|void CFStringAppendFormatAndArguments(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments) CF_FORMAT_FUNCTION(3,0);
       |  571|
       |  572|CF_EXPORT
       |  573|void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr);
       |  574|
       |  575|CF_EXPORT
       |  576|void CFStringDelete(CFMutableStringRef theString, CFRange range);
       |  577|
       |  578|CF_EXPORT
       |  579|void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement);
       |  580|
       |  581|CF_EXPORT
       |  582|void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement);	/* Replaces whole string */
       |  583|
       |  584|/* Replace all occurrences of target in rangeToSearch of theString with replacement.
       |  585|   Pays attention to kCFCompareCaseInsensitive, kCFCompareBackwards, kCFCompareNonliteral, and kCFCompareAnchored.
       |  586|   kCFCompareBackwards can be used to do the replacement starting from the end, which could give a different result.
       |  587|     ex. AAAAA, replace AA with B -> BBA or ABB; latter if kCFCompareBackwards
       |  588|   kCFCompareAnchored assures only anchored but multiple instances are found (the instances must be consecutive at start or end)
       |  589|     ex. AAXAA, replace A with B -> BBXBB or BBXAA; latter if kCFCompareAnchored
       |  590|   Returns number of replacements performed.
       |  591|*/
       |  592|CF_EXPORT
       |  593|CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions);
       |  594|
       |  595|
       |  596|/* This function will make the contents of a mutable CFString point directly at the specified UniChar array.
       |  597|   It works only with CFStrings created with CFStringCreateMutableWithExternalCharactersNoCopy().
       |  598|   This function does not free the previous buffer.
       |  599|   The string will be manipulated within the provided buffer (if any) until it outgrows capacity; then the
       |  600|     externalCharactersAllocator will be consulted for more memory.
       |  601|   See comments at the top of this file for more info.
       |  602|*/
       |  603|CF_EXPORT
       |  604|void CFStringSetExternalCharactersNoCopy(CFMutableStringRef theString, UniChar *chars, CFIndex length, CFIndex capacity);	/* Works only on specially created mutable strings! */
       |  605|
       |  606|/* CFStringPad() will pad or cut down a string to the specified size.
       |  607|   The pad string is used as the fill string; indexIntoPad specifies which character to start with.
       |  608|     CFStringPad("abc", " ", 9, 0) ->  "abc      "
       |  609|     CFStringPad("abc", ". ", 9, 1) -> "abc . . ."
       |  610|     CFStringPad("abcdef", ?, 3, ?) -> "abc"
       |  611|
       |  612|     CFStringTrim() will trim the specified string from both ends of the string.
       |  613|     CFStringTrimWhitespace() will do the same with white space characters (tab, newline, etc)
       |  614|     CFStringTrim("  abc ", " ") -> "abc"
       |  615|     CFStringTrim("* * * *abc * ", "* ") -> "*abc "
       |  616|*/
       |  617|CF_EXPORT
       |  618|void CFStringPad(CFMutableStringRef theString, CFStringRef padString, CFIndex length, CFIndex indexIntoPad);
       |  619|
       |  620|CF_EXPORT
       |  621|void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString);
       |  622|
       |  623|CF_EXPORT
       |  624|void CFStringTrimWhitespace(CFMutableStringRef theString);
       |  625|
       |  626|CF_EXPORT
       |  627|void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale);
       |  628|
       |  629|CF_EXPORT
       |  630|void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale);
       |  631|
       |  632|CF_EXPORT
       |  633|void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale);
       |  634|
       |  635|/*!
       |  636|	@typedef CFStringNormalizationForm
       |  637|	This is the type of Unicode normalization forms as described in
       |  638|	Unicode Technical Report #15. To normalize for use with file
       |  639|	system calls, use CFStringGetFileSystemRepresentation().
       |  640|*/
       |  641|typedef CF_ENUM(CFIndex, CFStringNormalizationForm) {
       |  642|	kCFStringNormalizationFormD = 0, // Canonical Decomposition
       |  643|	kCFStringNormalizationFormKD, // Compatibility Decomposition
       |  644|	kCFStringNormalizationFormC, // Canonical Decomposition followed by Canonical Composition
       |  645|	kCFStringNormalizationFormKC // Compatibility Decomposition followed by Canonical Composition
       |  646|};
       |  647|
       |  648|/*!
       |  649|	@function CFStringNormalize
       |  650|	Normalizes the string into the specified form as described in
       |  651|	Unicode Technical Report #15.
       |  652|	@param theString  The string which is to be normalized.  If this
       |  653|		parameter is not a valid mutable CFString, the behavior is
       |  654|		undefined.
       |  655|	@param theForm  The form into which the string is to be normalized.
       |  656|		If this parameter is not a valid CFStringNormalizationForm value,
       |  657|		the behavior is undefined.
       |  658|*/
       |  659|CF_EXPORT void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm);
       |  660|
       |  661|
       |  662|/*!
       |  663|	@function CFStringFold
       |  664|	Folds the string into the form specified by the flags.
       |  665|		Character foldings are operations that convert any of a set of characters
       |  666|		sharing similar semantics into a single representative from that set.
       |  667|		This function can be used to preprocess strings that are to be compared,
       |  668|		searched, or indexed.
       |  669|		Note that folding does not include normalization, so it is necessary
       |  670|		to use CFStringNormalize in addition to CFStringFold in order to obtain
       |  671|		the effect of kCFCompareNonliteral.
       |  672|	@param theString  The string which is to be folded.  If this parameter is not
       |  673|		a valid mutable CFString, the behavior is undefined.
       |  674|	@param theFlag  The equivalency flags which describes the character folding form.
       |  675|		Only those flags containing the word "insensitive" are recognized here; other flags are ignored.		
       |  676|		Folding with kCFCompareCaseInsensitive removes case distinctions in accordance with the mapping
       |  677|		specified by ftp://ftp.unicode.org/Public/UNIDATA/CaseFolding.txt.  Folding with
       |  678|		kCFCompareDiacriticInsensitive removes distinctions of accents and other diacritics.  Folding
       |  679|		with kCFCompareWidthInsensitive removes character width distinctions by mapping characters in
       |  680|		the range U+FF00-U+FFEF to their ordinary equivalents.
       |  681|	@param theLocale The locale tailoring the character folding behavior. If NULL,
       |  682|		it's considered to be the system locale returned from CFLocaleGetSystem().
       |  683|		If non-NULL and not a valid CFLocale object, the behavior is undefined.
       |  684|*/
       |  685|
       |  686|CF_EXPORT
       |  687|void CFStringFold(CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale) CF_AVAILABLE(10_5, 2_0);
       |  688|
       |  689|/* Perform string transliteration.  The transformation represented by transform is applied to the given range of string, modifying it in place. Only the specified range will be modified, but the transform may look at portions of the string outside that range for context. NULL range pointer causes the whole string to be transformed. On return, range is modified to reflect the new range corresponding to the original range. reverse indicates that the inverse transform should be used instead, if it exists. If the transform is successful, true is returned; if unsuccessful, false. Reasons for the transform being unsuccessful include an invalid transform identifier, or attempting to reverse an irreversible transform.
       |  690|
       |  691|You can pass one of the predefined transforms below, or any valid ICU transform ID as defined in the ICU User Guide. Note that we do not support arbitrary set of ICU transform rules.
       |  692|*/
       |  693|CF_EXPORT
       |  694|Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse);
       |  695|
       |  696|/* Transform identifiers for CFStringTransform()
       |  697|*/
       |  698|CF_EXPORT const CFStringRef kCFStringTransformStripCombiningMarks;
       |  699|CF_EXPORT const CFStringRef kCFStringTransformToLatin;
       |  700|CF_EXPORT const CFStringRef kCFStringTransformFullwidthHalfwidth;
       |  701|CF_EXPORT const CFStringRef kCFStringTransformLatinKatakana;
       |  702|CF_EXPORT const CFStringRef kCFStringTransformLatinHiragana;
       |  703|CF_EXPORT const CFStringRef kCFStringTransformHiraganaKatakana;
       |  704|CF_EXPORT const CFStringRef kCFStringTransformMandarinLatin;
       |  705|CF_EXPORT const CFStringRef kCFStringTransformLatinHangul;
       |  706|CF_EXPORT const CFStringRef kCFStringTransformLatinArabic;
       |  707|CF_EXPORT const CFStringRef kCFStringTransformLatinHebrew;
       |  708|CF_EXPORT const CFStringRef kCFStringTransformLatinThai;
       |  709|CF_EXPORT const CFStringRef kCFStringTransformLatinCyrillic;
       |  710|CF_EXPORT const CFStringRef kCFStringTransformLatinGreek;
       |  711|CF_EXPORT const CFStringRef kCFStringTransformToXMLHex;
       |  712|CF_EXPORT const CFStringRef kCFStringTransformToUnicodeName;
       |  713|CF_EXPORT const CFStringRef kCFStringTransformStripDiacritics CF_AVAILABLE(10_5, 2_0);
       |  714|
       |  715|
       |  716|/*** General encoding related functionality ***/
       |  717|
       |  718|/* This returns availability of the encoding on the system
       |  719|*/
       |  720|CF_EXPORT
       |  721|Boolean CFStringIsEncodingAvailable(CFStringEncoding encoding);
       |  722|
       |  723|/* This function returns list of available encodings.  The returned list is terminated with kCFStringEncodingInvalidId and owned by the system.
       |  724|*/
       |  725|CF_EXPORT
       |  726|const CFStringEncoding *CFStringGetListOfAvailableEncodings(void);
       |  727|
       |  728|/* Returns name of the encoding; non-localized.
       |  729|*/
       |  730|CF_EXPORT
       |  731|CFStringRef CFStringGetNameOfEncoding(CFStringEncoding encoding);
       |  732|
       |  733|/* ID mapping functions from/to Cocoa NSStringEncoding.  Returns kCFStringEncodingInvalidId if no mapping exists.
       |  734|*/
       |  735|CF_EXPORT
       |  736|unsigned long CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding);
       |  737|
       |  738|CF_EXPORT
       |  739|CFStringEncoding CFStringConvertNSStringEncodingToEncoding(unsigned long encoding);
       |  740|
       |  741|/* ID mapping functions from/to Microsoft Windows codepage (covers both OEM & ANSI).  Returns kCFStringEncodingInvalidId if no mapping exists.
       |  742|*/
       |  743|CF_EXPORT
       |  744|UInt32 CFStringConvertEncodingToWindowsCodepage(CFStringEncoding encoding);
       |  745|
       |  746|CF_EXPORT
       |  747|CFStringEncoding CFStringConvertWindowsCodepageToEncoding(UInt32 codepage);
       |  748|
       |  749|/* ID mapping functions from/to IANA registery charset names.  Returns kCFStringEncodingInvalidId if no mapping exists.
       |  750|*/
       |  751|CF_EXPORT
       |  752|CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString);
       |  753|
       |  754|CF_EXPORT
       |  755|CFStringRef  CFStringConvertEncodingToIANACharSetName(CFStringEncoding encoding);
       |  756|
       |  757|/* Returns the most compatible MacOS script value for the input encoding */
       |  758|/* i.e. kCFStringEncodingMacRoman -> kCFStringEncodingMacRoman */
       |  759|/*	kCFStringEncodingWindowsLatin1 -> kCFStringEncodingMacRoman */
       |  760|/*	kCFStringEncodingISO_2022_JP -> kCFStringEncodingMacJapanese */
       |  761|CF_EXPORT
       |  762|CFStringEncoding CFStringGetMostCompatibleMacStringEncoding(CFStringEncoding encoding);
       |  763|
       |  764|
       |  765|
       |  766|/* The next two functions allow fast access to the contents of a string, 
       |  767|   assuming you are doing sequential or localized accesses. To use, call
       |  768|   CFStringInitInlineBuffer() with a CFStringInlineBuffer (on the stack, say),
       |  769|   and a range in the string to look at. Then call CFStringGetCharacterFromInlineBuffer()
       |  770|   as many times as you want, with a index into that range (relative to the start
       |  771|   of that range). These are INLINE functions and will end up calling CFString only 
       |  772|   once in a while, to fill a buffer.  CFStringGetCharacterFromInlineBuffer() returns 0 if
       |  773|   a location outside the original range is specified.
       |  774|*/
       |  775|#define __kCFStringInlineBufferLength 64
       |  776|typedef struct {
       |  777|    UniChar buffer[__kCFStringInlineBufferLength];
       |  778|    CFStringRef theString;
       |  779|    const UniChar *directUniCharBuffer;
       |  780|    const char *directCStringBuffer;
       |  781|    CFRange rangeToBuffer;		/* Range in string to buffer */
       |  782|    CFIndex bufferedRangeStart;		/* Start of range currently buffered (relative to rangeToBuffer.location) */
       |  783|    CFIndex bufferedRangeEnd;		/* bufferedRangeStart + number of chars actually buffered */
       |  784|} CFStringInlineBuffer;
       |  785|
       |  786|#if defined(CF_INLINE)
       |  787|CF_INLINE void CFStringInitInlineBuffer(CFStringRef str, CFStringInlineBuffer *buf, CFRange range) {
       |  788|    buf->theString = str;
       |  789|    buf->rangeToBuffer = range;
       |  790|    buf->directCStringBuffer = (buf->directUniCharBuffer = CFStringGetCharactersPtr(str)) ? NULL : CFStringGetCStringPtr(str, kCFStringEncodingASCII);
       |  791|    buf->bufferedRangeStart = buf->bufferedRangeEnd = 0;
       |  792|}
       |  793|
       |  794|CF_INLINE UniChar CFStringGetCharacterFromInlineBuffer(CFStringInlineBuffer *buf, CFIndex idx) {
       |  795|    if (idx < 0 || idx >= buf->rangeToBuffer.length) return 0;
       |  796|    if (buf->directUniCharBuffer) return buf->directUniCharBuffer[idx + buf->rangeToBuffer.location];
       |  797|    if (buf->directCStringBuffer) return (UniChar)(buf->directCStringBuffer[idx + buf->rangeToBuffer.location]);
       |  798|    if (idx >= buf->bufferedRangeEnd || idx < buf->bufferedRangeStart) {
       |  799|	if ((buf->bufferedRangeStart = idx - 4) < 0) buf->bufferedRangeStart = 0;
       |  800|	buf->bufferedRangeEnd = buf->bufferedRangeStart + __kCFStringInlineBufferLength;
       |  801|	if (buf->bufferedRangeEnd > buf->rangeToBuffer.length) buf->bufferedRangeEnd = buf->rangeToBuffer.length;
       |  802|	CFStringGetCharacters(buf->theString, CFRangeMake(buf->rangeToBuffer.location + buf->bufferedRangeStart, buf->bufferedRangeEnd - buf->bufferedRangeStart), buf->buffer);
       |  803|    }
       |  804|    return buf->buffer[idx - buf->bufferedRangeStart];
       |  805|}
       |  806|
       |  807|#else
       |  808|/* If INLINE functions are not available, we do somewhat less powerful macros that work similarly (except be aware that the buf argument is evaluated multiple times).
       |  809|*/
       |  810|#define CFStringInitInlineBuffer(str, buf, range) \
       |  811|    do {(buf)->theString = str; (buf)->rangeToBuffer = range; (buf)->directCStringBuffer = ((buf)->directUniCharBuffer = CFStringGetCharactersPtr(str)) ? NULL : CFStringGetCStringPtr(str, kCFStringEncodingASCII);} while (0)
       |  812|
       |  813|#define CFStringGetCharacterFromInlineBuffer(buf, idx) \
       |  814|    (((idx) < 0 || (idx) >= (buf)->rangeToBuffer.length) ? 0 : ((buf)->directUniCharBuffer ? (buf)->directUniCharBuffer[(idx) + (buf)->rangeToBuffer.location] : ((buf)->directCStringBuffer ? (UniChar)((buf)->directCStringBuffer[(idx) + (buf)->rangeToBuffer.location]) : CFStringGetCharacterAtIndex((buf)->theString, (idx) + (buf)->rangeToBuffer.location))))
       |  815|
       |  816|#endif /* CF_INLINE */
       |  817|
       |  818|
       |  819|
       |  820|/* UTF-16 surrogate support
       |  821| */
       |  822|CF_INLINE Boolean CFStringIsSurrogateHighCharacter(UniChar character) {
       |  823|    return ((character >= 0xD800UL) && (character <= 0xDBFFUL) ? true : false);
       |  824|}
       |  825|
       |  826|CF_INLINE Boolean CFStringIsSurrogateLowCharacter(UniChar character) {
       |  827|    return ((character >= 0xDC00UL) && (character <= 0xDFFFUL) ? true : false);
       |  828|}
       |  829|
       |  830|CF_INLINE UTF32Char CFStringGetLongCharacterForSurrogatePair(UniChar surrogateHigh, UniChar surrogateLow) {
       |  831|    return (UTF32Char)(((surrogateHigh - 0xD800UL) << 10) + (surrogateLow - 0xDC00UL) + 0x0010000UL);
       |  832|}
       |  833|
       |  834|// Maps a UTF-32 character to a pair of UTF-16 surrogate characters. The buffer pointed by surrogates has to have space for at least 2 UTF-16 characters. Returns true if mapped to a surrogate pair.
       |  835|CF_INLINE Boolean CFStringGetSurrogatePairForLongCharacter(UTF32Char character, UniChar *surrogates) {
       |  836|    if ((character > 0xFFFFUL) && (character < 0x110000UL)) { // Non-BMP character
       |  837|        character -= 0x10000;
       |  838|        if (NULL != surrogates) {
       |  839|            surrogates[0] = (UniChar)((character >> 10) + 0xD800UL);
       |  840|            surrogates[1] = (UniChar)((character & 0x3FF) + 0xDC00UL);
       |  841|        }
       |  842|        return true;
       |  843|    } else {
       |  844|        if (NULL != surrogates) *surrogates = (UniChar)character;
       |  845|        return false;
       |  846|    }
       |  847|}
       |  848|
       |  849|/* Rest of the stuff in this file is private and should not be used directly
       |  850|*/
       |  851|/* For debugging only; output goes to stderr
       |  852|   Use CFShow() to printf the description of any CFType;
       |  853|   Use CFShowStr() to printf detailed info about a CFString
       |  854|*/
       |  855|CF_EXPORT
       |  856|void CFShow(CFTypeRef obj);
       |  857|
       |  858|CF_EXPORT
       |  859|void CFShowStr(CFStringRef str);
       |  860|
       |  861|/* This function is private and should not be used directly */
       |  862|CF_EXPORT
       |  863|CFStringRef  __CFStringMakeConstantString(const char *cStr) CF_FORMAT_ARGUMENT(1);	/* Private; do not use */
       |  864|
       |  865|CF_EXTERN_C_END
       |  866|CF_IMPLICIT_BRIDGING_DISABLED
       |  867|
       |  868|#endif /* ! __COREFOUNDATION_CFSTRING__ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/System/Library/Frameworks/Foundation.framework/Headers/NSBundle.h:
       |    1|/*	NSBundle.h
       |    2|	Copyright (c) 1994-2015, Apple Inc.  All rights reserved.
       |    3|*/
       |    4|
       |    5|#import <Foundation/NSObject.h>
       |    6|#import <Foundation/NSString.h>
       |    7|#import <Foundation/NSArray.h>
       |    8|#import <Foundation/NSDictionary.h>
       |    9|#import <Foundation/NSSet.h>
       |   10|#import <Foundation/NSProgress.h>
       |   11|
       |   12|@class NSString, NSURL, NSError, NSUUID, NSLock, NSNumber;
       |   13|
       |   14|NS_ASSUME_NONNULL_BEGIN
       |   15|
       |   16|/* Because NSBundle caches allocated instances, subclasses should be prepared
       |   17|   to receive an already initialized object back from [super initWithPath:] */
       |   18|@interface NSBundle : NSObject {
       |   19|@private
       |   20|    NSUInteger		_flags;
       |   21|    id		        _cfBundle;
       |   22|    NSUInteger		_reserved2;
       |   23|    Class		_principalClass;
       |   24|    id                  _initialPath;
       |   25|    id                  _resolvedPath;
       |   26|    id                  _reserved3;
       |   27|    id                  _lock;
       |   28|}
       |   29|
       |   30|/* Methods for creating or retrieving bundle instances. */
       |   31|+ (NSBundle *)mainBundle;
       |   32|+ (nullable instancetype)bundleWithPath:(NSString *)path;
       |   33|- (nullable instancetype)initWithPath:(NSString *)path NS_DESIGNATED_INITIALIZER;
       |   34|
       |   35|+ (nullable instancetype)bundleWithURL:(NSURL *)url NS_AVAILABLE(10_6, 4_0);
       |   36|- (nullable instancetype)initWithURL:(NSURL *)url NS_AVAILABLE(10_6, 4_0);
       |   37|
       |   38|+ (NSBundle *)bundleForClass:(Class)aClass;
       |   39|+ (nullable NSBundle *)bundleWithIdentifier:(NSString *)identifier;
       |   40|
       |   41|+ (NSArray<NSBundle *> *)allBundles;
       |   42|+ (NSArray<NSBundle *> *)allFrameworks;
       |   43|
       |   44|/* Methods for loading and unloading bundles. */
       |   45|- (BOOL)load;
       |   46|@property (readonly, getter=isLoaded) BOOL loaded;
       |   47|- (BOOL)unload;
       |   48|
  ------------------
  | AFStringFromNetworkReachabilityStatus:
  |      0|   36|- (nullable instancetype)initWithURL:(NSURL *)url NS_AVAILABLE(10_6, 4_0);
  |      0|   37|
  |      0|   38|+ (NSBundle *)bundleForClass:(Class)aClass;
  |      0|   39|+ (nullable NSBundle *)bundleWithIdentifier:(NSString *)identifier;
  |      0|   40|
  |      0|   41|+ (NSArray<NSBundle *> *)allBundles;
  |      0|   42|+ (NSArray<NSBundle *> *)allFrameworks;
  |      0|   43|
  |      0|   44|/* Methods for loading and unloading bundles. */
  |      0|   45|- (BOOL)load;
  |      0|   46|@property (readonly, getter=isLoaded) BOOL loaded;
  |      0|   47|- (BOOL)unload;
  |      0|   48|
  ------------------
       |   49|- (BOOL)preflightAndReturnError:(NSError **)error NS_AVAILABLE(10_5, 2_0);
       |   50|- (BOOL)loadAndReturnError:(NSError **)error NS_AVAILABLE(10_5, 2_0);
       |   51|
       |   52|/* Methods for locating various components of a bundle. */
       |   53|@property (readonly, copy) NSURL *bundleURL NS_AVAILABLE(10_6, 4_0);
       |   54|@property (nullable, readonly, copy) NSURL *resourceURL NS_AVAILABLE(10_6, 4_0);
       |   55|@property (nullable, readonly, copy) NSURL *executableURL NS_AVAILABLE(10_6, 4_0);
       |   56|- (nullable NSURL *)URLForAuxiliaryExecutable:(NSString *)executableName NS_AVAILABLE(10_6, 4_0);
       |   57|
       |   58|@property (nullable, readonly, copy) NSURL *privateFrameworksURL NS_AVAILABLE(10_6, 4_0);
       |   59|@property (nullable, readonly, copy) NSURL *sharedFrameworksURL NS_AVAILABLE(10_6, 4_0);
       |   60|@property (nullable, readonly, copy) NSURL *sharedSupportURL NS_AVAILABLE(10_6, 4_0);
       |   61|@property (nullable, readonly, copy) NSURL *builtInPlugInsURL NS_AVAILABLE(10_6, 4_0);
       |   62|
       |   63|@property (nullable, readonly, copy) NSURL *appStoreReceiptURL NS_AVAILABLE(10_7, 7_0);
       |   64|
       |   65|@property (readonly, copy) NSString *bundlePath;
       |   66|@property (nullable, readonly, copy) NSString *resourcePath;
       |   67|@property (nullable, readonly, copy) NSString *executablePath;
       |   68|- (nullable NSString *)pathForAuxiliaryExecutable:(NSString *)executableName;
       |   69|
       |   70|@property (nullable, readonly, copy) NSString *privateFrameworksPath;
       |   71|@property (nullable, readonly, copy) NSString *sharedFrameworksPath;
       |   72|@property (nullable, readonly, copy) NSString *sharedSupportPath;
       |   73|@property (nullable, readonly, copy) NSString *builtInPlugInsPath;
       |   74|
       |   75|/* Methods for locating bundle resources.  Instance methods locate resources in the bundle indicated by the receiver; class methods take an argument pointing to a bundle on disk.  In the class methods, bundleURL is a URL pointing to the location of a bundle on disk, and may not be nil; bundlePath is the path equivalent of bundleURL, an absolute path pointing to the location of a bundle on disk.  By contrast, subpath is a relative path to a subdirectory inside the relevant global or localized resource directory, and should be nil if the resource file in question is not in a subdirectory.  Where appropriate, localizationName is the name of a .lproj directory in the bundle, minus the .lproj extension; passing nil for localizationName retrieves only global resources, whereas using a method without this argument retrieves both global and localized resources (using the standard localization search algorithm).  */
       |   76|
       |   77|+ (nullable NSURL *)URLForResource:(nullable NSString *)name withExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath inBundleWithURL:(NSURL *)bundleURL NS_AVAILABLE(10_6, 4_0);
       |   78|+ (nullable NSArray<NSURL *> *)URLsForResourcesWithExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath inBundleWithURL:(NSURL *)bundleURL NS_AVAILABLE(10_6, 4_0);
       |   79|
       |   80|- (nullable NSURL *)URLForResource:(nullable NSString *)name withExtension:(nullable NSString *)ext NS_AVAILABLE(10_6, 4_0);
       |   81|- (nullable NSURL *)URLForResource:(nullable NSString *)name withExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath NS_AVAILABLE(10_6, 4_0);
       |   82|- (nullable NSURL *)URLForResource:(nullable NSString *)name withExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath localization:(nullable NSString *)localizationName NS_AVAILABLE(10_6, 4_0);
       |   83|
       |   84|- (nullable NSArray<NSURL *> *)URLsForResourcesWithExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath NS_AVAILABLE(10_6, 4_0);
       |   85|- (nullable NSArray<NSURL *> *)URLsForResourcesWithExtension:(nullable NSString *)ext subdirectory:(nullable NSString *)subpath localization:(nullable NSString *)localizationName NS_AVAILABLE(10_6, 4_0);
       |   86|
       |   87|+ (nullable NSString *)pathForResource:(nullable NSString *)name ofType:(nullable NSString *)ext inDirectory:(NSString *)bundlePath;
       |   88|+ (NSArray<NSString *> *)pathsForResourcesOfType:(nullable NSString *)ext inDirectory:(NSString *)bundlePath;
       |   89|
       |   90|- (nullable NSString *)pathForResource:(nullable NSString *)name ofType:(nullable NSString *)ext;
       |   91|- (nullable NSString *)pathForResource:(nullable NSString *)name ofType:(nullable NSString *)ext inDirectory:(nullable NSString *)subpath;
       |   92|- (nullable NSString *)pathForResource:(nullable NSString *)name ofType:(nullable NSString *)ext inDirectory:(nullable NSString *)subpath forLocalization:(nullable NSString *)localizationName;
       |   93|
       |   94|- (NSArray<NSString *> *)pathsForResourcesOfType:(nullable NSString *)ext inDirectory:(nullable NSString *)subpath;
       |   95|- (NSArray<NSString *> *)pathsForResourcesOfType:(nullable NSString *)ext inDirectory:(nullable NSString *)subpath forLocalization:(nullable NSString *)localizationName;
       |   96|
       |   97|/* Method for retrieving localized strings. */
       |   98|- (NSString *)localizedStringForKey:(NSString *)key value:(nullable NSString *)value table:(nullable NSString *)tableName NS_FORMAT_ARGUMENT(1);
       |   99|
       |  100|/* Methods for obtaining various information about a bundle. */
       |  101|@property (nullable, readonly, copy) NSString *bundleIdentifier;
       |  102|@property (nullable, readonly, copy) NSDictionary<NSString *, id> *infoDictionary;
       |  103|@property (nullable, readonly, copy) NSDictionary<NSString *, id> *localizedInfoDictionary;
       |  104|- (nullable id)objectForInfoDictionaryKey:(NSString *)key;
       |  105|- (nullable Class)classNamed:(NSString *)className;
       |  106|@property (nullable, readonly) Class principalClass;
       |  107|
       |  108|/* Methods for dealing with localizations. */
       |  109|@property (readonly, copy) NSArray<NSString *> *preferredLocalizations;	// a subset of this bundle's localizations, re-ordered into the preferred order for this process's current execution environment; the main bundle's preferred localizations indicate the language (of text) the user is most likely seeing in the UI
       |  110|
       |  111|@property (readonly, copy) NSArray<NSString *> *localizations;		// list of language names this bundle appears to be localized to
       |  112|@property (nullable, readonly, copy) NSString *developmentLocalization;
       |  113|
       |  114|+ (NSArray<NSString *> *)preferredLocalizationsFromArray:(NSArray<NSString *> *)localizationsArray;
       |  115|+ (NSArray<NSString *> *)preferredLocalizationsFromArray:(NSArray<NSString *> *)localizationsArray forPreferences:(nullable NSArray<NSString *> *)preferencesArray;
       |  116|
       |  117|/* Method for determining executable architectures. */
       |  118|enum {
       |  119|    NSBundleExecutableArchitectureI386      = 0x00000007,
       |  120|    NSBundleExecutableArchitecturePPC       = 0x00000012,
       |  121|    NSBundleExecutableArchitectureX86_64    = 0x01000007,
       |  122|    NSBundleExecutableArchitecturePPC64     = 0x01000012
       |  123|};
       |  124|
       |  125|@property (nullable, readonly, copy) NSArray<NSNumber *> *executableArchitectures NS_AVAILABLE(10_5, 2_0);
       |  126|
       |  127|@end
       |  128|
       |  129|#define NSLocalizedString(key, comment) \
       |  130|	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:nil]
       |  131|#define NSLocalizedStringFromTable(key, tbl, comment) \
      0|  132|	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:(tbl)]
       |  133|#define NSLocalizedStringFromTableInBundle(key, tbl, bundle, comment) \
       |  134|	    [bundle localizedStringForKey:(key) value:@"" table:(tbl)]
       |  135|#define NSLocalizedStringWithDefaultValue(key, tbl, bundle, val, comment) \
       |  136|	    [bundle localizedStringForKey:(key) value:(val) table:(tbl)]
       |  137|
       |  138|@interface NSString (NSBundleExtensionMethods)
       |  139|
       |  140|/* For strings with length variations, such as from a stringsdict file, this method returns the variant at the given width. If there is no variant at the given width, the one for the next smaller width is returned. And if there are none smaller, the smallest available is returned. For strings without variations, this method returns self. The unit that width is expressed in is decided by the application or framework. But it is intended to be some measurement indicative of the context a string would fit best to avoid truncation and wasted space.
       |  141|*/ 
       |  142|- (NSString *)variantFittingPresentationWidth:(NSInteger)width NS_AVAILABLE(10_11, 9_0);
       |  143|
       |  144|@end
       |  145|
       |  146|FOUNDATION_EXPORT NSString * const NSBundleDidLoadNotification;
       |  147|FOUNDATION_EXPORT NSString * const NSLoadedClasses;	// notification key
       |  148|
       |  149|
       |  150|/*
       |  151| The NSBundleResourceRequest class is used to interact with the on demand resource loading system.
       |  152| 
       |  153| The purpose of the system is to allow an application to download certain resources on demand, when they are required. This also means that the system can purge a resource from disk when it is no longer required, which will save disk space. This class describes which resources are required, makes the request and reports progress, allows the app to specify how long during its execution that they are required.
       |  154| 
       |  155| Resources are downloaded into the application container, and are made available via the standard NSBundle resource lookup API.
       |  156| 
       |  157| The request object itself is lightweight. You may create as many as you need, for example to request the same set of tags in different components of your application.
  ------------------
  | -[AFHTTPResponseSerializer validateResponse:data:error:]:
  |      0|  113|
  |      0|  114|+ (NSArray<NSString *> *)preferredLocalizationsFromArray:(NSArray<NSString *> *)localizationsArray;
  |      0|  115|+ (NSArray<NSString *> *)preferredLocalizationsFromArray:(NSArray<NSString *> *)localizationsArray forPreferences:(nullable NSArray<NSString *> *)preferencesArray;
  |      0|  116|
  |      0|  117|/* Method for determining executable architectures. */
  |      0|  118|enum {
  |      0|  119|    NSBundleExecutableArchitectureI386      = 0x00000007,
  |      0|  120|    NSBundleExecutableArchitecturePPC       = 0x00000012,
  |      0|  121|    NSBundleExecutableArchitectureX86_64    = 0x01000007,
  |      0|  122|    NSBundleExecutableArchitecturePPC64     = 0x01000012
  |      0|  123|};
  |      0|  124|
  |      0|  125|@property (nullable, readonly, copy) NSArray<NSNumber *> *executableArchitectures NS_AVAILABLE(10_5, 2_0);
  |      0|  126|
  |      0|  127|@end
  |      0|  128|
  |      0|  129|#define NSLocalizedString(key, comment) \
  |      0|  130|	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:nil]
  |      0|  131|#define NSLocalizedStringFromTable(key, tbl, comment) \
  |      0|  132|	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:(tbl)]
  |      0|  133|#define NSLocalizedStringFromTableInBundle(key, tbl, bundle, comment) \
  |      0|  134|	    [bundle localizedStringForKey:(key) value:@"" table:(tbl)]
  |      0|  135|#define NSLocalizedStringWithDefaultValue(key, tbl, bundle, val, comment) \
  |      0|  136|	    [bundle localizedStringForKey:(key) value:(val) table:(tbl)]
  |      0|  137|
  |      0|  138|@interface NSString (NSBundleExtensionMethods)
  |      0|  139|
  |      0|  140|/* For strings with length variations, such as from a stringsdict file, this method returns the variant at the given width. If there is no variant at the given width, the one for the next smaller width is returned. And if there are none smaller, the smallest available is returned. For strings without variations, this method returns self. The unit that width is expressed in is decided by the application or framework. But it is intended to be some measurement indicative of the context a string would fit best to avoid truncation and wasted space.
  |      0|  141|*/ 
  |      0|  142|- (NSString *)variantFittingPresentationWidth:(NSInteger)width NS_AVAILABLE(10_11, 9_0);
  |      0|  143|
  |      0|  144|@end
  |      0|  145|
  |      0|  146|FOUNDATION_EXPORT NSString * const NSBundleDidLoadNotification;
  |      0|  147|FOUNDATION_EXPORT NSString * const NSLoadedClasses;	// notification key
  |      0|  148|
  |      0|  149|
  |      0|  150|/*
  |      0|  151| The NSBundleResourceRequest class is used to interact with the on demand resource loading system.
  |      0|  152| 
  |      0|  153| The purpose of the system is to allow an application to download certain resources on demand, when they are required. This also means that the system can purge a resource from disk when it is no longer required, which will save disk space. This class describes which resources are required, makes the request and reports progress, allows the app to specify how long during its execution that they are required.
  |      0|  154| 
  |      0|  155| Resources are downloaded into the application container, and are made available via the standard NSBundle resource lookup API.
  |      0|  156| 
  |      0|  157| The request object itself is lightweight. You may create as many as you need, for example to request the same set of tags in different components of your application.
  ------------------
       |  158|*/
       |  159|NS_CLASS_AVAILABLE(NA, 9_0)
       |  160|@interface NSBundleResourceRequest : NSObject <NSProgressReporting>
       |  161|
       |  162|- (instancetype)init NS_UNAVAILABLE;
       |  163|
       |  164|/*
       |  165| A tag and bundle are required arguments to the init methods. The tag argument is required and it must exist in the manifest of the specified bundle. The bundle argument describes an existing bundle which was built with on demand resources support. Any resources downloaded can be found using the standard NSBundle resource lookup API once the request is completed. If no bundle is specified then the main bundle is used.
       |  166| */
       |  167|- (instancetype)initWithTags:(NSSet<NSString *> *)tags;
       |  168|- (instancetype)initWithTags:(NSSet<NSString *> *)tags bundle:(NSBundle *)bundle NS_DESIGNATED_INITIALIZER;
       |  169|
       |  170|/*
       |  171| Provides a hint to the resource loading system as to the loading priority of this request. Values are limited to between 0 and 1, with 1 being the highest priority. The default priority is 0.5.
       |  172| 
       |  173| The exact meaning of the value is up to your application. The system will prefer to act on requests that have a higher priority (from the same application). You may change the priority at any time, even after a request has started. The system will make a best attempt to take the new priority into account.
       |  174| */
       |  175|@property double loadingPriority;
       |  176|
       |  177|/*
       |  178| The tags this request will load.
       |  179| */
       |  180|@property (readonly, copy) NSSet<NSString *> *tags;
       |  181|
       |  182|/*
       |  183| The bundle object that will hold the requested resources. After the -beginAccessingResourcesWithCompletionHandler: callback is invoked, you may use the standard bundle lookup APIs on this bundle object to find your resources.
       |  184| */
       |  185|@property (readonly, strong) NSBundle *bundle;
       |  186|
       |  187|/*
       |  188| Ask the system to fetch the resources that were part of the tag set in this request. Resources will not be purged while in use by the application (as indicated by the application using this begin API paired with a call to -endAccessingResources). If an application has too many fetched resources and the system is unable to reserve enough space for newly requested tags, the request may return an error.
       |  189| 
       |  190| When you are finished with the resources and they may be purged off the disk, invoke -endAccessingResources. If the request object is deallocated, it will also inform the system that the resources are no longer in use.
       |  191| 
       |  192| The completion block will be invoked on a non-main serial queue when the resources are available or an error has occurred. An example of a possible error that may be reported is the lack of a network connection or a problem connecting to the on-demand servers.
       |  193| 
       |  194| Fetch requests are reference counted across the application. So if you have two requests outstanding with the same set of tags, each may be used independently without having to know about any global state. However, each NSBundleResourceRequest object may only be used once.
       |  195| 
       |  196| If you cancel an outstanding request (via the cancel method on the NSProgress object, or cancelling a parent progress object you have created) the completion handler argument to this method will be called back with an NSUserCancelledError in the NSCocoaErrorDomain.
       |  197| 
       |  198| Be sure to always invoke the -endAccessingResources method to balance a call to the begin method, even in the case of an error in the completion handler.
       |  199| 
       |  200| If you want to access the resources again, create a new NSBundleResourceRequest object.
       |  201| */
       |  202|- (void)beginAccessingResourcesWithCompletionHandler:(void (^)(NSError * __nullable error))completionHandler;
       |  203|
       |  204|/*
       |  205| Inform the system that you wish to begin accessing the resources that are part of this request, but do not attempt to download any content over the network. The completion handler will be invoked with a YES argument if the resources are available.
       |  206| 
       |  207| If the resources were available, then you must invoke the -endAccessingResources method once you are done accessing them. If the resources were not available, then you may invoke the -beginAccessingResourcesWithCompletionHandler: method to initiate a download of the resources.
       |  208|*/
       |  209|- (void)conditionallyBeginAccessingResourcesWithCompletionHandler:(void (^)(BOOL resourcesAvailable))completionHandler;
       |  210|
       |  211|/*
       |  212| Informs the system that you are finished with the resources that were part of the tag set in this request. Call this after you no longer need the resources to be available on disk. It is important to invoke this method to make room for newly requested resources. This method may only be invoked if you have received a callback from -beginAccessingResourcesWithCompletionHandler:. To cancel an in-progress request, invoke cancel on the -progress property.
       |  213| */
       |  214|- (void)endAccessingResources;
       |  215|
       |  216|/*
       |  217| Progress for the request. The progress object will be valid at initialization and begin updating after the -beginAccessingResourcesWithCompletionHandler: method is called.
       |  218|*/
       |  219|@property (readonly, strong) NSProgress *progress;
       |  220|
       |  221|@end
       |  222|
       |  223|@interface NSBundle (NSBundleResourceRequestAdditions)
       |  224|
       |  225|/* Set a preservation priority for tags that are included in this bundle for the On Demand Resources system. Preservation priorities may be between 0.0 and 1.0, with higher values being the last choice for purging by the system. The exact meaning of this value is up to your application as it only has meaning within the set of tags your application uses.
       |  226|   
       |  227|   The default value is 0.0.
       |  228| 
       |  229|   This method will throw an exception if the receiver bundle has no on demand resource tag information.
       |  230|*/
       |  231|- (void)setPreservationPriority:(double)priority forTags:(NSSet<NSString *> *)tags NS_AVAILABLE(NA, 9_0);
       |  232|- (double)preservationPriorityForTag:(NSString *)tag NS_AVAILABLE(NA, 9_0);
       |  233|
       |  234|@end
       |  235|
       |  236|/*
       |  237| This notification is posted to the default notification center when the resource request system detects a low disk space condition.
       |  238| 
       |  239| If the application is in the background, the system needs more space, and the application does not free up enough in response to the notification then the application may be killed. The application can free up space by calling -endAccessingResources on any outstanding requests. This will inform the system that you are done with those resources and it may purge the content to make room for a new request.
       |  240| 
       |  241| Note that this notification may not be the same as low disk space on the system, as applications can have a smaller quota.
       |  242| */
       |  243|FOUNDATION_EXPORT NSString * const NSBundleResourceRequestLowDiskSpaceNotification NS_AVAILABLE(NA, 9_0);
       |  244|
       |  245|/* Use this value for the loadingPriority property if the user is doing nothing but waiting on the result of this request. The system will dedicate the maximum amount of resources available to finishing this request as soon as possible.
       |  246| */
       |  247|FOUNDATION_EXPORT double const NSBundleResourceRequestLoadingPriorityUrgent NS_AVAILABLE(NA, 9_0);
       |  248|
       |  249|NS_ASSUME_NONNULL_END

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/System/Library/Frameworks/Foundation.framework/Headers/NSException.h:
       |    1|/*	NSException.h
       |    2|	Copyright (c) 1994-2015, Apple Inc. All rights reserved.
       |    3|*/
       |    4|
       |    5|#import <Foundation/NSObject.h>
       |    6|#import <Foundation/NSString.h>
       |    7|#import <stdarg.h>
       |    8|#import <setjmp.h>
       |    9|
       |   10|@class NSString, NSDictionary, NSArray<ObjectType>, NSNumber;
       |   11|
       |   12|NS_ASSUME_NONNULL_BEGIN
       |   13|
       |   14|/***************	Generic Exception names		***************/
       |   15|
       |   16|FOUNDATION_EXPORT NSString * const NSGenericException;
       |   17|FOUNDATION_EXPORT NSString * const NSRangeException;
       |   18|FOUNDATION_EXPORT NSString * const NSInvalidArgumentException;
       |   19|FOUNDATION_EXPORT NSString * const NSInternalInconsistencyException;
       |   20|
       |   21|FOUNDATION_EXPORT NSString * const NSMallocException;
       |   22|
       |   23|FOUNDATION_EXPORT NSString * const NSObjectInaccessibleException;
       |   24|FOUNDATION_EXPORT NSString * const NSObjectNotAvailableException;
       |   25|FOUNDATION_EXPORT NSString * const NSDestinationInvalidException;
       |   26|    
       |   27|FOUNDATION_EXPORT NSString * const NSPortTimeoutException;
       |   28|FOUNDATION_EXPORT NSString * const NSInvalidSendPortException;
       |   29|FOUNDATION_EXPORT NSString * const NSInvalidReceivePortException;
       |   30|FOUNDATION_EXPORT NSString * const NSPortSendException;
       |   31|FOUNDATION_EXPORT NSString * const NSPortReceiveException;
       |   32|
       |   33|FOUNDATION_EXPORT NSString * const NSOldStyleException;
       |   34|
       |   35|/***************	Exception object	***************/
       |   36|
       |   37|#if __OBJC2__
       |   38|__attribute__((__objc_exception__))
       |   39|#endif
       |   40|@interface NSException : NSObject <NSCopying, NSCoding> {
       |   41|    @private
       |   42|    NSString		*name;
       |   43|    NSString		*reason;
       |   44|    NSDictionary	*userInfo;
       |   45|    id			reserved;
       |   46|}
       |   47|
       |   48|+ (NSException *)exceptionWithName:(NSString *)name reason:(nullable NSString *)reason userInfo:(nullable NSDictionary *)userInfo;
       |   49|- (instancetype)initWithName:(NSString *)aName reason:(nullable NSString *)aReason userInfo:(nullable NSDictionary *)aUserInfo NS_DESIGNATED_INITIALIZER;
       |   50|
       |   51|@property (readonly, copy) NSString *name;
       |   52|@property (nullable, readonly, copy) NSString *reason;
       |   53|@property (nullable, readonly, copy) NSDictionary *userInfo;
       |   54|
       |   55|@property (readonly, copy) NSArray<NSNumber *> *callStackReturnAddresses NS_AVAILABLE(10_5, 2_0);
       |   56|@property (readonly, copy) NSArray<NSString *> *callStackSymbols NS_AVAILABLE(10_6, 4_0);
       |   57|
       |   58|- (void)raise;
       |   59|
       |   60|@end
       |   61|
       |   62|@interface NSException (NSExceptionRaisingConveniences)
       |   63|
       |   64|+ (void)raise:(NSString *)name format:(NSString *)format, ... NS_FORMAT_FUNCTION(2,3);
       |   65|+ (void)raise:(NSString *)name format:(NSString *)format arguments:(va_list)argList NS_FORMAT_FUNCTION(2,0);
       |   66|
       |   67|@end
       |   68|
       |   69|
       |   70|#define NS_DURING		@try {
       |   71|#define NS_HANDLER		} @catch (NSException *localException) {
       |   72|#define NS_ENDHANDLER		}
       |   73|#define NS_VALUERETURN(v,t)	return (v)
       |   74|#define NS_VOIDRETURN		return
       |   75|
       |   76|
       |   77|typedef void NSUncaughtExceptionHandler(NSException *exception);
       |   78|
       |   79|FOUNDATION_EXPORT NSUncaughtExceptionHandler * __nullable NSGetUncaughtExceptionHandler(void);
       |   80|FOUNDATION_EXPORT void NSSetUncaughtExceptionHandler(NSUncaughtExceptionHandler * __nullable);
       |   81|
       |   82|
       |   83|#if __clang__
       |   84|#define __PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |   85|    _Pragma("clang diagnostic push") \
       |   86|    _Pragma("clang diagnostic ignored \"-Wformat-extra-args\"")
       |   87|
       |   88|#define __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS _Pragma("clang diagnostic pop")
       |   89|#else
       |   90|#define __PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS
       |   91|#define __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |   92|#endif
       |   93|
  ------------------
  | -[AFHTTPSessionManager setRequestSerializer:]:
  |      0|   89|#else
  |      0|   90|#define __PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS
  |      0|   91|#define __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
  |      0|   92|#endif
  |      0|   93|
  ------------------
       |   94|@class NSAssertionHandler;
       |   95|
       |   96|#if (defined(__STDC_VERSION__) && (199901L <= __STDC_VERSION__)) || (defined(__cplusplus) && (201103L <= __cplusplus))
       |   97|
       |   98|#if !defined(NS_BLOCK_ASSERTIONS)
       |   99|
  ------------------
  | -[AFHTTPSessionManager setResponseSerializer:]:
  |      0|   95|
  |      0|   96|#if (defined(__STDC_VERSION__) && (199901L <= __STDC_VERSION__)) || (defined(__cplusplus) && (201103L <= __cplusplus))
  |      0|   97|
  |      0|   98|#if !defined(NS_BLOCK_ASSERTIONS)
  |      0|   99|
  ------------------
       |  100|#if !defined(_NSAssertBody)
       |  101|#define NSAssert(condition, desc, ...)	\
      0|  102|    do {				\
      0|  103|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
      0|  104|	if (!(condition)) {		\
      0|  105|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
      0|  106|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
      0|  107|	    [[NSAssertionHandler currentHandler] handleFailureInMethod:_cmd \
      0|  108|		object:self file:__assert_file__ \
      0|  109|	    	lineNumber:__LINE__ description:(desc), ##__VA_ARGS__]; \
      0|  110|	}				\
      0|  111|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
      0|  112|    } while(0)
       |  113|#endif
       |  114|
       |  115|#if !defined(_NSCAssertBody)
       |  116|#define NSCAssert(condition, desc, ...) \
       |  117|    do {				\
       |  118|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  119|	if (!(condition)) {		\
       |  120|            NSString *__assert_fn__ = [NSString stringWithUTF8String:__PRETTY_FUNCTION__]; \
       |  121|            __assert_fn__ = __assert_fn__ ? __assert_fn__ : @"<Unknown Function>"; \
       |  122|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
       |  123|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
       |  124|	    [[NSAssertionHandler currentHandler] handleFailureInFunction:__assert_fn__ \
       |  125|		file:__assert_file__ \
       |  126|	    	lineNumber:__LINE__ description:(desc), ##__VA_ARGS__]; \
       |  127|	}				\
       |  128|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
       |  129|    } while(0)
       |  130|#endif
       |  131|
       |  132|#else // NS_BLOCK_ASSERTIONS defined
       |  133|
       |  134|#if !defined(_NSAssertBody)
       |  135|#define NSAssert(condition, desc, ...) do {} while (0)
       |  136|#endif
       |  137|
       |  138|#if !defined(_NSCAssertBody)
       |  139|#define NSCAssert(condition, desc, ...) do {} while (0)
       |  140|#endif
       |  141|
       |  142|#endif
       |  143|
       |  144|#if !defined(_NSAssertBody)
       |  145|#define NSAssert1(condition, desc, arg1) NSAssert((condition), (desc), (arg1))
       |  146|#define NSAssert2(condition, desc, arg1, arg2) NSAssert((condition), (desc), (arg1), (arg2))
       |  147|#define NSAssert3(condition, desc, arg1, arg2, arg3) NSAssert((condition), (desc), (arg1), (arg2), (arg3))
       |  148|#define NSAssert4(condition, desc, arg1, arg2, arg3, arg4) NSAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4))
       |  149|#define NSAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5) NSAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5))
      0|  150|#define NSParameterAssert(condition) NSAssert((condition), @"Invalid parameter not satisfying: %@", @#condition)
       |  151|#endif
       |  152|
       |  153|#if !defined(_NSCAssertBody)
       |  154|#define NSCAssert1(condition, desc, arg1) NSCAssert((condition), (desc), (arg1))
       |  155|#define NSCAssert2(condition, desc, arg1, arg2) NSCAssert((condition), (desc), (arg1), (arg2))
       |  156|#define NSCAssert3(condition, desc, arg1, arg2, arg3) NSCAssert((condition), (desc), (arg1), (arg2), (arg3))
  ------------------
  | -[UIWebView(AFNetworking) loadRequest:MIMEType:textEncodingName:progress:success:failure:]:
  |      0|  119|	if (!(condition)) {		\
  |      0|  120|            NSString *__assert_fn__ = [NSString stringWithUTF8String:__PRETTY_FUNCTION__]; \
  |      0|  121|            __assert_fn__ = __assert_fn__ ? __assert_fn__ : @"<Unknown Function>"; \
  |      0|  122|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
  |      0|  123|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
  |      0|  124|	    [[NSAssertionHandler currentHandler] handleFailureInFunction:__assert_fn__ \
  |      0|  125|		file:__assert_file__ \
  |      0|  126|	    	lineNumber:__LINE__ description:(desc), ##__VA_ARGS__]; \
  |      0|  127|	}				\
  |      0|  128|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
  |      0|  129|    } while(0)
  |      0|  130|#endif
  |      0|  131|
  |      0|  132|#else // NS_BLOCK_ASSERTIONS defined
  |      0|  133|
  |      0|  134|#if !defined(_NSAssertBody)
  |      0|  135|#define NSAssert(condition, desc, ...) do {} while (0)
  |      0|  136|#endif
  |      0|  137|
  |      0|  138|#if !defined(_NSCAssertBody)
  |      0|  139|#define NSCAssert(condition, desc, ...) do {} while (0)
  |      0|  140|#endif
  |      0|  141|
  |      0|  142|#endif
  |      0|  143|
  |      0|  144|#if !defined(_NSAssertBody)
  |      0|  145|#define NSAssert1(condition, desc, arg1) NSAssert((condition), (desc), (arg1))
  |      0|  146|#define NSAssert2(condition, desc, arg1, arg2) NSAssert((condition), (desc), (arg1), (arg2))
  |      0|  147|#define NSAssert3(condition, desc, arg1, arg2, arg3) NSAssert((condition), (desc), (arg1), (arg2), (arg3))
  |      0|  148|#define NSAssert4(condition, desc, arg1, arg2, arg3, arg4) NSAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4))
  |      0|  149|#define NSAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5) NSAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5))
  |      0|  150|#define NSParameterAssert(condition) NSAssert((condition), @"Invalid parameter not satisfying: %@", @#condition)
  |      0|  151|#endif
  |      0|  152|
  |      0|  153|#if !defined(_NSCAssertBody)
  |      0|  154|#define NSCAssert1(condition, desc, arg1) NSCAssert((condition), (desc), (arg1))
  |      0|  155|#define NSCAssert2(condition, desc, arg1, arg2) NSCAssert((condition), (desc), (arg1), (arg2))
  |      0|  156|#define NSCAssert3(condition, desc, arg1, arg2, arg3) NSCAssert((condition), (desc), (arg1), (arg2), (arg3))
  ------------------
       |  157|#define NSCAssert4(condition, desc, arg1, arg2, arg3, arg4) NSCAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4))
       |  158|#define NSCAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5) NSCAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5))
       |  159|#define NSCParameterAssert(condition) NSCAssert((condition), @"Invalid parameter not satisfying: %@", @#condition)
       |  160|#endif
       |  161|
       |  162|#endif
       |  163|
       |  164|
       |  165|/* Non-vararg implementation of asserts (ignore) */
       |  166|#if !defined(NS_BLOCK_ASSERTIONS)
       |  167|#if !defined(_NSAssertBody)
       |  168|#define _NSAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  169|    do {						\
       |  170|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  171|	if (!(condition)) {				\
       |  172|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
       |  173|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
       |  174|	    [[NSAssertionHandler currentHandler] handleFailureInMethod:_cmd object:self file:__assert_file__ \
       |  175|	    	lineNumber:__LINE__ description:(desc), (arg1), (arg2), (arg3), (arg4), (arg5)];	\
       |  176|	}						\
       |  177|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
       |  178|    } while(0)
       |  179|#endif
       |  180|#if !defined(_NSCAssertBody)
       |  181|#define _NSCAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  182|    do {						\
       |  183|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  184|	if (!(condition)) {				\
       |  185|            NSString *__assert_fn__ = [NSString stringWithUTF8String:__PRETTY_FUNCTION__]; \
       |  186|            __assert_fn__ = __assert_fn__ ? __assert_fn__ : @"<Unknown Function>"; \
       |  187|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
       |  188|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
       |  189|	    [[NSAssertionHandler currentHandler] handleFailureInFunction:__assert_fn__ file:__assert_file__ \
       |  190|	    	lineNumber:__LINE__ description:(desc), (arg1), (arg2), (arg3), (arg4), (arg5)];	\
       |  191|	}						\
       |  192|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
       |  193|    } while(0)
       |  194|#endif
       |  195|#else
       |  196|#if !defined(_NSAssertBody)
       |  197|#define _NSAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)
       |  198|#endif
       |  199|#if !defined(_NSCAssertBody)
       |  200|#define _NSCAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)
       |  201|#endif
       |  202|#endif
       |  203|
       |  204|
       |  205|/*
       |  206| * Asserts to use in Objective-C method bodies
       |  207| */
       |  208| 
       |  209|#if !defined(NSAssert)
       |  210|#define NSAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  211|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  212|    _NSAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5)) \
       |  213|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  214|
       |  215|#define NSAssert4(condition, desc, arg1, arg2, arg3, arg4)	\
       |  216|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  217|    _NSAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), 0) \
       |  218|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  219|
       |  220|#define NSAssert3(condition, desc, arg1, arg2, arg3)	\
       |  221|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  222|    _NSAssertBody((condition), (desc), (arg1), (arg2), (arg3), 0, 0) \
       |  223|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  224|
       |  225|#define NSAssert2(condition, desc, arg1, arg2)		\
       |  226|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  227|    _NSAssertBody((condition), (desc), (arg1), (arg2), 0, 0, 0) \
       |  228|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  229|
       |  230|#define NSAssert1(condition, desc, arg1)		\
       |  231|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  232|    _NSAssertBody((condition), (desc), (arg1), 0, 0, 0, 0) \
       |  233|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  234|
       |  235|#define NSAssert(condition, desc)			\
       |  236|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  237|    _NSAssertBody((condition), (desc), 0, 0, 0, 0, 0) \
       |  238|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  239|#endif
       |  240|
       |  241|#if !defined(NSParameterAssert)
       |  242|#define NSParameterAssert(condition)			\
       |  243|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  244|    _NSAssertBody((condition), @"Invalid parameter not satisfying: %s", #condition, 0, 0, 0, 0) \
       |  245|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  246|#endif
       |  247|
       |  248|
       |  249|#if !defined(NSCAssert)
       |  250|#define NSCAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  251|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  252|    _NSCAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5)) \
       |  253|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  254|
       |  255|#define NSCAssert4(condition, desc, arg1, arg2, arg3, arg4)	\
       |  256|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  257|    _NSCAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), 0) \
       |  258|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  259|
       |  260|#define NSCAssert3(condition, desc, arg1, arg2, arg3)	\
       |  261|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  262|    _NSCAssertBody((condition), (desc), (arg1), (arg2), (arg3), 0, 0) \
       |  263|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  264|
       |  265|#define NSCAssert2(condition, desc, arg1, arg2)	\
       |  266|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  267|    _NSCAssertBody((condition), (desc), (arg1), (arg2), 0, 0, 0) \
       |  268|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  269|
       |  270|#define NSCAssert1(condition, desc, arg1)		\
       |  271|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  272|    _NSCAssertBody((condition), (desc), (arg1), 0, 0, 0, 0) \
       |  273|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  274|
       |  275|#define NSCAssert(condition, desc)			\
       |  276|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  277|    _NSCAssertBody((condition), (desc), 0, 0, 0, 0, 0) \
       |  278|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  279|#endif
       |  280|
       |  281|#if !defined(NSCParameterAssert)
       |  282|#define NSCParameterAssert(condition)			\
       |  283|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  284|    _NSCAssertBody((condition), @"Invalid parameter not satisfying: %s", #condition, 0, 0, 0, 0) \
       |  285|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  286|#endif
       |  287|
       |  288|
       |  289|FOUNDATION_EXPORT NSString * const NSAssertionHandlerKey NS_AVAILABLE(10_6, 4_0);
       |  290|
       |  291|@interface NSAssertionHandler : NSObject {
       |  292|    @private
       |  293|    void *_reserved;
       |  294|}
       |  295|
       |  296|+ (NSAssertionHandler *)currentHandler;
       |  297|
       |  298|- (void)handleFailureInMethod:(SEL)selector object:(id)object file:(NSString *)fileName lineNumber:(NSInteger)line description:(nullable NSString *)format,... NS_FORMAT_FUNCTION(5,6);
       |  299|
       |  300|- (void)handleFailureInFunction:(NSString *)functionName file:(NSString *)fileName lineNumber:(NSInteger)line description:(nullable NSString *)format,... NS_FORMAT_FUNCTION(4,5);
       |  301|
       |  302|@end
       |  303|
       |  304|NS_ASSUME_NONNULL_END

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/System/Library/Frameworks/Foundation.framework/Headers/NSObjCRuntime.h:
       |    1|/*	NSObjCRuntime.h
       |    2|	Copyright (c) 1994-2015, Apple Inc. All rights reserved.
       |    3|*/
       |    4|
       |    5|#include <TargetConditionals.h>
       |    6|#include <Availability.h>
       |    7|
       |    8|#if (TARGET_OS_MAC && !(TARGET_OS_EMBEDDED || TARGET_OS_IPHONE)) || (TARGET_OS_EMBEDDED || TARGET_OS_IPHONE)
       |    9|#include <objc/NSObjCRuntime.h>
       |   10|#include <stdarg.h>
       |   11|#include <stdint.h>
       |   12|#include <limits.h>
       |   13|#include <AvailabilityMacros.h>
       |   14|#endif
       |   15|
       |   16|#if defined(__cplusplus)
       |   17|#define FOUNDATION_EXTERN extern "C"
       |   18|#else
       |   19|#define FOUNDATION_EXTERN extern
       |   20|#endif
       |   21|
       |   22|#if TARGET_OS_WIN32
       |   23|
       |   24|    #if defined(NSBUILDINGFOUNDATION)
       |   25|        #define FOUNDATION_EXPORT FOUNDATION_EXTERN __declspec(dllexport)
       |   26|    #else
       |   27|        #define FOUNDATION_EXPORT FOUNDATION_EXTERN __declspec(dllimport)
       |   28|    #endif
       |   29|
       |   30|    #define FOUNDATION_IMPORT FOUNDATION_EXTERN __declspec(dllimport)
       |   31|
       |   32|#else
       |   33|    #define FOUNDATION_EXPORT  FOUNDATION_EXTERN
       |   34|    #define FOUNDATION_IMPORT FOUNDATION_EXTERN
       |   35|#endif
       |   36|
       |   37|#if !defined(NS_INLINE)
       |   38|    #if defined(__GNUC__)
       |   39|        #define NS_INLINE static __inline__ __attribute__((always_inline))
       |   40|    #elif defined(__MWERKS__) || defined(__cplusplus)
       |   41|        #define NS_INLINE static inline
       |   42|    #elif defined(_MSC_VER)
       |   43|        #define NS_INLINE static __inline
       |   44|    #elif TARGET_OS_WIN32
       |   45|        #define NS_INLINE static __inline__
       |   46|    #endif
       |   47|#endif
       |   48|
       |   49|#if !defined(FOUNDATION_STATIC_INLINE)
       |   50|#define FOUNDATION_STATIC_INLINE static __inline__
       |   51|#endif
       |   52|
       |   53|#if !defined(FOUNDATION_EXTERN_INLINE)
       |   54|#define FOUNDATION_EXTERN_INLINE extern __inline__
       |   55|#endif
       |   56|
       |   57|#if !defined(NS_REQUIRES_NIL_TERMINATION)
       |   58|    #if TARGET_OS_WIN32
       |   59|        #define NS_REQUIRES_NIL_TERMINATION
       |   60|    #else
       |   61|        #if defined(__APPLE_CC__) && (__APPLE_CC__ >= 5549)
       |   62|            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel(0,1)))
       |   63|        #else
       |   64|            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel))
       |   65|        #endif
       |   66|    #endif
       |   67|#endif
       |   68|
       |   69|#if !defined(NS_BLOCKS_AVAILABLE)
       |   70|    #if __BLOCKS__ && (MAC_OS_X_VERSION_10_6 <= MAC_OS_X_VERSION_MAX_ALLOWED || __IPHONE_4_0 <= __IPHONE_OS_VERSION_MAX_ALLOWED)
       |   71|        #define NS_BLOCKS_AVAILABLE 1
       |   72|    #else
       |   73|        #define NS_BLOCKS_AVAILABLE 0
       |   74|    #endif
       |   75|#endif
       |   76|
       |   77|// Marks APIs whose iOS versions are nonatomic, that is cannot be set/get from multiple threads safely without additional synchronization
       |   78|#if !defined(NS_NONATOMIC_IOSONLY)
       |   79|    #if TARGET_OS_IPHONE
       |   80|	#define NS_NONATOMIC_IOSONLY nonatomic
  ------------------
  | AFPercentEscapedStringFromString:
  |      0|   47|#endif
  |      0|   48|
  |      0|   49|#if !defined(FOUNDATION_STATIC_INLINE)
  |      0|   50|#define FOUNDATION_STATIC_INLINE static __inline__
  |      0|   51|#endif
  |      0|   52|
  |      0|   53|#if !defined(FOUNDATION_EXTERN_INLINE)
  |      0|   54|#define FOUNDATION_EXTERN_INLINE extern __inline__
  |      0|   55|#endif
  |      0|   56|
  |      0|   57|#if !defined(NS_REQUIRES_NIL_TERMINATION)
  |      0|   58|    #if TARGET_OS_WIN32
  |      0|   59|        #define NS_REQUIRES_NIL_TERMINATION
  |      0|   60|    #else
  |      0|   61|        #if defined(__APPLE_CC__) && (__APPLE_CC__ >= 5549)
  |      0|   62|            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel(0,1)))
  |      0|   63|        #else
  |      0|   64|            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel))
  |      0|   65|        #endif
  |      0|   66|    #endif
  |      0|   67|#endif
  |      0|   68|
  |      0|   69|#if !defined(NS_BLOCKS_AVAILABLE)
  |      0|   70|    #if __BLOCKS__ && (MAC_OS_X_VERSION_10_6 <= MAC_OS_X_VERSION_MAX_ALLOWED || __IPHONE_4_0 <= __IPHONE_OS_VERSION_MAX_ALLOWED)
  |      0|   71|        #define NS_BLOCKS_AVAILABLE 1
  |      0|   72|    #else
  |      0|   73|        #define NS_BLOCKS_AVAILABLE 0
  |      0|   74|    #endif
  |      0|   75|#endif
  |      0|   76|
  |      0|   77|// Marks APIs whose iOS versions are nonatomic, that is cannot be set/get from multiple threads safely without additional synchronization
  |      0|   78|#if !defined(NS_NONATOMIC_IOSONLY)
  |      0|   79|    #if TARGET_OS_IPHONE
  |      0|   80|	#define NS_NONATOMIC_IOSONLY nonatomic
  ------------------
       |   81|    #else
       |   82|        #if __has_feature(objc_property_explicit_atomic)
       |   83|            #define NS_NONATOMIC_IOSONLY atomic
       |   84|        #else
       |   85|            #define NS_NONATOMIC_IOSONLY
       |   86|        #endif
       |   87|    #endif
       |   88|#endif
       |   89|
       |   90|// Use NS_NONATOMIC_IOSONLY instead of this older macro
       |   91|#if !defined(NS_NONATOMIC_IPHONEONLY)
       |   92|#define NS_NONATOMIC_IPHONEONLY NS_NONATOMIC_IOSONLY
       |   93|#endif
       |   94|
       |   95|// Marks APIs which format strings by taking a format string and optional varargs as arguments
       |   96|#if !defined(NS_FORMAT_FUNCTION)
       |   97|    #if (__GNUC__*10+__GNUC_MINOR__ >= 42) && (TARGET_OS_MAC || TARGET_OS_EMBEDDED)
       |   98|	#define NS_FORMAT_FUNCTION(F,A) __attribute__((format(__NSString__, F, A)))
       |   99|    #else
       |  100|	#define NS_FORMAT_FUNCTION(F,A)
       |  101|    #endif
       |  102|#endif
       |  103|
       |  104|// Marks APIs which are often used to process (take and return) format strings, so they can be used in place of a constant format string parameter in APIs
       |  105|#if !defined(NS_FORMAT_ARGUMENT)
       |  106|    #if defined(__clang__)
       |  107|	#define NS_FORMAT_ARGUMENT(A) __attribute__ ((format_arg(A)))
       |  108|    #else
       |  109|	#define NS_FORMAT_ARGUMENT(A)
       |  110|    #endif
       |  111|#endif
       |  112|
       |  113|// Some compilers provide the capability to test if certain features are available. This macro provides a compatibility path for other compilers.
       |  114|#ifndef __has_feature
       |  115|#define __has_feature(x) 0
       |  116|#endif
       |  117|
       |  118|#ifndef __has_extension
       |  119|#define __has_extension(x) 0
       |  120|#endif
       |  121|
       |  122|// Some compilers provide the capability to test if certain attributes are available. This macro provides a compatibility path for other compilers.
       |  123|#ifndef __has_attribute
       |  124|#define __has_attribute(x) 0
       |  125|#endif
       |  126|
       |  127|// Marks methods and functions which return an object that needs to be released by the caller but whose names are not consistent with Cocoa naming rules. The recommended fix to this is to rename the methods or functions, but this macro can be used to let the clang static analyzer know of any exceptions that cannot be fixed.
       |  128|// This macro is ONLY to be used in exceptional circumstances, not to annotate functions which conform to the Cocoa naming rules.
       |  129|#if __has_feature(attribute_ns_returns_retained)
       |  130|#define NS_RETURNS_RETAINED __attribute__((ns_returns_retained))
       |  131|#else
       |  132|#define NS_RETURNS_RETAINED
       |  133|#endif
       |  134|
       |  135|// Marks methods and functions which return an object that may need to be retained by the caller but whose names are not consistent with Cocoa naming rules. The recommended fix to this is to rename the methods or functions, but this macro can be used to let the clang static analyzer know of any exceptions that cannot be fixed.
       |  136|// This macro is ONLY to be used in exceptional circumstances, not to annotate functions which conform to the Cocoa naming rules.
       |  137|#if __has_feature(attribute_ns_returns_not_retained)
       |  138|#define NS_RETURNS_NOT_RETAINED __attribute__((ns_returns_not_retained))
       |  139|#else
       |  140|#define NS_RETURNS_NOT_RETAINED
       |  141|#endif
       |  142|
       |  143|#ifndef NS_RETURNS_INNER_POINTER
       |  144|#if __has_attribute(objc_returns_inner_pointer)
       |  145|#define NS_RETURNS_INNER_POINTER __attribute__((objc_returns_inner_pointer))
       |  146|#else
       |  147|#define NS_RETURNS_INNER_POINTER
       |  148|#endif
       |  149|#endif
       |  150|
       |  151|// Marks methods and functions which cannot be used when compiling in automatic reference counting mode.
       |  152|#if __has_feature(objc_arc)
       |  153|#define NS_AUTOMATED_REFCOUNT_UNAVAILABLE __attribute__((unavailable("not available in automatic reference counting mode")))
       |  154|#else
       |  155|#define NS_AUTOMATED_REFCOUNT_UNAVAILABLE
       |  156|#endif
       |  157|
       |  158|// Marks classes which cannot participate in the ARC weak reference feature.
       |  159|#if __has_attribute(objc_arc_weak_reference_unavailable)
       |  160|#define NS_AUTOMATED_REFCOUNT_WEAK_UNAVAILABLE __attribute__((objc_arc_weak_reference_unavailable))
       |  161|#else
       |  162|#define NS_AUTOMATED_REFCOUNT_WEAK_UNAVAILABLE
       |  163|#endif
       |  164|
       |  165|// Marks classes that must specify @dynamic or @synthesize for properties in their @implementation (property getters & setters will not be synthesized unless the @synthesize directive is used)
       |  166|#if __has_attribute(objc_requires_property_definitions)
       |  167|#define NS_REQUIRES_PROPERTY_DEFINITIONS __attribute__((objc_requires_property_definitions)) 
       |  168|#else
       |  169|#define NS_REQUIRES_PROPERTY_DEFINITIONS
       |  170|#endif
       |  171|
       |  172|// Decorates methods in which the receiver may be replaced with the result of the method. 
       |  173|#if __has_feature(attribute_ns_consumes_self)
       |  174|#define NS_REPLACES_RECEIVER __attribute__((ns_consumes_self)) NS_RETURNS_RETAINED
       |  175|#else
       |  176|#define NS_REPLACES_RECEIVER
       |  177|#endif
       |  178|
       |  179|#if __has_feature(attribute_ns_consumed)
       |  180|#define NS_RELEASES_ARGUMENT __attribute__((ns_consumed))
       |  181|#else
       |  182|#define NS_RELEASES_ARGUMENT
       |  183|#endif
       |  184|
       |  185|// Mark local variables of type 'id' or pointer-to-ObjC-object-type so that values stored into that local variable are not aggressively released by the compiler during optimization, but are held until either the variable is assigned to again, or the end of the scope (such as a compound statement, or method definition) of the local variable.
       |  186|#ifndef NS_VALID_UNTIL_END_OF_SCOPE
       |  187|#if __has_attribute(objc_precise_lifetime)
       |  188|#define NS_VALID_UNTIL_END_OF_SCOPE __attribute__((objc_precise_lifetime))
       |  189|#else
       |  190|#define NS_VALID_UNTIL_END_OF_SCOPE
       |  191|#endif
       |  192|#endif
       |  193|
       |  194|// Annotate classes which are root classes as really being root classes
       |  195|#ifndef NS_ROOT_CLASS
       |  196|#if __has_attribute(objc_root_class)
       |  197|#define NS_ROOT_CLASS __attribute__((objc_root_class))
       |  198|#else
       |  199|#define NS_ROOT_CLASS
       |  200|#endif
       |  201|#endif
       |  202|
       |  203|#ifndef NS_REQUIRES_SUPER
       |  204|#if __has_attribute(objc_requires_super)
       |  205|#define NS_REQUIRES_SUPER __attribute__((objc_requires_super))
       |  206|#else
       |  207|#define NS_REQUIRES_SUPER
       |  208|#endif
       |  209|#endif
       |  210|
       |  211|#ifndef NS_DESIGNATED_INITIALIZER
       |  212|#if __has_attribute(objc_designated_initializer)
       |  213|#define NS_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
       |  214|#else
       |  215|#define NS_DESIGNATED_INITIALIZER
       |  216|#endif
       |  217|#endif
       |  218|
       |  219|#ifndef NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION
       |  220|#if __has_attribute(objc_protocol_requires_explicit_implementation)
       |  221|#define NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION __attribute__((objc_protocol_requires_explicit_implementation))
       |  222|#else
       |  223|#define NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION
       |  224|#endif
       |  225|#endif
       |  226|
       |  227|#if !__has_feature(objc_instancetype)
       |  228|#undef instancetype
       |  229|#define instancetype id
       |  230|#endif
       |  231|
       |  232|#if !defined(NS_UNAVAILABLE)
       |  233|#define NS_UNAVAILABLE UNAVAILABLE_ATTRIBUTE
       |  234|#endif
       |  235|
       |  236|#if !defined(__unsafe_unretained)
       |  237|#define __unsafe_unretained
       |  238|#endif
       |  239|
       |  240|#if TARGET_OS_WIN32
       |  241|#import <objc/objc.h>
       |  242|#include <stdarg.h>
       |  243|#include <stdint.h>
       |  244|#include <limits.h>
       |  245|#endif
       |  246|
       |  247|#include <CoreFoundation/CFAvailability.h>
       |  248|
       |  249|#define NS_AVAILABLE(_mac, _ios) CF_AVAILABLE(_mac, _ios)
       |  250|#define NS_AVAILABLE_MAC(_mac) CF_AVAILABLE_MAC(_mac)
       |  251|#define NS_AVAILABLE_IOS(_ios) CF_AVAILABLE_IOS(_ios)
       |  252|
       |  253|#define NS_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, ...) CF_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, __VA_ARGS__)
       |  254|#define NS_DEPRECATED_MAC(_macIntro, _macDep, ...) CF_DEPRECATED_MAC(_macIntro, _macDep, __VA_ARGS__)
       |  255|#define NS_DEPRECATED_IOS(_iosIntro, _iosDep, ...) CF_DEPRECATED_IOS(_iosIntro, _iosDep, __VA_ARGS__)
       |  256|
       |  257|#define NS_ENUM_AVAILABLE(_mac, _ios) CF_ENUM_AVAILABLE(_mac, _ios)
       |  258|#define NS_ENUM_AVAILABLE_MAC(_mac) CF_ENUM_AVAILABLE_MAC(_mac)
       |  259|#define NS_ENUM_AVAILABLE_IOS(_ios) CF_ENUM_AVAILABLE_IOS(_ios)
       |  260|
       |  261|#define NS_ENUM_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, ...) CF_ENUM_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, __VA_ARGS__)
       |  262|#define NS_ENUM_DEPRECATED_MAC(_macIntro, _macDep, ...) CF_ENUM_DEPRECATED_MAC(_macIntro, _macDep, __VA_ARGS__)
       |  263|#define NS_ENUM_DEPRECATED_IOS(_iosIntro, _iosDep, ...) CF_ENUM_DEPRECATED_IOS(_iosIntro, _iosDep, __VA_ARGS__)
       |  264|
       |  265|#define NS_AVAILABLE_IPHONE(_ios) CF_AVAILABLE_IOS(_ios)
       |  266|#define NS_DEPRECATED_IPHONE(_iosIntro, _iosDep) CF_DEPRECATED_IOS(_iosIntro, _iosDep)
       |  267|
       |  268|/* NS_ENUM supports the use of one or two arguments. The first argument is always the integer type used for the values of the enum. The second argument is an optional type name for the macro. When specifying a type name, you must precede the macro with 'typedef' like so:
       |  269| 
       |  270|typedef NS_ENUM(NSInteger, NSComparisonResult) {
       |  271|    ...
       |  272|};
       |  273| 
       |  274|If you do not specify a type name, do not use 'typedef'. For example:
       |  275| 
       |  276|NS_ENUM(NSInteger) {
       |  277|    ...
       |  278|};
       |  279|*/
       |  280|#define NS_ENUM(...) CF_ENUM(__VA_ARGS__)
       |  281|#define NS_OPTIONS(_type, _name) CF_OPTIONS(_type, _name)
       |  282|
       |  283|// This macro is to be used by system frameworks to support the weak linking of classes. Weak linking is supported on iOS 3.1 and Mac OS X 10.6.8 or later.
       |  284|#if (__MAC_OS_X_VERSION_MIN_REQUIRED >= __MAC_10_6 || __IPHONE_OS_VERSION_MIN_REQUIRED >= __IPHONE_3_1) && \
       |  285|    ((__has_feature(objc_weak_class) || \
       |  286|     (defined(__llvm__) && defined(__APPLE_CC__) && (__APPLE_CC__ >= 5658)) || \
       |  287|     (defined(__APPLE_CC__) && (__APPLE_CC__ >= 5666))))
       |  288|#define NS_CLASS_AVAILABLE(_mac, _ios) __attribute__((visibility("default"))) NS_AVAILABLE(_mac, _ios)
       |  289|#define NS_CLASS_DEPRECATED(_mac, _macDep, _ios, _iosDep, ...) __attribute__((visibility("default"))) NS_DEPRECATED(_mac, _macDep, _ios, _iosDep, __VA_ARGS__)
       |  290|#else
       |  291|// class weak import is not supported
       |  292|#define NS_CLASS_AVAILABLE(_mac, _ios)
       |  293|#define NS_CLASS_DEPRECATED(_mac, _macDep, _ios, _iosDep, ...)
       |  294|#endif
       |  295|
       |  296|#define NS_CLASS_AVAILABLE_IOS(_ios) NS_CLASS_AVAILABLE(NA, _ios)
       |  297|#define NS_CLASS_AVAILABLE_MAC(_mac) NS_CLASS_AVAILABLE(_mac, NA)
       |  298|#define NS_CLASS_DEPRECATED_MAC(_macIntro, _macDep, ...) NS_CLASS_DEPRECATED(_macIntro, _macDep, NA, NA, __VA_ARGS__)
       |  299|#define NS_CLASS_DEPRECATED_IOS(_iosIntro, _iosDep, ...) NS_CLASS_DEPRECATED(NA, NA, _iosIntro, _iosDep, __VA_ARGS__)
       |  300|
       |  301|#define NS_EXTENSION_UNAVAILABLE(_msg)      __OS_EXTENSION_UNAVAILABLE(_msg)
       |  302|#define NS_EXTENSION_UNAVAILABLE_MAC(_msg)  __OSX_EXTENSION_UNAVAILABLE(_msg)
       |  303|#define NS_EXTENSION_UNAVAILABLE_IOS(_msg)  __IOS_EXTENSION_UNAVAILABLE(_msg)
       |  304|
       |  305|#define NS_SWIFT_UNAVAILABLE(_msg) CF_SWIFT_UNAVAILABLE(_msg)
       |  306|
       |  307|#define NS_ASSUME_NONNULL_BEGIN _Pragma("clang assume_nonnull begin")
       |  308|#define NS_ASSUME_NONNULL_END   _Pragma("clang assume_nonnull end")
       |  309|
       |  310|#define NS_REFINED_FOR_SWIFT CF_REFINED_FOR_SWIFT
       |  311|
       |  312|#define NS_SWIFT_NAME(_name) CF_SWIFT_NAME(_name)
       |  313|
       |  314|#if __has_attribute(swift_error)
       |  315|#define NS_SWIFT_NOTHROW __attribute__((swift_error(none)))
       |  316|#else
       |  317|#define NS_SWIFT_NOTHROW
       |  318|#endif
       |  319|
       |  320|
       |  321|NS_ASSUME_NONNULL_BEGIN
       |  322|
       |  323|FOUNDATION_EXPORT double NSFoundationVersionNumber;
       |  324|
       |  325|#if TARGET_OS_MAC
       |  326|#define NSFoundationVersionNumber10_0	397.40
       |  327|#define NSFoundationVersionNumber10_1	425.00
       |  328|#define NSFoundationVersionNumber10_1_1	425.00
       |  329|#define NSFoundationVersionNumber10_1_2	425.00
       |  330|#define NSFoundationVersionNumber10_1_3	425.00
       |  331|#define NSFoundationVersionNumber10_1_4	425.00
       |  332|#define NSFoundationVersionNumber10_2	462.00
       |  333|#define NSFoundationVersionNumber10_2_1	462.00
       |  334|#define NSFoundationVersionNumber10_2_2	462.00
       |  335|#define NSFoundationVersionNumber10_2_3	462.00
       |  336|#define NSFoundationVersionNumber10_2_4	462.00
       |  337|#define NSFoundationVersionNumber10_2_5	462.00
       |  338|#define NSFoundationVersionNumber10_2_6	462.00
       |  339|#define NSFoundationVersionNumber10_2_7	462.70
       |  340|#define NSFoundationVersionNumber10_2_8	462.70
       |  341|#define NSFoundationVersionNumber10_3	500.00
       |  342|#define NSFoundationVersionNumber10_3_1	500.00
       |  343|#define NSFoundationVersionNumber10_3_2	500.30
       |  344|#define NSFoundationVersionNumber10_3_3	500.54
       |  345|#define NSFoundationVersionNumber10_3_4	500.56
       |  346|#define NSFoundationVersionNumber10_3_5	500.56
       |  347|#define NSFoundationVersionNumber10_3_6	500.56
       |  348|#define NSFoundationVersionNumber10_3_7	500.56
       |  349|#define NSFoundationVersionNumber10_3_8	500.56
       |  350|#define NSFoundationVersionNumber10_3_9	500.58
       |  351|#define NSFoundationVersionNumber10_4	567.00
       |  352|#define NSFoundationVersionNumber10_4_1	567.00
       |  353|#define NSFoundationVersionNumber10_4_2	567.12
       |  354|#define NSFoundationVersionNumber10_4_3	567.21
       |  355|#define NSFoundationVersionNumber10_4_4_Intel	567.23
       |  356|#define NSFoundationVersionNumber10_4_4_PowerPC	567.21
       |  357|#define NSFoundationVersionNumber10_4_5	567.25
       |  358|#define NSFoundationVersionNumber10_4_6	567.26
       |  359|#define NSFoundationVersionNumber10_4_7	567.27
       |  360|#define NSFoundationVersionNumber10_4_8	567.28
       |  361|#define NSFoundationVersionNumber10_4_9	567.29
       |  362|#define NSFoundationVersionNumber10_4_10	567.29
       |  363|#define NSFoundationVersionNumber10_4_11	567.36
       |  364|#define NSFoundationVersionNumber10_5	677.00
       |  365|#define NSFoundationVersionNumber10_5_1	677.10
       |  366|#define NSFoundationVersionNumber10_5_2 677.15
       |  367|#define NSFoundationVersionNumber10_5_3 677.19
       |  368|#define NSFoundationVersionNumber10_5_4 677.19
       |  369|#define NSFoundationVersionNumber10_5_5 677.21
       |  370|#define NSFoundationVersionNumber10_5_6 677.22
       |  371|#define NSFoundationVersionNumber10_5_7 677.24
       |  372|#define NSFoundationVersionNumber10_5_8 677.26
       |  373|#define NSFoundationVersionNumber10_6 751.00
       |  374|#define NSFoundationVersionNumber10_6_1 751.00
       |  375|#define NSFoundationVersionNumber10_6_2 751.14
       |  376|#define NSFoundationVersionNumber10_6_3 751.21
       |  377|#define NSFoundationVersionNumber10_6_4 751.29
       |  378|#define NSFoundationVersionNumber10_6_5 751.42
       |  379|#define NSFoundationVersionNumber10_6_6 751.53
       |  380|#define NSFoundationVersionNumber10_6_7 751.53
       |  381|#define NSFoundationVersionNumber10_6_8 751.62
       |  382|#define NSFoundationVersionNumber10_7 833.10
       |  383|#define NSFoundationVersionNumber10_7_1 833.10
       |  384|#define NSFoundationVersionNumber10_7_2 833.20
       |  385|#define NSFoundationVersionNumber10_7_3 833.24
       |  386|#define NSFoundationVersionNumber10_7_4 833.25
       |  387|#define NSFoundationVersionNumber10_8 945.00
       |  388|#define NSFoundationVersionNumber10_8_1 945.00
       |  389|#define NSFoundationVersionNumber10_8_2 945.11
       |  390|#define NSFoundationVersionNumber10_8_3 945.16
       |  391|#define NSFoundationVersionNumber10_8_4 945.18
       |  392|#define NSFoundationVersionNumber10_9 1056
       |  393|#define NSFoundationVersionNumber10_9_1 1056
       |  394|#define NSFoundationVersionNumber10_9_2 1056.13
       |  395|#define NSFoundationVersionNumber10_10 1151.16
       |  396|#define NSFoundationVersionNumber10_10_1 1151.16
       |  397|#define NSFoundationVersionNumber10_10_2 1152.14
       |  398|#define NSFoundationVersionNumber10_10_3 1153.20
       |  399|#endif
       |  400|
       |  401|#if TARGET_OS_IPHONE
       |  402|#define NSFoundationVersionNumber_iPhoneOS_2_0	678.24
       |  403|#define NSFoundationVersionNumber_iPhoneOS_2_1  678.26
       |  404|#define NSFoundationVersionNumber_iPhoneOS_2_2  678.29
       |  405|#define NSFoundationVersionNumber_iPhoneOS_3_0  678.47
       |  406|#define NSFoundationVersionNumber_iPhoneOS_3_1  678.51
       |  407|#define NSFoundationVersionNumber_iPhoneOS_3_2  678.60
       |  408|#define NSFoundationVersionNumber_iOS_4_0  751.32
       |  409|#define NSFoundationVersionNumber_iOS_4_1  751.37
       |  410|#define NSFoundationVersionNumber_iOS_4_2  751.49
       |  411|#define NSFoundationVersionNumber_iOS_4_3  751.49
       |  412|#define NSFoundationVersionNumber_iOS_5_0  881.00
       |  413|#define NSFoundationVersionNumber_iOS_5_1  890.10
       |  414|#define NSFoundationVersionNumber_iOS_6_0  992.00
       |  415|#define NSFoundationVersionNumber_iOS_6_1  993.00
       |  416|#define NSFoundationVersionNumber_iOS_7_0 1047.20
       |  417|#define NSFoundationVersionNumber_iOS_7_1 1047.25
      0|  418|#define NSFoundationVersionNumber_iOS_8_0 1140.11
       |  419|#define NSFoundationVersionNumber_iOS_8_1 1141.1
       |  420|#define NSFoundationVersionNumber_iOS_8_2 1142.14
       |  421|#define NSFoundationVersionNumber_iOS_8_3 1144.17
       |  422|#define NSFoundationVersionNumber_iOS_8_4 1144.17
       |  423|#endif
       |  424|
       |  425|#if TARGET_OS_WIN32
       |  426|typedef long NSInteger;
       |  427|typedef unsigned long NSUInteger;
       |  428|
       |  429|#define NSIntegerMax    LONG_MAX
       |  430|#define NSIntegerMin    LONG_MIN
       |  431|#define NSUIntegerMax   ULONG_MAX
       |  432|
       |  433|#define NSINTEGER_DEFINED 1
       |  434|#endif
       |  435|
       |  436|@class NSString, Protocol;
       |  437|
       |  438|FOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);
       |  439|FOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);
       |  440|
       |  441|FOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);
       |  442|FOUNDATION_EXPORT Class __nullable NSClassFromString(NSString *aClassName);
       |  443|
       |  444|FOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) NS_AVAILABLE(10_5, 2_0);
       |  445|FOUNDATION_EXPORT Protocol * __nullable NSProtocolFromString(NSString *namestr) NS_AVAILABLE(10_5, 2_0);
       |  446|
       |  447|FOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * __nullable sizep, NSUInteger * __nullable alignp);
       |  448|
       |  449|FOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2);
       |  450|FOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0);
       |  451|
       |  452|typedef NS_ENUM(NSInteger, NSComparisonResult) {NSOrderedAscending = -1L, NSOrderedSame, NSOrderedDescending};
       |  453|
       |  454|#if NS_BLOCKS_AVAILABLE
       |  455|typedef NSComparisonResult (^NSComparator)(id obj1, id obj2);
       |  456|#endif
       |  457|
       |  458|typedef NS_OPTIONS(NSUInteger, NSEnumerationOptions) {
       |  459|    NSEnumerationConcurrent = (1UL << 0),
       |  460|    NSEnumerationReverse = (1UL << 1),
       |  461|};
       |  462|
       |  463|typedef NS_OPTIONS(NSUInteger, NSSortOptions) {
       |  464|    NSSortConcurrent = (1UL << 0),
       |  465|    NSSortStable = (1UL << 4),
       |  466|};
       |  467|
       |  468|/* The following Quality of Service (QoS) classifications are used to indicate to the system the nature and importance of work.  They are used by the system to manage a variety of resources.  Higher QoS classes receive more resources than lower ones during resource contention. */
       |  469|typedef NS_ENUM(NSInteger, NSQualityOfService) {
       |  470|    /* UserInteractive QoS is used for work directly involved in providing an interactive UI such as processing events or drawing to the screen. */
       |  471|    NSQualityOfServiceUserInteractive = 0x21,
       |  472|    
       |  473|    /* UserInitiated QoS is used for performing work that has been explicitly requested by the user and for which results must be immediately presented in order to allow for further user interaction.  For example, loading an email after a user has selected it in a message list. */
       |  474|    NSQualityOfServiceUserInitiated = 0x19,
       |  475|    
       |  476|    /* Utility QoS is used for performing work which the user is unlikely to be immediately waiting for the results.  This work may have been requested by the user or initiated automatically, does not prevent the user from further interaction, often operates at user-visible timescales and may have its progress indicated to the user by a non-modal progress indicator.  This work will run in an energy-efficient manner, in deference to higher QoS work when resources are constrained.  For example, periodic content updates or bulk file operations such as media import. */
       |  477|    NSQualityOfServiceUtility = 0x11,
       |  478|    
       |  479|    /* Background QoS is used for work that is not user initiated or visible.  In general, a user is unaware that this work is even happening and it will run in the most efficient manner while giving the most deference to higher QoS work.  For example, pre-fetching content, search indexing, backups, and syncing of data with external systems. */
       |  480|    NSQualityOfServiceBackground = 0x09,
       |  481|
       |  482|    /* Default QoS indicates the absence of QoS information.  Whenever possible QoS information will be inferred from other sources.  If such inference is not possible, a QoS between UserInitiated and Utility will be used. */
       |  483|    NSQualityOfServiceDefault = -1
       |  484|} NS_ENUM_AVAILABLE(10_10, 8_0);
       |  485|
       |  486|static const NSInteger NSNotFound = NSIntegerMax;
       |  487|
       |  488|NS_ASSUME_NONNULL_END
       |  489|
       |  490|#if !defined(YES)
       |  491|    #define YES	(BOOL)1
       |  492|#endif
       |  493|
       |  494|#if !defined(NO)
       |  495|    #define NO	(BOOL)0
       |  496|#endif
       |  497|
       |  498|#if !defined(NS_SUPPRESS_MIN_MAX_ABS)
       |  499|
       |  500|#if (defined(__GNUC__) || defined(__clang__)) && !defined(__STRICT_ANSI__)
       |  501|
       |  502|#if __clang__
       |  503|
      0|  504|#define __NSX_PASTE__(A,B) A##B
       |  505|
       |  506|#if !defined(MIN)
      0|  507|    #define __NSMIN_IMPL__(A,B,L) ({ __typeof__(A) __NSX_PASTE__(__a,L) = (A); __typeof__(B) __NSX_PASTE__(__b,L) = (B); (__NSX_PASTE__(__a,L) < __NSX_PASTE__(__b,L)) ? __NSX_PASTE__(__a,L) : __NSX_PASTE__(__b,L); })
      0|  508|    #define MIN(A,B) __NSMIN_IMPL__(A,B,__COUNTER__)
       |  509|#endif
       |  510|
       |  511|#if !defined(MAX)
      0|  512|    #define __NSMAX_IMPL__(A,B,L) ({ __typeof__(A) __NSX_PASTE__(__a,L) = (A); __typeof__(B) __NSX_PASTE__(__b,L) = (B); (__NSX_PASTE__(__a,L) < __NSX_PASTE__(__b,L)) ? __NSX_PASTE__(__b,L) : __NSX_PASTE__(__a,L); })
      0|  513|    #define MAX(A,B) __NSMAX_IMPL__(A,B,__COUNTER__)
       |  514|#endif
       |  515|
       |  516|#if !defined(ABS)
       |  517|    #define __NSABS_IMPL__(A,L) ({ __typeof__(A) __NSX_PASTE__(__a,L) = (A); (__NSX_PASTE__(__a,L) < 0) ? - __NSX_PASTE__(__a,L) : __NSX_PASTE__(__a,L); })
       |  518|    #define ABS(A) __NSABS_IMPL__(A,__COUNTER__)
       |  519|#endif
       |  520|
       |  521|#else
       |  522|
       |  523|#if !defined(MIN)
       |  524|    #define MIN(A,B)	({ __typeof__(A) __a = (A); __typeof__(B) __b = (B); __a < __b ? __a : __b; })
       |  525|#endif
       |  526|
       |  527|#if !defined(MAX)
       |  528|    #define MAX(A,B)	({ __typeof__(A) __a = (A); __typeof__(B) __b = (B); __a < __b ? __b : __a; })
       |  529|#endif
       |  530|
       |  531|#if !defined(ABS)
       |  532|    #define ABS(A)	({ __typeof__(A) __a = (A); __a < 0 ? -__a : __a; })
       |  533|#endif
       |  534|
       |  535|#endif
       |  536|
       |  537|#else
       |  538|
       |  539|#if !defined(MIN)
       |  540|    #define MIN(A,B)	((A) < (B) ? (A) : (B))
       |  541|#endif
       |  542|
       |  543|#if !defined(MAX)
       |  544|    #define MAX(A,B)	((A) > (B) ? (A) : (B))
       |  545|#endif
       |  546|
       |  547|#if !defined(ABS)
       |  548|    #define ABS(A)	((A) < 0 ? (-(A)) : (A))
       |  549|#endif
       |  550|
       |  551|#endif
       |  552|
       |  553|#endif
       |  554|

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/AssertMacros.h:
       |    1|/*
       |    2| * Copyright (c) 2002-2008 by Apple Inc.. All rights reserved.
       |    3| *
       |    4| * @APPLE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. Please obtain a copy of the License at
       |   10| * http://www.opensource.apple.com/apsl/ and read it before using this
       |   11| * file.
       |   12| * 
       |   13| * The Original Code and all software distributed under the License are
       |   14| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   15| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   16| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   18| * Please see the License for the specific language governing rights and
       |   19| * limitations under the License.
       |   20| * 
       |   21| * @APPLE_LICENSE_HEADER_END@
       |   22| */
       |   23|
       |   24|
       |   25|/*
       |   26|	File:       AssertMacros.h
       |   27| 
       |   28|	Contains:   This file defines structured error handling and assertion macros for
       |   29|				programming in C. Originally used in QuickDraw GX and later enhanced.
       |   30|				These macros are used throughout Apple's software.
       |   31|	
       |   32|				New code may not want to begin adopting these macros and instead use
       |   33|				existing language functionality.
       |   34|	
       |   35|				See "Living In an Exceptional World" by Sean Parent
       |   36|				(develop, The Apple Technical Journal, Issue 11, August/September 1992)
       |   37|				<http://developer.apple.com/dev/techsupport/develop/issue11toc.shtml> or
       |   38|				<http://www.mactech.com/articles/develop/issue_11/Parent_final.html>
       |   39|				for the methodology behind these error handling and assertion macros.
       |   40|	
       |   41|	Bugs?:      For bug reports, consult the following page on
       |   42|				the World Wide Web:
       |   43|
       |   44|	 http://developer.apple.com/bugreporter/ 
       |   45|*/
       |   46|#ifndef __ASSERTMACROS__
       |   47|#define __ASSERTMACROS__
       |   48|
       |   49|/*
       |   50| *  Macro overview:
       |   51| *  
       |   52| *      check(assertion)
       |   53| *         In production builds, pre-processed away  
       |   54| *         In debug builds, if assertion evaluates to false, calls DEBUG_ASSERT_MESSAGE
       |   55| *  
       |   56| *      verify(assertion)
       |   57| *         In production builds, evaluates assertion and does nothing
       |   58| *         In debug builds, if assertion evaluates to false, calls DEBUG_ASSERT_MESSAGE
       |   59| *  
       |   60| *      require(assertion, exceptionLabel)
       |   61| *         In production builds, if the assertion expression evaluates to false, goto exceptionLabel
       |   62| *         In debug builds, if the assertion expression evaluates to false, calls DEBUG_ASSERT_MESSAGE
       |   63| *                          and jumps to exceptionLabel
       |   64| *  
       |   65| *      In addition the following suffixes are available:
       |   66| * 
       |   67| *         _noerr     Adds "!= 0" to assertion.  Useful for asserting and OSStatus or OSErr is noErr (zero)
       |   68| *         _action    Adds statement to be executued if assertion fails
       |   69| *         _quiet     Suppress call to DEBUG_ASSERT_MESSAGE
       |   70| *         _string    Allows you to add explanitory message to DEBUG_ASSERT_MESSAGE
       |   71| *  
       |   72| *        For instance, require_noerr_string(resultCode, label, msg) will do nothing if 
       |   73| *        resultCode is zero, otherwise it will call DEBUG_ASSERT_MESSAGE with msg
       |   74| *        and jump to label.
       |   75| *
       |   76| *  Configuration:
       |   77| *
       |   78| *      By default all macros generate "production code" (i.e non-debug).  If  
       |   79| *      DEBUG_ASSERT_PRODUCTION_CODE is defined to zero or DEBUG is defined to non-zero
       |   80| *      while this header is included, the macros will generated debug code.
       |   81| *
       |   82| *      If DEBUG_ASSERT_COMPONENT_NAME_STRING is defined, all debug messages will
       |   83| *      be prefixed with it.
       |   84| *
       |   85| *      By default, all messages write to stderr.  If you would like to write a custom
       |   86| *      error message formater, defined DEBUG_ASSERT_MESSAGE to your function name.
       |   87| *
       |   88| *      Each individual macro will only be defined if it is not already defined, so
       |   89| *      you can redefine their behavior singly by providing your own definition before
       |   90| *      this file is included.
       |   91| *
       |   92| *      If you define __ASSERTMACROS__ before this file is included, then nothing in
       |   93| *      this file will take effect.
       |   94| *
       |   95| *      Prior to Mac OS X 10.6 the macro names used in this file conflicted with some
       |   96| *      user code, including libraries in boost and the proposed C++ standards efforts,
       |   97| *      and there was no way for a client of this header to resolve this conflict. Because
       |   98| *      of this, most of the macros have been changed so that they are prefixed with 
       |   99| *      __ and contain at least one capital letter, which should alleviate the current
       |  100| *      and future conflicts.  However, to allow current sources to continue to compile,
       |  101| *      compatibility macros are defined at the end with the old names.  A tops script 
  ------------------
  | AFServerTrustIsValid:
  |      0|   92| *      If you define __ASSERTMACROS__ before this file is included, then nothing in
  |      0|   93| *      this file will take effect.
  |      0|   94| *
  |      0|   95| *      Prior to Mac OS X 10.6 the macro names used in this file conflicted with some
  |      0|   96| *      user code, including libraries in boost and the proposed C++ standards efforts,
  |      0|   97| *      and there was no way for a client of this header to resolve this conflict. Because
  |      0|   98| *      of this, most of the macros have been changed so that they are prefixed with 
  |      0|   99| *      __ and contain at least one capital letter, which should alleviate the current
  |      0|  100| *      and future conflicts.  However, to allow current sources to continue to compile,
  |      0|  101| *      compatibility macros are defined at the end with the old names.  A tops script 
  ------------------
       |  102| *      at the end of this file will convert all of the old macro names used in a directory
       |  103| *      to the new names.  Clients are recommended to migrate over to these new macros as
       |  104| *      they update their sources because a future release of Mac OS X will remove the
       |  105| *      old macro definitions ( without the double-underscore prefix ).  Clients who
       |  106| *      want to compile without the old macro definitions can define the macro
       |  107| *      __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES to 0 before this file is
       |  108| *      included.
       |  109| */
       |  110|
       |  111|
       |  112|/*
       |  113| *  Before including this file, #define DEBUG_ASSERT_COMPONENT_NAME_STRING to
       |  114| *  a C-string containing the name of your client. This string will be passed to
       |  115| *  the DEBUG_ASSERT_MESSAGE macro for inclusion in any assertion messages.
       |  116| *
       |  117| *  If you do not define DEBUG_ASSERT_COMPONENT_NAME_STRING, the default
       |  118| *  DEBUG_ASSERT_COMPONENT_NAME_STRING value, an empty string, will be used by
       |  119| *  the assertion macros.
       |  120| */
       |  121|#ifndef DEBUG_ASSERT_COMPONENT_NAME_STRING
       |  122|    #define DEBUG_ASSERT_COMPONENT_NAME_STRING ""
       |  123|#endif
       |  124|
       |  125|
       |  126|/*
       |  127| *  To activate the additional assertion code and messages for non-production builds,
       |  128| *  #define DEBUG_ASSERT_PRODUCTION_CODE to zero before including this file.
       |  129| *
       |  130| *  If you do not define DEBUG_ASSERT_PRODUCTION_CODE, the default value 1 will be used
       |  131| *  (production code = no assertion code and no messages).
       |  132| */
       |  133|#ifndef DEBUG_ASSERT_PRODUCTION_CODE
       |  134|   #define DEBUG_ASSERT_PRODUCTION_CODE !DEBUG
       |  135|#endif
       |  136|
       |  137|
       |  138|/*
       |  139| *  DEBUG_ASSERT_MESSAGE(component, assertion, label, error, file, line, errorCode)
       |  140| *
       |  141| *  Summary:
       |  142| *    All assertion messages are routed through this macro. If you wish to use your
       |  143| *    own routine to display assertion messages, you can override DEBUG_ASSERT_MESSAGE
       |  144| *    by #defining DEBUG_ASSERT_MESSAGE before including this file.
       |  145| *
       |  146| *  Parameters:
       |  147| *
  ------------------
  | AFPublicKeyTrustChainForServerTrust:
  |      0|  115| *  the DEBUG_ASSERT_MESSAGE macro for inclusion in any assertion messages.
  |      0|  116| *
  |      0|  117| *  If you do not define DEBUG_ASSERT_COMPONENT_NAME_STRING, the default
  |      0|  118| *  DEBUG_ASSERT_COMPONENT_NAME_STRING value, an empty string, will be used by
  |      0|  119| *  the assertion macros.
  |      0|  120| */
  |      0|  121|#ifndef DEBUG_ASSERT_COMPONENT_NAME_STRING
  |      0|  122|    #define DEBUG_ASSERT_COMPONENT_NAME_STRING ""
  |      0|  123|#endif
  |      0|  124|
  |      0|  125|
  |      0|  126|/*
  |      0|  127| *  To activate the additional assertion code and messages for non-production builds,
  |      0|  128| *  #define DEBUG_ASSERT_PRODUCTION_CODE to zero before including this file.
  |      0|  129| *
  |      0|  130| *  If you do not define DEBUG_ASSERT_PRODUCTION_CODE, the default value 1 will be used
  |      0|  131| *  (production code = no assertion code and no messages).
  |      0|  132| */
  |      0|  133|#ifndef DEBUG_ASSERT_PRODUCTION_CODE
  |      0|  134|   #define DEBUG_ASSERT_PRODUCTION_CODE !DEBUG
  |      0|  135|#endif
  |      0|  136|
  |      0|  137|
  |      0|  138|/*
  |      0|  139| *  DEBUG_ASSERT_MESSAGE(component, assertion, label, error, file, line, errorCode)
  |      0|  140| *
  |      0|  141| *  Summary:
  |      0|  142| *    All assertion messages are routed through this macro. If you wish to use your
  |      0|  143| *    own routine to display assertion messages, you can override DEBUG_ASSERT_MESSAGE
  |      0|  144| *    by #defining DEBUG_ASSERT_MESSAGE before including this file.
  |      0|  145| *
  |      0|  146| *  Parameters:
  |      0|  147| *
  ------------------
       |  148| *    componentNameString:
       |  149| *      A pointer to a string constant containing the name of the
       |  150| *      component this code is part of. This must be a string constant
       |  151| *      (and not a string variable or NULL) because the preprocessor
       |  152| *      concatenates it with other string constants.
       |  153| *
       |  154| *    assertionString:
       |  155| *      A pointer to a string constant containing the assertion.
       |  156| *      This must be a string constant (and not a string variable or
       |  157| *      NULL) because the Preprocessor concatenates it with other
       |  158| *      string constants.
       |  159| *    
       |  160| *    exceptionLabelString:
       |  161| *      A pointer to a string containing the exceptionLabel, or NULL.
       |  162| *    
       |  163| *    errorString:
       |  164| *      A pointer to the error string, or NULL. DEBUG_ASSERT_MESSAGE macros
       |  165| *      must not attempt to concatenate this string with constant
       |  166| *      character strings.
       |  167| *    
       |  168| *    fileName:
       |  169| *      A pointer to the fileName or pathname (generated by the
       |  170| *      preprocessor __FILE__ identifier), or NULL.
       |  171| *    
       |  172| *    lineNumber:
       |  173| *      The line number in the file (generated by the preprocessor
       |  174| *      __LINE__ identifier), or 0 (zero).
       |  175| *    
       |  176| *    errorCode:
       |  177| *      A value associated with the assertion, or 0.
       |  178| *
       |  179| *  Here is an example of a DEBUG_ASSERT_MESSAGE macro and a routine which displays
       |  180| *  assertion messsages:
       |  181| *
       |  182| *      #define DEBUG_ASSERT_COMPONENT_NAME_STRING "MyCoolProgram"
       |  183| *
       |  184| *      #define DEBUG_ASSERT_MESSAGE(componentNameString, assertionString,                           \
       |  185| *                                   exceptionLabelString, errorString, fileName, lineNumber, errorCode) \
       |  186| *              MyProgramDebugAssert(componentNameString, assertionString,                           \
       |  187| *                                   exceptionLabelString, errorString, fileName, lineNumber, errorCode)
       |  188| *
       |  189| *      static void
       |  190| *      MyProgramDebugAssert(const char *componentNameString, const char *assertionString, 
       |  191| *                           const char *exceptionLabelString, const char *errorString, 
       |  192| *                           const char *fileName, long lineNumber, int errorCode)
       |  193| *      {
       |  194| *          if ( (assertionString != NULL) && (*assertionString != '\0') )
       |  195| *              fprintf(stderr, "Assertion failed: %s: %s\n", componentNameString, assertionString);
       |  196| *          else
       |  197| *              fprintf(stderr, "Check failed: %s:\n", componentNameString);
       |  198| *          if ( exceptionLabelString != NULL )
       |  199| *              fprintf(stderr, "    %s\n", exceptionLabelString);
       |  200| *          if ( errorString != NULL )
       |  201| *              fprintf(stderr, "    %s\n", errorString);
       |  202| *          if ( fileName != NULL )
       |  203| *              fprintf(stderr, "    file: %s\n", fileName);
       |  204| *          if ( lineNumber != 0 )
       |  205| *              fprintf(stderr, "    line: %ld\n", lineNumber);
       |  206| *          if ( errorCode != 0 )
       |  207| *              fprintf(stderr, "    error: %d\n", errorCode);
       |  208| *      }
       |  209| *
       |  210| *  If you do not define DEBUG_ASSERT_MESSAGE, a simple printf to stderr will be used.
       |  211| */
       |  212|#ifndef DEBUG_ASSERT_MESSAGE
       |  213|   #ifdef KERNEL
       |  214|      #include <libkern/libkern.h>
       |  215|      #define DEBUG_ASSERT_MESSAGE(name, assertion, label, message, file, line, value) \
       |  216|                                  printf( "AssertMacros: %s, %s file: %s, line: %d\n", assertion, (message!=0) ? message : "", file, line);
       |  217|   #else
       |  218|      #include <stdio.h>
       |  219|      #define DEBUG_ASSERT_MESSAGE(name, assertion, label, message, file, line, value) \
       |  220|                                  fprintf(stderr, "AssertMacros: %s, %s file: %s, line: %d\n", assertion, (message!=0) ? message : "", file, line);
       |  221|   #endif
       |  222|#endif
       |  223|
       |  224|
       |  225|
       |  226|
       |  227|
       |  228|/*
       |  229| *  __Debug_String(message)
       |  230| *
       |  231| *  Summary:
       |  232| *    Production builds: does nothing and produces no code.
       |  233| *
       |  234| *    Non-production builds: call DEBUG_ASSERT_MESSAGE.
       |  235| *
       |  236| *  Parameters:
       |  237| *
       |  238| *    message:
       |  239| *      The C string to display.
       |  240| *
       |  241| */
       |  242|#ifndef __Debug_String
       |  243|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  244|	   #define __Debug_String(message)
       |  245|	#else
       |  246|	   #define __Debug_String(message)                                             \
       |  247|		  do                                                                      \
       |  248|		  {                                                                       \
       |  249|			  DEBUG_ASSERT_MESSAGE(                                               \
       |  250|				  DEBUG_ASSERT_COMPONENT_NAME_STRING,                             \
       |  251|				  "",                                                             \
       |  252|				  0,                                                              \
       |  253|				  message,                                                        \
       |  254|				  __FILE__,                                                       \
       |  255|				  __LINE__,                                                       \
       |  256|				  0);                                                             \
       |  257|		  } while ( 0 )
       |  258|	#endif
       |  259|#endif
       |  260|
       |  261|/*
       |  262| *  __Check(assertion)
       |  263| *
       |  264| *  Summary:
       |  265| *    Production builds: does nothing and produces no code.
       |  266| *
       |  267| *    Non-production builds: if the assertion expression evaluates to false,
       |  268| *    call DEBUG_ASSERT_MESSAGE.
       |  269| *
       |  270| *  Parameters:
       |  271| *
       |  272| *    assertion:
       |  273| *      The assertion expression.
       |  274| */
       |  275|#ifndef __Check
       |  276|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  277|	   #define __Check(assertion)
       |  278|	#else
       |  279|	   #define __Check(assertion)                                                 \
       |  280|		  do                                                                      \
       |  281|		  {                                                                       \
       |  282|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  283|			  {                                                                   \
       |  284|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  285|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  286|					  #assertion, 0, 0, __FILE__, __LINE__, 0 );                  \
       |  287|			  }                                                                   \
       |  288|		  } while ( 0 )
       |  289|	#endif
       |  290|#endif
       |  291|
       |  292|#ifndef __nCheck
       |  293|	#define __nCheck(assertion)  __Check(!(assertion))
       |  294|#endif
       |  295|
       |  296|/*
       |  297| *  __Check_String(assertion, message)
       |  298| *
       |  299| *  Summary:
       |  300| *    Production builds: does nothing and produces no code.
       |  301| *
       |  302| *    Non-production builds: if the assertion expression evaluates to false,
       |  303| *    call DEBUG_ASSERT_MESSAGE.
       |  304| *
       |  305| *  Parameters:
       |  306| *
       |  307| *    assertion:
       |  308| *      The assertion expression.
       |  309| *
       |  310| *    message:
       |  311| *      The C string to display.
       |  312| */
       |  313|#ifndef __Check_String
       |  314|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  315|	   #define __Check_String(assertion, message)
       |  316|	#else
       |  317|	   #define __Check_String(assertion, message)                                 \
       |  318|		  do                                                                      \
       |  319|		  {                                                                       \
       |  320|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  321|			  {                                                                   \
       |  322|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  323|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  324|					  #assertion, 0, message, __FILE__, __LINE__, 0 );            \
       |  325|			  }                                                                   \
       |  326|		  } while ( 0 )
       |  327|	#endif
       |  328|#endif
       |  329|
       |  330|#ifndef __nCheck_String
       |  331|	#define __nCheck_String(assertion, message)  __Check_String(!(assertion), message)
       |  332|#endif
       |  333|
       |  334|/*
       |  335| *  __Check_noErr(errorCode)
       |  336| *
       |  337| *  Summary:
       |  338| *    Production builds: does nothing and produces no code.
       |  339| *
       |  340| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  341| *    call DEBUG_ASSERT_MESSAGE.
       |  342| *
       |  343| *  Parameters:
       |  344| *
       |  345| *    errorCode:
       |  346| *      The errorCode expression to compare with 0.
       |  347| */
       |  348|#ifndef __Check_noErr
       |  349|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  350|	   #define __Check_noErr(errorCode)
       |  351|	#else
       |  352|	   #define __Check_noErr(errorCode)                                           \
       |  353|		  do                                                                      \
       |  354|		  {                                                                       \
       |  355|			  long evalOnceErrorCode = (errorCode);                               \
       |  356|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       |  357|			  {                                                                   \
       |  358|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  359|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  360|					  #errorCode " == 0 ", 0, 0, __FILE__, __LINE__, evalOnceErrorCode ); \
       |  361|			  }                                                                   \
       |  362|		  } while ( 0 )
       |  363|	#endif
       |  364|#endif
       |  365|
       |  366|/*
       |  367| *  __Check_noErr_String(errorCode, message)
       |  368| *
       |  369| *  Summary:
       |  370| *    Production builds: check_noerr_string() does nothing and produces
       |  371| *    no code.
       |  372| *
       |  373| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  374| *    call DEBUG_ASSERT_MESSAGE.
       |  375| *
       |  376| *  Parameters:
       |  377| *
       |  378| *    errorCode:
       |  379| *      The errorCode expression to compare to 0.
       |  380| *
       |  381| *    message:
       |  382| *      The C string to display.
       |  383| */
       |  384|#ifndef __Check_noErr_String
       |  385|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  386|	   #define __Check_noErr_String(errorCode, message)
       |  387|	#else
       |  388|	   #define __Check_noErr_String(errorCode, message)                           \
       |  389|		  do                                                                      \
       |  390|		  {                                                                       \
       |  391|			  long evalOnceErrorCode = (errorCode);                               \
       |  392|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       |  393|			  {                                                                   \
       |  394|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  395|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  396|					  #errorCode " == 0 ", 0, message, __FILE__, __LINE__, evalOnceErrorCode ); \
       |  397|			  }                                                                   \
       |  398|		  } while ( 0 )
       |  399|	#endif
       |  400|#endif
       |  401|
       |  402|/*
       |  403| *  __Verify(assertion)
       |  404| *
       |  405| *  Summary:
       |  406| *    Production builds: evaluate the assertion expression, but ignore
       |  407| *    the result.
       |  408| *
       |  409| *    Non-production builds: if the assertion expression evaluates to false,
       |  410| *    call DEBUG_ASSERT_MESSAGE.
       |  411| *
       |  412| *  Parameters:
       |  413| *
       |  414| *    assertion:
       |  415| *      The assertion expression.
       |  416| */
       |  417|#ifndef __Verify
       |  418|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  419|	   #define __Verify(assertion)                                                \
       |  420|		  do                                                                      \
       |  421|		  {                                                                       \
       |  422|			  if ( !(assertion) )                                                 \
       |  423|			  {                                                                   \
       |  424|			  }                                                                   \
       |  425|		  } while ( 0 )
       |  426|	#else
       |  427|	   #define __Verify(assertion)                                                \
       |  428|		  do                                                                      \
       |  429|		  {                                                                       \
       |  430|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  431|			  {                                                                   \
       |  432|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  433|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  434|					  #assertion, 0, 0, __FILE__, __LINE__, 0 );                  \
       |  435|			  }                                                                   \
       |  436|		  } while ( 0 )
       |  437|	#endif
       |  438|#endif
       |  439|
       |  440|#ifndef __nVerify
       |  441|	#define __nVerify(assertion)	__Verify(!(assertion))
       |  442|#endif
       |  443|
       |  444|/*
       |  445| *  __Verify_String(assertion, message)
       |  446| *
       |  447| *  Summary:
       |  448| *    Production builds: evaluate the assertion expression, but ignore
       |  449| *    the result.
       |  450| *
       |  451| *    Non-production builds: if the assertion expression evaluates to false,
       |  452| *    call DEBUG_ASSERT_MESSAGE.
       |  453| *
       |  454| *  Parameters:
       |  455| *
       |  456| *    assertion:
       |  457| *      The assertion expression.
       |  458| *
       |  459| *    message:
       |  460| *      The C string to display.
       |  461| */
       |  462|#ifndef __Verify_String
       |  463|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  464|	   #define __Verify_String(assertion, message)                                \
       |  465|		  do                                                                      \
       |  466|		  {                                                                       \
       |  467|			  if ( !(assertion) )                                                 \
       |  468|			  {                                                                   \
       |  469|			  }                                                                   \
       |  470|		  } while ( 0 )
       |  471|	#else
       |  472|	   #define __Verify_String(assertion, message)                                \
       |  473|		  do                                                                      \
       |  474|		  {                                                                       \
       |  475|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  476|			  {                                                                   \
       |  477|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  478|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  479|					  #assertion, 0, message, __FILE__, __LINE__, 0 );            \
       |  480|			  }                                                                   \
       |  481|		  } while ( 0 )
       |  482|	#endif
       |  483|#endif
       |  484|
       |  485|#ifndef __nVerify_String
       |  486|	#define __nVerify_String(assertion, message)  __Verify_String(!(assertion), message)
       |  487|#endif
       |  488|
       |  489|/*
       |  490| *  __Verify_noErr(errorCode)
       |  491| *
       |  492| *  Summary:
       |  493| *    Production builds: evaluate the errorCode expression, but ignore
       |  494| *    the result.
       |  495| *
       |  496| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  497| *    call DEBUG_ASSERT_MESSAGE.
       |  498| *
       |  499| *  Parameters:
       |  500| *
       |  501| *    errorCode:
       |  502| *      The expression to compare to 0.
       |  503| */
       |  504|#ifndef __Verify_noErr
       |  505|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  506|	   #define __Verify_noErr(errorCode)                                          \
       |  507|		  do                                                                      \
       |  508|		  {                                                                       \
       |  509|			  if ( 0 != (errorCode) )                                             \
       |  510|			  {                                                                   \
       |  511|			  }                                                                   \
       |  512|		  } while ( 0 )
       |  513|	#else
       |  514|	   #define __Verify_noErr(errorCode)                                          \
       |  515|		  do                                                                      \
       |  516|		  {                                                                       \
       |  517|			  long evalOnceErrorCode = (errorCode);                               \
       |  518|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       |  519|			  {                                                                   \
       |  520|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  521|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  522|					  #errorCode " == 0 ", 0, 0, __FILE__, __LINE__, evalOnceErrorCode ); \
       |  523|			  }                                                                   \
       |  524|		  } while ( 0 )
       |  525|	#endif
       |  526|#endif
       |  527|
       |  528|/*
       |  529| *  __Verify_noErr_String(errorCode, message)
       |  530| *
       |  531| *  Summary:
       |  532| *    Production builds: evaluate the errorCode expression, but ignore
       |  533| *    the result.
       |  534| *
       |  535| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  536| *    call DEBUG_ASSERT_MESSAGE.
       |  537| *
       |  538| *  Parameters:
       |  539| *
       |  540| *    errorCode:
       |  541| *      The expression to compare to 0.
       |  542| *
       |  543| *    message:
       |  544| *      The C string to display.
       |  545| */
       |  546|#ifndef __Verify_noErr_String
       |  547|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  548|	   #define __Verify_noErr_String(errorCode, message)                          \
       |  549|		  do                                                                      \
       |  550|		  {                                                                       \
       |  551|			  if ( 0 != (errorCode) )                                             \
       |  552|			  {                                                                   \
       |  553|			  }                                                                   \
       |  554|		  } while ( 0 )
       |  555|	#else
       |  556|	   #define __Verify_noErr_String(errorCode, message)                          \
       |  557|		  do                                                                      \
       |  558|		  {                                                                       \
       |  559|			  long evalOnceErrorCode = (errorCode);                               \
       |  560|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       |  561|			  {                                                                   \
       |  562|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  563|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  564|					  #errorCode " == 0 ", 0, message, __FILE__, __LINE__, evalOnceErrorCode ); \
       |  565|			  }                                                                   \
       |  566|		  } while ( 0 )
       |  567|	#endif
       |  568|#endif
       |  569|
       |  570|/*
       |  571| *  __Verify_noErr_Action(errorCode, action)
       |  572| *
       |  573| *  Summary:
       |  574| *    Production builds: if the errorCode expression does not equal 0 (noErr),
       |  575| *    execute the action statement or compound statement (block).
       |  576| *
       |  577| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  578| *    call DEBUG_ASSERT_MESSAGE and then execute the action statement or compound
       |  579| *    statement (block).
       |  580| *
       |  581| *  Parameters:
       |  582| *
       |  583| *    errorCode:
       |  584| *      The expression to compare to 0.
       |  585| *
       |  586| *    action:
       |  587| *      The statement or compound statement (block).
       |  588| */
       |  589|#ifndef __Verify_noErr_Action
       |  590|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  591|	   #define __Verify_noErr_Action(errorCode, action)                          \
       |  592|		  if ( 0 != (errorCode) ) {                                              \
       |  593|			  action;                                                            \
       |  594|		  }                                                                      \
       |  595|		  else do {} while (0)
       |  596|	#else
       |  597|	   #define __Verify_noErr_Action(errorCode, action)                          \
       |  598|               do {                                                                   \
       |  599|		  long evalOnceErrorCode = (errorCode);                                  \
       |  600|		  if ( __builtin_expect(0 != evalOnceErrorCode, 0) ) {                   \
       |  601|			  DEBUG_ASSERT_MESSAGE(                                              \
       |  602|				  DEBUG_ASSERT_COMPONENT_NAME_STRING,                            \
       |  603|				  #errorCode " == 0 ", 0, 0, __FILE__, __LINE__, evalOnceErrorCode );            \
       |  604|			  action;                                                            \
       |  605|		  }                                                                      \
       |  606|	       } while (0)
       |  607|	#endif
       |  608|#endif
       |  609|
       |  610|/*
       |  611| *  __Verify_Action(assertion, action)
       |  612| *
       |  613| *  Summary:
       |  614| *    Production builds: if the assertion expression evaluates to false,
       |  615| *    then execute the action statement or compound statement (block).
       |  616| *
       |  617| *    Non-production builds: if the assertion expression evaluates to false,
       |  618| *    call DEBUG_ASSERT_MESSAGE and then execute the action statement or compound
       |  619| *    statement (block).
       |  620| *
       |  621| *  Parameters:
       |  622| *
       |  623| *    assertion:
       |  624| *      The assertion expression.
       |  625| *
       |  626| *    action:
       |  627| *      The statement or compound statement (block).
       |  628| */
       |  629|#ifndef __Verify_Action
       |  630|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  631|	   #define __Verify_Action(assertion, action)                                \
       |  632|		  if ( __builtin_expect(!(assertion), 0) ) {                             \
       |  633|			action;                                                              \
       |  634|		  }                                                                      \
       |  635|		  else do {} while (0)
       |  636|	#else
       |  637|	   #define __Verify_Action(assertion, action)                                \
       |  638|		  if ( __builtin_expect(!(assertion), 0) ) {                             \
       |  639|			  DEBUG_ASSERT_MESSAGE(                                              \
       |  640|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                        \
       |  641|					  #assertion, 0, 0, __FILE__, __LINE__, 0 );                 \
       |  642|			  action;                                                            \
       |  643|		  }                                                                      \
       |  644|		  else do {} while (0)
       |  645|	#endif
       |  646|#endif
       |  647|
       |  648|/*
       |  649| *  __Require(assertion, exceptionLabel)
       |  650| *
       |  651| *  Summary:
       |  652| *    Production builds: if the assertion expression evaluates to false,
       |  653| *    goto exceptionLabel.
       |  654| *
       |  655| *    Non-production builds: if the assertion expression evaluates to false,
       |  656| *    call DEBUG_ASSERT_MESSAGE and then goto exceptionLabel.
       |  657| *
       |  658| *  Parameters:
       |  659| *
       |  660| *    assertion:
       |  661| *      The assertion expression.
       |  662| *
       |  663| *    exceptionLabel:
       |  664| *      The label.
       |  665| */
       |  666|#ifndef __Require
       |  667|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  668|	   #define __Require(assertion, exceptionLabel)                               \
       |  669|		  do                                                                      \
       |  670|		  {                                                                       \
       |  671|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  672|			  {                                                                   \
       |  673|				  goto exceptionLabel;                                            \
       |  674|			  }                                                                   \
       |  675|		  } while ( 0 )
       |  676|	#else
       |  677|	   #define __Require(assertion, exceptionLabel)                               \
       |  678|		  do                                                                      \
       |  679|		  {                                                                       \
       |  680|			  if ( __builtin_expect(!(assertion), 0) ) {                          \
       |  681|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  682|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  683|					  #assertion, #exceptionLabel, 0, __FILE__, __LINE__,  0);    \
       |  684|				  goto exceptionLabel;                                            \
       |  685|			  }                                                                   \
       |  686|		  } while ( 0 )
       |  687|	#endif
       |  688|#endif
       |  689|
       |  690|#ifndef __nRequire
       |  691|	#define __nRequire(assertion, exceptionLabel)  __Require(!(assertion), exceptionLabel)
       |  692|#endif
       |  693|
       |  694|/*
       |  695| *  __Require_Action(assertion, exceptionLabel, action)
       |  696| *
       |  697| *  Summary:
       |  698| *    Production builds: if the assertion expression evaluates to false,
       |  699| *    execute the action statement or compound statement (block) and then
       |  700| *    goto exceptionLabel.
       |  701| *
       |  702| *    Non-production builds: if the assertion expression evaluates to false,
       |  703| *    call DEBUG_ASSERT_MESSAGE, execute the action statement or compound
       |  704| *    statement (block), and then goto exceptionLabel.
       |  705| *
       |  706| *  Parameters:
       |  707| *
       |  708| *    assertion:
       |  709| *      The assertion expression.
       |  710| *
       |  711| *    exceptionLabel:
       |  712| *      The label.
       |  713| *
       |  714| *    action:
       |  715| *      The statement or compound statement (block).
       |  716| */
       |  717|#ifndef __Require_Action
       |  718|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  719|	   #define __Require_Action(assertion, exceptionLabel, action)                \
       |  720|		  do                                                                      \
       |  721|		  {                                                                       \
       |  722|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  723|			  {                                                                   \
       |  724|				  {                                                               \
       |  725|					  action;                                                     \
       |  726|				  }                                                               \
       |  727|				  goto exceptionLabel;                                            \
       |  728|			  }                                                                   \
       |  729|		  } while ( 0 )
       |  730|	#else
       |  731|	   #define __Require_Action(assertion, exceptionLabel, action)                \
       |  732|		  do                                                                      \
       |  733|		  {                                                                       \
       |  734|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  735|			  {                                                                   \
       |  736|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  737|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  738|					  #assertion, #exceptionLabel, 0,   __FILE__, __LINE__, 0);   \
       |  739|				  {                                                               \
       |  740|					  action;                                                     \
       |  741|				  }                                                               \
       |  742|				  goto exceptionLabel;                                            \
       |  743|			  }                                                                   \
       |  744|		  } while ( 0 )
       |  745|	#endif
       |  746|#endif
       |  747|
       |  748|#ifndef __nRequire_Action
       |  749|	#define __nRequire_Action(assertion, exceptionLabel, action)                  \
       |  750|	__Require_Action(!(assertion), exceptionLabel, action)
       |  751|#endif
       |  752|
       |  753|/*
       |  754| *  __Require_Quiet(assertion, exceptionLabel)
       |  755| *
       |  756| *  Summary:
       |  757| *    If the assertion expression evaluates to false, goto exceptionLabel.
       |  758| *
       |  759| *  Parameters:
       |  760| *
       |  761| *    assertion:
       |  762| *      The assertion expression.
       |  763| *
       |  764| *    exceptionLabel:
       |  765| *      The label.
       |  766| */
       |  767|#ifndef __Require_Quiet
       |  768|	#define __Require_Quiet(assertion, exceptionLabel)                            \
      0|  769|	  do                                                                          \
      0|  770|	  {                                                                           \
      0|  771|		  if ( __builtin_expect(!(assertion), 0) )                                \
      0|  772|		  {                                                                       \
      0|  773|			  goto exceptionLabel;                                                \
      0|  774|		  }                                                                       \
      0|  775|	  } while ( 0 )
       |  776|#endif
       |  777|
       |  778|#ifndef __nRequire_Quiet
       |  779|	#define __nRequire_Quiet(assertion, exceptionLabel)  __Require_Quiet(!(assertion), exceptionLabel)
       |  780|#endif
       |  781|
       |  782|/*
       |  783| *  __Require_Action_Quiet(assertion, exceptionLabel, action)
       |  784| *
       |  785| *  Summary:
       |  786| *    If the assertion expression evaluates to false, execute the action
       |  787| *    statement or compound statement (block), and goto exceptionLabel.
       |  788| *
       |  789| *  Parameters:
       |  790| *
       |  791| *    assertion:
       |  792| *      The assertion expression.
       |  793| *
       |  794| *    exceptionLabel:
       |  795| *      The label.
       |  796| *
       |  797| *    action:
       |  798| *      The statement or compound statement (block).
       |  799| */
       |  800|#ifndef __Require_Action_Quiet
       |  801|	#define __Require_Action_Quiet(assertion, exceptionLabel, action)             \
       |  802|	  do                                                                          \
       |  803|	  {                                                                           \
       |  804|		  if ( __builtin_expect(!(assertion), 0) )                                \
       |  805|		  {                                                                       \
       |  806|			  {                                                                   \
       |  807|				  action;                                                         \
       |  808|			  }                                                                   \
       |  809|			  goto exceptionLabel;                                                \
       |  810|		  }                                                                       \
       |  811|	  } while ( 0 )
       |  812|#endif
       |  813|
       |  814|#ifndef __nRequire_Action_Quiet
       |  815|	#define __nRequire_Action_Quiet(assertion, exceptionLabel, action)              \
       |  816|		__Require_Action_Quiet(!(assertion), exceptionLabel, action)
       |  817|#endif
       |  818|
       |  819|/*
       |  820| *  __Require_String(assertion, exceptionLabel, message)
       |  821| *
       |  822| *  Summary:
       |  823| *    Production builds: if the assertion expression evaluates to false,
       |  824| *    goto exceptionLabel.
       |  825| *
       |  826| *    Non-production builds: if the assertion expression evaluates to false,
       |  827| *    call DEBUG_ASSERT_MESSAGE, and then goto exceptionLabel.
       |  828| *
       |  829| *  Parameters:
       |  830| *
       |  831| *    assertion:
       |  832| *      The assertion expression.
       |  833| *
       |  834| *    exceptionLabel:
       |  835| *      The label.
       |  836| *
       |  837| *    message:
       |  838| *      The C string to display.
       |  839| */
       |  840|#ifndef __Require_String
       |  841|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  842|	   #define __Require_String(assertion, exceptionLabel, message)               \
       |  843|		  do                                                                      \
       |  844|		  {                                                                       \
       |  845|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  846|			  {                                                                   \
       |  847|				  goto exceptionLabel;                                            \
       |  848|			  }                                                                   \
       |  849|		  } while ( 0 )
       |  850|	#else
       |  851|	   #define __Require_String(assertion, exceptionLabel, message)               \
       |  852|		  do                                                                      \
       |  853|		  {                                                                       \
       |  854|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  855|			  {                                                                   \
       |  856|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  857|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  858|					  #assertion, #exceptionLabel,  message,  __FILE__, __LINE__, 0); \
       |  859|				  goto exceptionLabel;                                            \
       |  860|			  }                                                                   \
       |  861|		  } while ( 0 )
       |  862|	#endif
       |  863|#endif
       |  864|
       |  865|#ifndef __nRequire_String
       |  866|	#define __nRequire_String(assertion, exceptionLabel, string)                  \
       |  867|		__Require_String(!(assertion), exceptionLabel, string)
       |  868|#endif
       |  869|
       |  870|/*
       |  871| *  __Require_Action_String(assertion, exceptionLabel, action, message)
       |  872| *
       |  873| *  Summary:
       |  874| *    Production builds: if the assertion expression evaluates to false,
       |  875| *    execute the action statement or compound statement (block), and then
       |  876| *    goto exceptionLabel.
       |  877| *
       |  878| *    Non-production builds: if the assertion expression evaluates to false,
       |  879| *    call DEBUG_ASSERT_MESSAGE, execute the action statement or compound
       |  880| *    statement (block), and then goto exceptionLabel.
       |  881| *
       |  882| *  Parameters:
       |  883| *
       |  884| *    assertion:
       |  885| *      The assertion expression.
       |  886| *
       |  887| *    exceptionLabel:
       |  888| *      The label.
       |  889| *
       |  890| *    action:
       |  891| *      The statement or compound statement (block).
       |  892| *
       |  893| *    message:
       |  894| *      The C string to display.
       |  895| */
       |  896|#ifndef __Require_Action_String
       |  897|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  898|	   #define __Require_Action_String(assertion, exceptionLabel, action, message)  \
       |  899|		  do                                                                      \
       |  900|		  {                                                                       \
       |  901|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  902|			  {                                                                   \
       |  903|				  {                                                               \
       |  904|					  action;                                                     \
       |  905|				  }                                                               \
       |  906|				  goto exceptionLabel;                                            \
       |  907|			  }                                                                   \
       |  908|		  } while ( 0 )
       |  909|	#else
       |  910|	   #define __Require_Action_String(assertion, exceptionLabel, action, message)  \
       |  911|		  do                                                                      \
       |  912|		  {                                                                       \
       |  913|			  if ( __builtin_expect(!(assertion), 0) )                            \
       |  914|			  {                                                                   \
       |  915|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  916|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  917|					  #assertion, #exceptionLabel,  message,  __FILE__,  __LINE__, 0); \
       |  918|				  {                                                               \
       |  919|					  action;                                                     \
       |  920|				  }                                                               \
       |  921|				  goto exceptionLabel;                                            \
       |  922|			  }                                                                   \
       |  923|		  } while ( 0 )
       |  924|	#endif
       |  925|#endif
       |  926|
       |  927|#ifndef __nRequire_Action_String
       |  928|	#define __nRequire_Action_String(assertion, exceptionLabel, action, message)    \
       |  929|		__Require_Action_String(!(assertion), exceptionLabel, action, message)
       |  930|#endif
       |  931|
       |  932|/*
       |  933| *  __Require_noErr(errorCode, exceptionLabel)
       |  934| *
       |  935| *  Summary:
       |  936| *    Production builds: if the errorCode expression does not equal 0 (noErr),
       |  937| *    goto exceptionLabel.
       |  938| *
       |  939| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  940| *    call DEBUG_ASSERT_MESSAGE and then goto exceptionLabel.
       |  941| *
       |  942| *  Parameters:
       |  943| *
       |  944| *    errorCode:
       |  945| *      The expression to compare to 0.
       |  946| *
       |  947| *    exceptionLabel:
       |  948| *      The label.
       |  949| */
       |  950|#ifndef __Require_noErr
       |  951|	#if DEBUG_ASSERT_PRODUCTION_CODE
       |  952|	   #define __Require_noErr(errorCode, exceptionLabel)                         \
       |  953|		  do                                                                      \
       |  954|		  {                                                                       \
       |  955|			  if ( __builtin_expect(0 != (errorCode), 0) )                        \
       |  956|			  {                                                                   \
       |  957|				  goto exceptionLabel;                                            \
       |  958|			  }                                                                   \
       |  959|		  } while ( 0 )
       |  960|	#else
       |  961|	   #define __Require_noErr(errorCode, exceptionLabel)                         \
       |  962|		  do                                                                      \
       |  963|		  {                                                                       \
       |  964|			  long evalOnceErrorCode = (errorCode);                               \
       |  965|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       |  966|			  {                                                                   \
       |  967|				  DEBUG_ASSERT_MESSAGE(                                           \
       |  968|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       |  969|					  #errorCode " == 0 ",  #exceptionLabel,  0,  __FILE__, __LINE__, evalOnceErrorCode); \
       |  970|				  goto exceptionLabel;                                            \
       |  971|			  }                                                                   \
       |  972|		  } while ( 0 )
       |  973|	#endif
       |  974|#endif
       |  975|
       |  976|/*
       |  977| *  __Require_noErr_Action(errorCode, exceptionLabel, action)
       |  978| *
       |  979| *  Summary:
       |  980| *    Production builds: if the errorCode expression does not equal 0 (noErr),
       |  981| *    execute the action statement or compound statement (block) and
       |  982| *    goto exceptionLabel.
       |  983| *
       |  984| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       |  985| *    call DEBUG_ASSERT_MESSAGE, execute the action statement or
       |  986| *    compound statement (block), and then goto exceptionLabel.
       |  987| *
       |  988| *  Parameters:
       |  989| *
       |  990| *    errorCode:
       |  991| *      The expression to compare to 0.
       |  992| *
       |  993| *    exceptionLabel:
       |  994| *      The label.
       |  995| *
       |  996| *    action:
       |  997| *      The statement or compound statement (block).
       |  998| */
       |  999|#ifndef __Require_noErr_Action
       | 1000|	#if DEBUG_ASSERT_PRODUCTION_CODE
       | 1001|	   #define __Require_noErr_Action(errorCode, exceptionLabel, action)          \
       | 1002|		  do                                                                      \
       | 1003|		  {                                                                       \
       | 1004|			  if ( __builtin_expect(0 != (errorCode), 0) )                        \
       | 1005|			  {                                                                   \
       | 1006|				  {                                                               \
       | 1007|					  action;                                                     \
       | 1008|				  }                                                               \
       | 1009|				  goto exceptionLabel;                                            \
       | 1010|			  }                                                                   \
       | 1011|		  } while ( 0 )
       | 1012|	#else
       | 1013|	   #define __Require_noErr_Action(errorCode, exceptionLabel, action)          \
       | 1014|		  do                                                                      \
       | 1015|		  {                                                                       \
       | 1016|			  long evalOnceErrorCode = (errorCode);                               \
       | 1017|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       | 1018|			  {                                                                   \
       | 1019|				  DEBUG_ASSERT_MESSAGE(                                           \
       | 1020|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       | 1021|					  #errorCode " == 0 ", #exceptionLabel,  0,  __FILE__, __LINE__,  evalOnceErrorCode); \
       | 1022|				  {                                                               \
       | 1023|					  action;                                                     \
       | 1024|				  }                                                               \
       | 1025|				  goto exceptionLabel;                                            \
       | 1026|			  }                                                                   \
       | 1027|		  } while ( 0 )
       | 1028|	#endif
       | 1029|#endif
       | 1030|
       | 1031|/*
       | 1032| *  __Require_noErr_Quiet(errorCode, exceptionLabel)
       | 1033| *
       | 1034| *  Summary:
       | 1035| *    If the errorCode expression does not equal 0 (noErr),
       | 1036| *    goto exceptionLabel.
       | 1037| *
       | 1038| *  Parameters:
       | 1039| *
       | 1040| *    errorCode:
       | 1041| *      The expression to compare to 0.
       | 1042| *
       | 1043| *    exceptionLabel:
       | 1044| *      The label.
       | 1045| */
       | 1046|#ifndef __Require_noErr_Quiet
       | 1047|	#define __Require_noErr_Quiet(errorCode, exceptionLabel)                      \
      0| 1048|	  do                                                                          \
      0| 1049|	  {                                                                           \
      0| 1050|		  if ( __builtin_expect(0 != (errorCode), 0) )                            \
      0| 1051|		  {                                                                       \
      0| 1052|			  goto exceptionLabel;                                                \
      0| 1053|		  }                                                                       \
      0| 1054|	  } while ( 0 )
       | 1055|#endif
       | 1056|
       | 1057|/*
       | 1058| *  __Require_noErr_Action_Quiet(errorCode, exceptionLabel, action)
       | 1059| *
       | 1060| *  Summary:
       | 1061| *    If the errorCode expression does not equal 0 (noErr),
       | 1062| *    execute the action statement or compound statement (block) and
       | 1063| *    goto exceptionLabel.
       | 1064| *
       | 1065| *  Parameters:
       | 1066| *
       | 1067| *    errorCode:
       | 1068| *      The expression to compare to 0.
       | 1069| *
       | 1070| *    exceptionLabel:
       | 1071| *      The label.
       | 1072| *
       | 1073| *    action:
       | 1074| *      The statement or compound statement (block).
       | 1075| */
       | 1076|#ifndef __Require_noErr_Action_Quiet
       | 1077|	#define __Require_noErr_Action_Quiet(errorCode, exceptionLabel, action)       \
       | 1078|	  do                                                                          \
       | 1079|	  {                                                                           \
       | 1080|		  if ( __builtin_expect(0 != (errorCode), 0) )                            \
       | 1081|		  {                                                                       \
       | 1082|			  {                                                                   \
       | 1083|				  action;                                                         \
       | 1084|			  }                                                                   \
       | 1085|			  goto exceptionLabel;                                                \
       | 1086|		  }                                                                       \
       | 1087|	  } while ( 0 )
       | 1088|#endif
       | 1089|
       | 1090|/*
       | 1091| *  __Require_noErr_String(errorCode, exceptionLabel, message)
       | 1092| *
       | 1093| *  Summary:
       | 1094| *    Production builds: if the errorCode expression does not equal 0 (noErr),
       | 1095| *    goto exceptionLabel.
       | 1096| *
       | 1097| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       | 1098| *    call DEBUG_ASSERT_MESSAGE, and then goto exceptionLabel.
       | 1099| *
       | 1100| *  Parameters:
       | 1101| *
       | 1102| *    errorCode:
       | 1103| *      The expression to compare to 0.
       | 1104| *
       | 1105| *    exceptionLabel:
       | 1106| *      The label.
       | 1107| *
       | 1108| *    message:
       | 1109| *      The C string to display.
       | 1110| */
       | 1111|#ifndef __Require_noErr_String
       | 1112|	#if DEBUG_ASSERT_PRODUCTION_CODE
       | 1113|	   #define __Require_noErr_String(errorCode, exceptionLabel, message)         \
       | 1114|		  do                                                                      \
       | 1115|		  {                                                                       \
       | 1116|			  if ( __builtin_expect(0 != (errorCode), 0) )                        \
       | 1117|			  {                                                                   \
       | 1118|				  goto exceptionLabel;                                            \
       | 1119|			  }                                                                   \
       | 1120|		  } while ( 0 )
       | 1121|	#else
       | 1122|	   #define __Require_noErr_String(errorCode, exceptionLabel, message)         \
       | 1123|		  do                                                                      \
       | 1124|		  {                                                                       \
       | 1125|			  long evalOnceErrorCode = (errorCode);                               \
       | 1126|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       | 1127|			  {                                                                   \
       | 1128|				  DEBUG_ASSERT_MESSAGE(                                           \
       | 1129|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       | 1130|					  #errorCode " == 0 ",  #exceptionLabel, message, __FILE__,  __LINE__,  evalOnceErrorCode); \
       | 1131|				  goto exceptionLabel;                                            \
       | 1132|			  }                                                                   \
       | 1133|		  } while ( 0 )
       | 1134|	#endif
       | 1135|#endif
       | 1136|
       | 1137|/*
       | 1138| *  __Require_noErr_Action_String(errorCode, exceptionLabel, action, message)
       | 1139| *
       | 1140| *  Summary:
       | 1141| *    Production builds: if the errorCode expression does not equal 0 (noErr),
       | 1142| *    execute the action statement or compound statement (block) and
       | 1143| *    goto exceptionLabel.
       | 1144| *
       | 1145| *    Non-production builds: if the errorCode expression does not equal 0 (noErr),
       | 1146| *    call DEBUG_ASSERT_MESSAGE, execute the action statement or compound
       | 1147| *    statement (block), and then goto exceptionLabel.
       | 1148| *
       | 1149| *  Parameters:
       | 1150| *
       | 1151| *    errorCode:
       | 1152| *      The expression to compare to 0.
       | 1153| *
       | 1154| *    exceptionLabel:
       | 1155| *      The label.
       | 1156| *
       | 1157| *    action:
       | 1158| *      The statement or compound statement (block).
       | 1159| *
       | 1160| *    message:
       | 1161| *      The C string to display.
       | 1162| */
       | 1163|#ifndef __Require_noErr_Action_String
       | 1164|	#if DEBUG_ASSERT_PRODUCTION_CODE
       | 1165|	   #define __Require_noErr_Action_String(errorCode, exceptionLabel, action, message) \
       | 1166|		  do                                                                      \
       | 1167|		  {                                                                       \
       | 1168|			  if ( __builtin_expect(0 != (errorCode), 0) )                        \
       | 1169|			  {                                                                   \
       | 1170|				  {                                                               \
       | 1171|					  action;                                                     \
       | 1172|				  }                                                               \
       | 1173|				  goto exceptionLabel;                                            \
       | 1174|			  }                                                                   \
       | 1175|		  } while ( 0 )
       | 1176|	#else
       | 1177|	   #define __Require_noErr_Action_String(errorCode, exceptionLabel, action, message) \
       | 1178|		  do                                                                      \
       | 1179|		  {                                                                       \
       | 1180|			  long evalOnceErrorCode = (errorCode);                               \
       | 1181|			  if ( __builtin_expect(0 != evalOnceErrorCode, 0) )                  \
       | 1182|			  {                                                                   \
       | 1183|				  DEBUG_ASSERT_MESSAGE(                                           \
       | 1184|					  DEBUG_ASSERT_COMPONENT_NAME_STRING,                         \
       | 1185|					  #errorCode " == 0 ", #exceptionLabel, message, __FILE__, __LINE__, evalOnceErrorCode); \
       | 1186|				  {                                                               \
       | 1187|					  action;                                                     \
       | 1188|				  }                                                               \
       | 1189|				  goto exceptionLabel;                                            \
       | 1190|			  }                                                                   \
       | 1191|		  } while ( 0 )
       | 1192|	#endif
       | 1193|#endif
       | 1194|
       | 1195|/*
       | 1196| *  __Check_Compile_Time(expr)
       | 1197| *
       | 1198| *  Summary:
       | 1199| *    any build: if the expression is not true, generated a compile time error.
       | 1200| *
       | 1201| *  Parameters:
       | 1202| *
       | 1203| *    expr:
       | 1204| *      The compile time expression that should evaluate to non-zero.
       | 1205| *
       | 1206| *  Discussion:
       | 1207| *     This declares an array with a size that is determined by a compile-time expression.
       | 1208| *     If false, it declares a negatively sized array, which generates a compile-time error.
       | 1209| *
       | 1210| * Examples:
       | 1211| *     __Check_Compile_Time( sizeof( int ) == 4 );
       | 1212| *     __Check_Compile_Time( offsetof( MyStruct, myField ) == 4 );
       | 1213| *     __Check_Compile_Time( ( kMyBufferSize % 512 ) == 0 );
       | 1214| *
       | 1215| *  Note: This only works with compile-time expressions.
       | 1216| *  Note: This only works in places where extern declarations are allowed (e.g. global scope).
       | 1217| */
       | 1218|#ifndef __Check_Compile_Time
       | 1219|    #ifdef __GNUC__ 
       | 1220|        #define __Check_Compile_Time( expr )    \
       | 1221|            extern int compile_time_assert_failed[ ( expr ) ? 1 : -1 ] __attribute__( ( unused ) )
       | 1222|    #else
       | 1223|        #define __Check_Compile_Time( expr )    \
       | 1224|            extern int compile_time_assert_failed[ ( expr ) ? 1 : -1 ]
       | 1225|    #endif
       | 1226|#endif
       | 1227|
       | 1228|/*
       | 1229| *	For time immemorial, Mac OS X has defined version of most of these macros without the __ prefix, which
       | 1230| *	could collide with similarly named functions or macros in user code, including new functionality in
       | 1231| *	Boost and the C++ standard library.
       | 1232| *
       | 1233| *	A future release of Mac OS X will no longer do this, and will require that clients move to the
       | 1234| *  new macros as defined above.  However, in the interim both the new and old macros will work, unless
       | 1235| *  clients define a macro __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES before this file is included
       | 1236| *  in their compilations.  Clients who do not want the older macros defined can accomplish this by adding
       | 1237| *    #define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
       | 1238| *  at the top of their sources, or my adding -D__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES=0 to the
       | 1239| *  gcc compilation options.
       | 1240| *
       | 1241| *  To aid users of these macros in converting their sources, the following tops script will convert usages
       | 1242| *  of the old macros into the new equivalents.  To do so, in Terminal go into the directory containing the
       | 1243| *  sources to be converted and run this command.
       | 1244| *
       | 1245|    find . -name '*.[c|cc|cp|cpp|m|mm|h]' -print0 |  xargs -0 tops -verbose \
       | 1246|      replace "check(<b args>)" with "__Check(<args>)" \
       | 1247|      replace "check_noerr(<b args>)" with "__Check_noErr(<args>)" \
       | 1248|      replace "check_noerr_string(<b args>)" with "__Check_noErr_String(<args>)" \
       | 1249|      replace "check_string(<b args>)" with "__Check_String(<args>)" \
       | 1250|      replace "require(<b args>)" with "__Require(<args>)" \
       | 1251|      replace "require_action(<b args>)" with "__Require_Action(<args>)" \
       | 1252|      replace "require_action_string(<b args>)" with "__Require_Action_String(<args>)" \
       | 1253|      replace "require_noerr(<b args>)" with "__Require_noErr(<args>)" \
       | 1254|      replace "require_noerr_action(<b args>)" with "__Require_noErr_Action(<args>)" \
       | 1255|      replace "require_noerr_action_string(<b args>)" with "__Require_noErr_Action_String(<args>)" \
       | 1256|      replace "require_noerr_string(<b args>)" with "__Require_noErr_String(<args>)" \
       | 1257|      replace "require_string(<b args>)" with "__Require_String(<args>)" \
       | 1258|      replace "verify(<b args>)" with "__Verify(<args>)" \
       | 1259|      replace "verify_action(<b args>)" with "__Verify_Action(<args>)" \
       | 1260|      replace "verify_noerr(<b args>)" with "__Verify_noErr(<args>)" \
       | 1261|      replace "verify_noerr_action(<b args>)" with "__Verify_noErr_Action(<args>)" \
       | 1262|      replace "verify_noerr_string(<b args>)" with "__Verify_noErr_String(<args>)" \
       | 1263|      replace "verify_string(<b args>)" with "__Verify_String(<args>)" \
       | 1264|      replace "ncheck(<b args>)" with "__nCheck(<args>)" \
       | 1265|      replace "ncheck_string(<b args>)" with "__nCheck_String(<args>)" \
       | 1266|      replace "nrequire(<b args>)" with "__nRequire(<args>)" \
       | 1267|      replace "nrequire_action(<b args>)" with "__nRequire_Action(<args>)" \
       | 1268|      replace "nrequire_action_quiet(<b args>)" with "__nRequire_Action_Quiet(<args>)" \
       | 1269|      replace "nrequire_action_string(<b args>)" with "__nRequire_Action_String(<args>)" \
       | 1270|      replace "nrequire_quiet(<b args>)" with "__nRequire_Quiet(<args>)" \
       | 1271|      replace "nrequire_string(<b args>)" with "__nRequire_String(<args>)" \
       | 1272|      replace "nverify(<b args>)" with "__nVerify(<args>)" \
       | 1273|      replace "nverify_string(<b args>)" with "__nVerify_String(<args>)" \
       | 1274|      replace "require_action_quiet(<b args>)" with "__Require_Action_Quiet(<args>)" \
       | 1275|      replace "require_noerr_action_quiet(<b args>)" with "__Require_noErr_Action_Quiet(<args>)" \
       | 1276|      replace "require_noerr_quiet(<b args>)" with "__Require_noErr_Quiet(<args>)" \
       | 1277|      replace "require_quiet(<b args>)" with "__Require_Quiet(<args>)" \
       | 1278|      replace "check_compile_time(<b args>)" with "__Check_Compile_Time(<args>)" \
       | 1279|      replace "debug_string(<b args>)" with "__Debug_String(<args>)"
       | 1280| *
       | 1281| */
       | 1282|
       | 1283|#ifndef __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES
       | 1284|	/* If we haven't set this yet, it defaults to on.  In the next release, this will default to off. */
       | 1285|	#define	__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES	1
       | 1286|#endif
       | 1287|
       | 1288|#if	__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES
       | 1289|
       | 1290|	#ifndef check
       | 1291|	#define check(assertion)  __Check(assertion)
       | 1292|	#endif
       | 1293|
       | 1294|	#ifndef check_noerr
       | 1295|	#define check_noerr(errorCode)  __Check_noErr(errorCode)
       | 1296|	#endif
       | 1297|
       | 1298|	#ifndef check_noerr_string
       | 1299|		#define check_noerr_string(errorCode, message)  __Check_noErr_String(errorCode, message)
       | 1300|	#endif
       | 1301|
       | 1302|	#ifndef check_string
       | 1303|		#define check_string(assertion, message)  __Check_String(assertion, message)
       | 1304|	#endif
       | 1305|
       | 1306|	#ifndef require
       | 1307|		#define require(assertion, exceptionLabel)  __Require(assertion, exceptionLabel)
       | 1308|	#endif
       | 1309|
       | 1310|	#ifndef require_action
       | 1311|		#define require_action(assertion, exceptionLabel, action)  __Require_Action(assertion, exceptionLabel, action)
       | 1312|	#endif
       | 1313|
       | 1314|	#ifndef require_action_string
       | 1315|		#define require_action_string(assertion, exceptionLabel, action, message)  __Require_Action_String(assertion, exceptionLabel, action, message)
       | 1316|	#endif
       | 1317|
       | 1318|	#ifndef require_noerr
       | 1319|		#define require_noerr(errorCode, exceptionLabel)  __Require_noErr(errorCode, exceptionLabel)
       | 1320|	#endif
       | 1321|
       | 1322|	#ifndef require_noerr_action
       | 1323|		#define require_noerr_action(errorCode, exceptionLabel, action)  __Require_noErr_Action(errorCode, exceptionLabel, action)
       | 1324|	#endif
       | 1325|
       | 1326|	#ifndef require_noerr_action_string
       | 1327|		#define require_noerr_action_string(errorCode, exceptionLabel, action, message)  __Require_noErr_Action_String(errorCode, exceptionLabel, action, message)
       | 1328|	#endif
       | 1329|
       | 1330|	#ifndef require_noerr_string
       | 1331|		#define require_noerr_string(errorCode, exceptionLabel, message)  __Require_noErr_String(errorCode, exceptionLabel, message)
       | 1332|	#endif
       | 1333|
       | 1334|	#ifndef require_string
       | 1335|		#define require_string(assertion, exceptionLabel, message)  __Require_String(assertion, exceptionLabel, message)
       | 1336|	#endif
       | 1337|
       | 1338|	#ifndef verify
       | 1339|		#define verify(assertion) __Verify(assertion)
       | 1340|	#endif
       | 1341|
       | 1342|	#ifndef verify_action
       | 1343|		#define verify_action(assertion, action)  __Verify_Action(assertion, action)
       | 1344|	#endif
       | 1345|
       | 1346|	#ifndef verify_noerr
       | 1347|		#define verify_noerr(errorCode)  __Verify_noErr(errorCode)
       | 1348|	#endif
       | 1349|
       | 1350|	#ifndef verify_noerr_action
       | 1351|		#define verify_noerr_action(errorCode, action)  __Verify_noErr_Action(errorCode, action)
       | 1352|	#endif
       | 1353|
       | 1354|	#ifndef verify_noerr_string
       | 1355|		#define verify_noerr_string(errorCode, message)  __Verify_noErr_String(errorCode, message)
       | 1356|	#endif
       | 1357|
       | 1358|	#ifndef verify_string
       | 1359|		#define verify_string(assertion, message)  __Verify_String(assertion, message)
       | 1360|	#endif
       | 1361|
       | 1362|	#ifndef ncheck
       | 1363|		#define ncheck(assertion)  __nCheck(assertion)
       | 1364|	#endif
       | 1365|
       | 1366|	#ifndef ncheck_string
       | 1367|		#define ncheck_string(assertion, message)  __nCheck_String(assertion, message)
       | 1368|	#endif
       | 1369|
       | 1370|	#ifndef nrequire
       | 1371|		#define nrequire(assertion, exceptionLabel)  __nRequire(assertion, exceptionLabel)
       | 1372|	#endif
       | 1373|
       | 1374|	#ifndef nrequire_action
       | 1375|		#define nrequire_action(assertion, exceptionLabel, action)  __nRequire_Action(assertion, exceptionLabel, action)
       | 1376|	#endif
       | 1377|
       | 1378|	#ifndef nrequire_action_quiet
       | 1379|		#define nrequire_action_quiet(assertion, exceptionLabel, action)  __nRequire_Action_Quiet(assertion, exceptionLabel, action)
       | 1380|	#endif
       | 1381|
       | 1382|	#ifndef nrequire_action_string
       | 1383|		#define nrequire_action_string(assertion, exceptionLabel, action, message)  __nRequire_Action_String(assertion, exceptionLabel, action, message)
       | 1384|	#endif
       | 1385|
       | 1386|	#ifndef nrequire_quiet
       | 1387|		#define nrequire_quiet(assertion, exceptionLabel)  __nRequire_Quiet(assertion, exceptionLabel)
       | 1388|	#endif
       | 1389|
       | 1390|	#ifndef nrequire_string
       | 1391|		#define nrequire_string(assertion, exceptionLabel, string)  __nRequire_String(assertion, exceptionLabel, string)
       | 1392|	#endif
       | 1393|
       | 1394|	#ifndef nverify
       | 1395|		#define nverify(assertion)  __nVerify(assertion)
       | 1396|	#endif
       | 1397|
       | 1398|	#ifndef nverify_string
       | 1399|		#define nverify_string(assertion, message)  __nVerify_String(assertion, message)
       | 1400|	#endif
       | 1401|
       | 1402|	#ifndef require_action_quiet
       | 1403|		#define require_action_quiet(assertion, exceptionLabel, action)  __Require_Action_Quiet(assertion, exceptionLabel, action)
       | 1404|	#endif
       | 1405|
       | 1406|	#ifndef require_noerr_action_quiet
       | 1407|		#define require_noerr_action_quiet(errorCode, exceptionLabel, action)  __Require_noErr_Action_Quiet(errorCode, exceptionLabel, action)
       | 1408|	#endif
       | 1409|
       | 1410|	#ifndef require_noerr_quiet
       | 1411|		#define require_noerr_quiet(errorCode, exceptionLabel)  __Require_noErr_Quiet(errorCode, exceptionLabel)
       | 1412|	#endif
       | 1413|
       | 1414|	#ifndef require_quiet
       | 1415|		#define require_quiet(assertion, exceptionLabel)  __Require_Quiet(assertion, exceptionLabel)
       | 1416|	#endif
       | 1417|
       | 1418|	#ifndef check_compile_time
       | 1419|		#define check_compile_time( expr )  __Check_Compile_Time( expr )
       | 1420|	#endif
       | 1421|
       | 1422|	#ifndef debug_string
       | 1423|		#define debug_string(message)  __Debug_String(message)
       | 1424|	#endif
       | 1425|	
       | 1426|#endif	/* ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES */
       | 1427|
       | 1428|
       | 1429|#endif /* __ASSERTMACROS__ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/Block.h:
       |    1|/*
       |    2| *  Block.h
       |    3| *
       |    4| * Copyright (c) 2008-2010 Apple Inc. All rights reserved.
       |    5| *
       |    6| * @APPLE_LLVM_LICENSE_HEADER@
       |    7| *
       |    8| */
       |    9|
       |   10|#ifndef _Block_H_
       |   11|#define _Block_H_
       |   12|
       |   13|#if !defined(BLOCK_EXPORT)
       |   14|#   if defined(__cplusplus)
       |   15|#       define BLOCK_EXPORT extern "C" 
       |   16|#   else
       |   17|#       define BLOCK_EXPORT extern
       |   18|#   endif
       |   19|#endif
       |   20|
       |   21|#include <Availability.h>
       |   22|#include <TargetConditionals.h>
       |   23|
       |   24|#if __cplusplus
       |   25|extern "C" {
       |   26|#endif
       |   27|
       |   28|// Create a heap based copy of a Block or simply add a reference to an existing one.
       |   29|// This must be paired with Block_release to recover memory, even when running
       |   30|// under Objective-C Garbage Collection.
       |   31|BLOCK_EXPORT void *_Block_copy(const void *aBlock)
       |   32|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   33|
       |   34|// Lose the reference, and if heap based and last reference, recover the memory
       |   35|BLOCK_EXPORT void _Block_release(const void *aBlock)
       |   36|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   37|
       |   38|
       |   39|// Used by the compiler. Do not call this function yourself.
       |   40|BLOCK_EXPORT void _Block_object_assign(void *, const void *, const int)
       |   41|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   42|
       |   43|// Used by the compiler. Do not call this function yourself.
       |   44|BLOCK_EXPORT void _Block_object_dispose(const void *, const int)
       |   45|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   46|
       |   47|// Used by the compiler. Do not use these variables yourself.
       |   48|BLOCK_EXPORT void * _NSConcreteGlobalBlock[32]
       |   49|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   50|BLOCK_EXPORT void * _NSConcreteStackBlock[32]
       |   51|    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
       |   52|
       |   53|
       |   54|#if __cplusplus
       |   55|}
       |   56|#endif
       |   57|
       |   58|// Type correct macros
       |   59|
      0|   60|#define Block_copy(...) ((__typeof(__VA_ARGS__))_Block_copy((const void *)(__VA_ARGS__)))
      0|   61|#define Block_release(...) _Block_release((const void *)(__VA_ARGS__))
       |   62|
       |   63|
       |   64|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/MacTypes.h:
       |    1|/*
       |    2| * Copyright (c) 1985-2011 by Apple Inc.. All rights reserved.
       |    3| *
       |    4| * @APPLE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. Please obtain a copy of the License at
       |   10| * http://www.opensource.apple.com/apsl/ and read it before using this
       |   11| * file.
       |   12| * 
       |   13| * The Original Code and all software distributed under the License are
       |   14| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   15| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   16| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   18| * Please see the License for the specific language governing rights and
       |   19| * limitations under the License.
       |   20| * 
       |   21| * @APPLE_LICENSE_HEADER_END@
       |   22| */
       |   23| 
       |   24|/*
       |   25|     File:       MacTypes.h
       |   26| 
       |   27|     Contains:   Basic Macintosh data types.
       |   28| 
       |   29|     Version:    CarbonCore-769~1
       |   30|  
       |   31|     Bugs?:      For bug reports, consult the following page on
       |   32|                 the World Wide Web:
       |   33| 
       |   34|                     http://developer.apple.com/bugreporter/
       |   35| 
       |   36|*/
       |   37|#ifndef __MACTYPES__
       |   38|#define __MACTYPES__
       |   39|
       |   40|#ifndef __CONDITIONALMACROS__
       |   41|#include <ConditionalMacros.h>
       |   42|#endif
       |   43|
  ------------------
  | AFNetworkRequestFromNotification:
  |      0|   37|#ifndef __MACTYPES__
  |      0|   38|#define __MACTYPES__
  |      0|   39|
  |      0|   40|#ifndef __CONDITIONALMACROS__
  |      0|   41|#include <ConditionalMacros.h>
  |      0|   42|#endif
  |      0|   43|
  ------------------
       |   44|#include <stdbool.h>
       |   45|
       |   46|#include <sys/types.h>
  ------------------
  | -[UIActivityIndicatorView(AFNetworking) af_notificationObserver]:
  |      0|   39|
  |      0|   40|#ifndef __CONDITIONALMACROS__
  |      0|   41|#include <ConditionalMacros.h>
  |      0|   42|#endif
  |      0|   43|
  |      0|   44|#include <stdbool.h>
  |      0|   45|
  |      0|   46|#include <sys/types.h>
  ------------------
       |   47|
  ------------------
  | -[UIRefreshControl(AFNetworking) af_notificationObserver]:
  |      0|   40|#ifndef __CONDITIONALMACROS__
  |      0|   41|#include <ConditionalMacros.h>
  |      0|   42|#endif
  |      0|   43|
  |      0|   44|#include <stdbool.h>
  |      0|   45|
  |      0|   46|#include <sys/types.h>
  |      0|   47|
  ------------------
       |   48|#include <Availability.h>
       |   49|
       |   50|#if PRAGMA_ONCE
       |   51|#pragma once
       |   52|#endif
  ------------------
  | +[AFHTTPSessionManager manager]:
  |      0|   50|#if PRAGMA_ONCE
  |      0|   51|#pragma once
  |      0|   52|#endif
  ------------------
       |   53|
       |   54|#ifdef __cplusplus
       |   55|extern "C" {
       |   56|#endif
  ------------------
  | -[AFHTTPSessionManager init]:
  |      0|   54|#ifdef __cplusplus
  |      0|   55|extern "C" {
  |      0|   56|#endif
  ------------------
       |   57|
       |   58|#pragma pack(push, 2)
       |   59|
       |   60|
  ------------------
  | -[AFHTTPSessionManager initWithBaseURL:]:
  |      0|   58|#pragma pack(push, 2)
  |      0|   59|
  |      0|   60|
  ------------------
       |   61|/*
       |   62|        CarbonCore Deprecation flags.
       |   63|
       |   64|     Certain Carbon API functions are deprecated in 10.3 and later
  ------------------
  | -[AFHTTPSessionManager initWithSessionConfiguration:]:
  |      0|   62|        CarbonCore Deprecation flags.
  |      0|   63|
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  ------------------
       |   65|      systems.  These will produce a warning when compiling on 10.3.
  ------------------
  | -[UIWebView(AFNetworking) sessionManager]:
  |      0|   52|#endif
  |      0|   53|
  |      0|   54|#ifdef __cplusplus
  |      0|   55|extern "C" {
  |      0|   56|#endif
  |      0|   57|
  |      0|   58|#pragma pack(push, 2)
  |      0|   59|
  |      0|   60|
  |      0|   61|/*
  |      0|   62|        CarbonCore Deprecation flags.
  |      0|   63|
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  |      0|   65|      systems.  These will produce a warning when compiling on 10.3.
  ------------------
       |   66|
  ------------------
  | -[UIImageView(AFNetworking) setImageWithURL:]:
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  |      0|   65|      systems.  These will produce a warning when compiling on 10.3.
  |      0|   66|
  ------------------
       |   67|        Other functions and constants do not produce meaningful
       |   68|        results when building Carbon for Mac OS X.  For these
       |   69|      functions, no-op macros are provided, but only when the
  ------------------
  | +[AFNetworkActivityIndicatorManager sharedManager]:
  |      0|   61|/*
  |      0|   62|        CarbonCore Deprecation flags.
  |      0|   63|
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  |      0|   65|      systems.  These will produce a warning when compiling on 10.3.
  |      0|   66|
  |      0|   67|        Other functions and constants do not produce meaningful
  |      0|   68|        results when building Carbon for Mac OS X.  For these
  |      0|   69|      functions, no-op macros are provided, but only when the
  ------------------
       |   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
       |   71|      -DALLOW_OBSOLETE_CARBON=0.
       |   72|*/
       |   73|
       |   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
       |   75|
  ------------------
  | -[UIImageView(AFNetworking) setImageWithURL:placeholderImage:]:
  |      0|   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  ------------------
       |   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
       |   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
       |   78|
       |   79|#else
       |   80|
       |   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
       |   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  ------------------
  | -[UIWebView(AFNetworking) responseSerializer]:
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  ------------------
       |   83|
       |   84|#endif
  ------------------
  | -[AFNetworkActivityIndicatorManager init]:
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  ------------------
       |   85|
  ------------------
  | -[AFHTTPSessionManager initWithBaseURL:sessionConfiguration:]:
  |      0|   68|        results when building Carbon for Mac OS X.  For these
  |      0|   69|      functions, no-op macros are provided, but only when the
  |      0|   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  ------------------
       |   86|#ifndef NULL
       |   87|#define NULL    __DARWIN_NULL
       |   88|#endif /* ! NULL */
  ------------------
  | -[AFRefreshControlNotificationObserver setRefreshingWithStateOfTask:]:
  |      0|   66|
  |      0|   67|        Other functions and constants do not produce meaningful
  |      0|   68|        results when building Carbon for Mac OS X.  For these
  |      0|   69|      functions, no-op macros are provided, but only when the
  |      0|   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  ------------------
       |   89|#ifndef nil
       |   90|  #if defined(__has_feature) 
  ------------------
  | -[AFActivityIndicatorViewNotificationObserver setAnimatingWithStateOfTask:]:
  |      0|   65|      systems.  These will produce a warning when compiling on 10.3.
  |      0|   66|
  |      0|   67|        Other functions and constants do not produce meaningful
  |      0|   68|        results when building Carbon for Mac OS X.  For these
  |      0|   69|      functions, no-op macros are provided, but only when the
  |      0|   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  |      0|   89|#ifndef nil
  |      0|   90|  #if defined(__has_feature) 
  ------------------
  | AFPublicKeyForCertificate:
  |      0|   51|#pragma once
  |      0|   52|#endif
  |      0|   53|
  |      0|   54|#ifdef __cplusplus
  |      0|   55|extern "C" {
  |      0|   56|#endif
  |      0|   57|
  |      0|   58|#pragma pack(push, 2)
  |      0|   59|
  |      0|   60|
  |      0|   61|/*
  |      0|   62|        CarbonCore Deprecation flags.
  |      0|   63|
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  |      0|   65|      systems.  These will produce a warning when compiling on 10.3.
  |      0|   66|
  |      0|   67|        Other functions and constants do not produce meaningful
  |      0|   68|        results when building Carbon for Mac OS X.  For these
  |      0|   69|      functions, no-op macros are provided, but only when the
  |      0|   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  |      0|   71|      -DALLOW_OBSOLETE_CARBON=0.
  |      0|   72|*/
  |      0|   73|
  |      0|   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
  |      0|   75|
  |      0|   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
  |      0|   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
  |      0|   78|
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  |      0|   89|#ifndef nil
  |      0|   90|  #if defined(__has_feature) 
  ------------------
  | __AFPostReachabilityStatusChange_block_invoke:
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  |      0|   89|#ifndef nil
  |      0|   90|  #if defined(__has_feature) 
  ------------------
       |   91|    #if __has_feature(cxx_nullptr)
       |   92|      #define nil nullptr
       |   93|    #else
      3|   94|      #define nil __DARWIN_NULL
       |   95|    #endif
       |   96|  #else
  ------------------
  | -[AFAutoPurgingImageCache initWithMemoryCapacity:preferredMemoryCapacity:]:
  |      0|   79|#else
  |      0|   80|
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  |      0|   89|#ifndef nil
  |      0|   90|  #if defined(__has_feature) 
  |      0|   91|    #if __has_feature(cxx_nullptr)
  |      0|   92|      #define nil nullptr
  |      0|   93|    #else
  |      0|   94|      #define nil __DARWIN_NULL
  |      0|   95|    #endif
  |      0|   96|  #else
  ------------------
       |   97|    #define nil __DARWIN_NULL
       |   98|  #endif
       |   99|#endif
       |  100|
       |  101|/********************************************************************************
       |  102|
       |  103|    Base integer types for all target OS's and CPU's
       |  104|    
       |  105|        UInt8            8-bit unsigned integer 
  ------------------
  | -[AFQueryStringPair initWithField:value:]:
  |      0|   95|    #endif
  |      0|   96|  #else
  |      0|   97|    #define nil __DARWIN_NULL
  |      0|   98|  #endif
  |      0|   99|#endif
  |      0|  100|
  |      0|  101|/********************************************************************************
  |      0|  102|
  |      0|  103|    Base integer types for all target OS's and CPU's
  |      0|  104|    
  |      0|  105|        UInt8            8-bit unsigned integer 
  ------------------
       |  106|        SInt8            8-bit signed integer
  ------------------
  | -[AFHTTPResponseSerializer init]:
  |      0|   94|      #define nil __DARWIN_NULL
  |      0|   95|    #endif
  |      0|   96|  #else
  |      0|   97|    #define nil __DARWIN_NULL
  |      0|   98|  #endif
  |      0|   99|#endif
  |      0|  100|
  |      0|  101|/********************************************************************************
  |      0|  102|
  |      0|  103|    Base integer types for all target OS's and CPU's
  |      0|  104|    
  |      0|  105|        UInt8            8-bit unsigned integer 
  |      0|  106|        SInt8            8-bit signed integer
  ------------------
       |  107|        UInt16          16-bit unsigned integer 
       |  108|        SInt16          16-bit signed integer           
       |  109|        UInt32          32-bit unsigned integer 
       |  110|        SInt32          32-bit signed integer   
  ------------------
  | -[AFHTTPSessionManager GET:parameters:success:failure:]:
  |      0|  107|        UInt16          16-bit unsigned integer 
  |      0|  108|        SInt16          16-bit signed integer           
  |      0|  109|        UInt32          32-bit unsigned integer 
  |      0|  110|        SInt32          32-bit signed integer   
  ------------------
       |  111|        UInt64          64-bit unsigned integer 
  ------------------
  | -[UIWebView(AFNetworking) loadRequest:progress:success:failure:]:
  |      0|   94|      #define nil __DARWIN_NULL
  |      0|   95|    #endif
  |      0|   96|  #else
  |      0|   97|    #define nil __DARWIN_NULL
  |      0|   98|  #endif
  |      0|   99|#endif
  |      0|  100|
  |      0|  101|/********************************************************************************
  |      0|  102|
  |      0|  103|    Base integer types for all target OS's and CPU's
  |      0|  104|    
  |      0|  105|        UInt8            8-bit unsigned integer 
  |      0|  106|        SInt8            8-bit signed integer
  |      0|  107|        UInt16          16-bit unsigned integer 
  |      0|  108|        SInt16          16-bit signed integer           
  |      0|  109|        UInt32          32-bit unsigned integer 
  |      0|  110|        SInt32          32-bit signed integer   
  |      0|  111|        UInt64          64-bit unsigned integer 
  ------------------
       |  112|        SInt64          64-bit signed integer   
       |  113|
       |  114|*********************************************************************************/
       |  115|typedef unsigned char                   UInt8;
       |  116|typedef signed char                     SInt8;
       |  117|typedef unsigned short                  UInt16;
       |  118|typedef signed short                    SInt16;
  ------------------
  | -[AFRefreshControlNotificationObserver dealloc]:
  |      0|  112|        SInt64          64-bit signed integer   
  |      0|  113|
  |      0|  114|*********************************************************************************/
  |      0|  115|typedef unsigned char                   UInt8;
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  ------------------
       |  119|
       |  120|#if __LP64__
  ------------------
  | -[AFActivityIndicatorViewNotificationObserver dealloc]:
  |      0|  114|*********************************************************************************/
  |      0|  115|typedef unsigned char                   UInt8;
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  ------------------
       |  121|typedef unsigned int                    UInt32;
  ------------------
  | __51-[AFAutoPurgingImageCache addImage:withIdentifier:]_block_invoke:
  |      0|  111|        UInt64          64-bit unsigned integer 
  |      0|  112|        SInt64          64-bit signed integer   
  |      0|  113|
  |      0|  114|*********************************************************************************/
  |      0|  115|typedef unsigned char                   UInt8;
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  ------------------
       |  122|typedef signed int                      SInt32;
  ------------------
  | -[UIButton(AFNetworking) setImageForState:withURL:]:
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  ------------------
       |  123|#else
       |  124|typedef unsigned long                   UInt32;
  ------------------
  | +[AFNetworkReachabilityManager sharedManager]:
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  |      0|  123|#else
  |      0|  124|typedef unsigned long                   UInt32;
  ------------------
       |  125|typedef signed long                     SInt32;
       |  126|#endif
       |  127|
       |  128|/* avoid redeclaration if libkern/OSTypes.h */
       |  129|#ifndef _OS_OSTYPES_H
       |  130|#if TARGET_RT_BIG_ENDIAN
  ------------------
  | -[AFHTTPSessionManager GET:parameters:progress:success:failure:]:
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  |      0|  123|#else
  |      0|  124|typedef unsigned long                   UInt32;
  |      0|  125|typedef signed long                     SInt32;
  |      0|  126|#endif
  |      0|  127|
  |      0|  128|/* avoid redeclaration if libkern/OSTypes.h */
  |      0|  129|#ifndef _OS_OSTYPES_H
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  ------------------
       |  131|struct wide {
       |  132|  SInt32              hi;
  ------------------
  | -[UIButton(AFNetworking) setImageForState:withURL:placeholderImage:]:
  |      0|  127|
  |      0|  128|/* avoid redeclaration if libkern/OSTypes.h */
  |      0|  129|#ifndef _OS_OSTYPES_H
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  ------------------
       |  133|  UInt32              lo;
  ------------------
  | AFQueryStringPairsFromDictionary:
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  |      0|  133|  UInt32              lo;
  ------------------
       |  134|};
       |  135|typedef struct wide                     wide;
       |  136|struct UnsignedWide {
       |  137|  UInt32              hi;
       |  138|  UInt32              lo;
       |  139|};
       |  140|typedef struct UnsignedWide             UnsignedWide;
       |  141|#else
       |  142|struct wide {
  ------------------
  | -[UIImageView(AFNetworking) setImageWithURLRequest:placeholderImage:success:failure:]:
  |      0|   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
  |      0|   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
  |      0|   83|
  |      0|   84|#endif
  |      0|   85|
  |      0|   86|#ifndef NULL
  |      0|   87|#define NULL    __DARWIN_NULL
  |      0|   88|#endif /* ! NULL */
  |      0|   89|#ifndef nil
  |      0|   90|  #if defined(__has_feature) 
  |      0|   91|    #if __has_feature(cxx_nullptr)
  |      0|   92|      #define nil nullptr
  |      0|   93|    #else
  |      0|   94|      #define nil __DARWIN_NULL
  |      0|   95|    #endif
  |      0|   96|  #else
  |      0|   97|    #define nil __DARWIN_NULL
  |      0|   98|  #endif
  |      0|   99|#endif
  |      0|  100|
  |      0|  101|/********************************************************************************
  |      0|  102|
  |      0|  103|    Base integer types for all target OS's and CPU's
  |      0|  104|    
  |      0|  105|        UInt8            8-bit unsigned integer 
  |      0|  106|        SInt8            8-bit signed integer
  |      0|  107|        UInt16          16-bit unsigned integer 
  |      0|  108|        SInt16          16-bit signed integer           
  |      0|  109|        UInt32          32-bit unsigned integer 
  |      0|  110|        SInt32          32-bit signed integer   
  |      0|  111|        UInt64          64-bit unsigned integer 
  |      0|  112|        SInt64          64-bit signed integer   
  |      0|  113|
  |      0|  114|*********************************************************************************/
  |      0|  115|typedef unsigned char                   UInt8;
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  |      0|  123|#else
  |      0|  124|typedef unsigned long                   UInt32;
  |      0|  125|typedef signed long                     SInt32;
  |      0|  126|#endif
  |      0|  127|
  |      0|  128|/* avoid redeclaration if libkern/OSTypes.h */
  |      0|  129|#ifndef _OS_OSTYPES_H
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  |      0|  133|  UInt32              lo;
  |      0|  134|};
  |      0|  135|typedef struct wide                     wide;
  |      0|  136|struct UnsignedWide {
  |      0|  137|  UInt32              hi;
  |      0|  138|  UInt32              lo;
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  ------------------
       |  143|  UInt32              lo;
  ------------------
  | -[AFURLSessionManagerTaskDelegate init]:
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  |      0|  133|  UInt32              lo;
  |      0|  134|};
  |      0|  135|typedef struct wide                     wide;
  |      0|  136|struct UnsignedWide {
  |      0|  137|  UInt32              hi;
  |      0|  138|  UInt32              lo;
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  |      0|  143|  UInt32              lo;
  ------------------
       |  144|  SInt32              hi;
       |  145|};
       |  146|typedef struct wide                     wide;
  ------------------
  | -[AFHTTPSessionManager HEAD:parameters:success:failure:]:
  |      0|  136|struct UnsignedWide {
  |      0|  137|  UInt32              hi;
  |      0|  138|  UInt32              lo;
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  |      0|  143|  UInt32              lo;
  |      0|  144|  SInt32              hi;
  |      0|  145|};
  |      0|  146|typedef struct wide                     wide;
  ------------------
       |  147|struct UnsignedWide {
       |  148|  UInt32              lo;
       |  149|  UInt32              hi;
  ------------------
  | -[UIImageView(AFNetworking) cancelImageDownloadTask]:
  |      0|  144|  SInt32              hi;
  |      0|  145|};
  |      0|  146|typedef struct wide                     wide;
  |      0|  147|struct UnsignedWide {
  |      0|  148|  UInt32              lo;
  |      0|  149|  UInt32              hi;
  ------------------
       |  150|};
       |  151|typedef struct UnsignedWide             UnsignedWide;
       |  152|#endif  /* TARGET_RT_BIG_ENDIAN */
       |  153|
  ------------------
  | -[UIImageView(AFNetworking) clearActiveDownloadInformation]:
  |      0|  151|typedef struct UnsignedWide             UnsignedWide;
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  ------------------
       |  154|#endif
  ------------------
  | __53-[AFAutoPurgingImageCache removeImageWithIdentifier:]_block_invoke:
  |      0|  147|struct UnsignedWide {
  |      0|  148|  UInt32              lo;
  |      0|  149|  UInt32              hi;
  |      0|  150|};
  |      0|  151|typedef struct UnsignedWide             UnsignedWide;
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  |      0|  154|#endif
  ------------------
  | -[AFHTTPSessionManager POST:parameters:success:failure:]:
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  |      0|  154|#endif
  ------------------
       |  155|
       |  156|#if TYPE_LONGLONG
  ------------------
  | -[UIWebView(AFNetworking) loadRequest:MIMEType:textEncodingName:progress:success:failure:]:
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  |      0|  123|#else
  |      0|  124|typedef unsigned long                   UInt32;
  |      0|  125|typedef signed long                     SInt32;
  |      0|  126|#endif
  |      0|  127|
  |      0|  128|/* avoid redeclaration if libkern/OSTypes.h */
  |      0|  129|#ifndef _OS_OSTYPES_H
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  |      0|  133|  UInt32              lo;
  |      0|  134|};
  |      0|  135|typedef struct wide                     wide;
  |      0|  136|struct UnsignedWide {
  |      0|  137|  UInt32              hi;
  |      0|  138|  UInt32              lo;
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  |      0|  143|  UInt32              lo;
  |      0|  144|  SInt32              hi;
  |      0|  145|};
  |      0|  146|typedef struct wide                     wide;
  |      0|  147|struct UnsignedWide {
  |      0|  148|  UInt32              lo;
  |      0|  149|  UInt32              hi;
  |      0|  150|};
  |      0|  151|typedef struct UnsignedWide             UnsignedWide;
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  |      0|  154|#endif
  |      0|  155|
  |      0|  156|#if TYPE_LONGLONG
  ------------------
       |  157|/*
  ------------------
  | -[AFHTTPResponseSerializer validateResponse:data:error:]:
  |      0|  113|
  |      0|  114|*********************************************************************************/
  |      0|  115|typedef unsigned char                   UInt8;
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  |      0|  123|#else
  |      0|  124|typedef unsigned long                   UInt32;
  |      0|  125|typedef signed long                     SInt32;
  |      0|  126|#endif
  |      0|  127|
  |      0|  128|/* avoid redeclaration if libkern/OSTypes.h */
  |      0|  129|#ifndef _OS_OSTYPES_H
  |      0|  130|#if TARGET_RT_BIG_ENDIAN
  |      0|  131|struct wide {
  |      0|  132|  SInt32              hi;
  |      0|  133|  UInt32              lo;
  |      0|  134|};
  |      0|  135|typedef struct wide                     wide;
  |      0|  136|struct UnsignedWide {
  |      0|  137|  UInt32              hi;
  |      0|  138|  UInt32              lo;
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  |      0|  143|  UInt32              lo;
  |      0|  144|  SInt32              hi;
  |      0|  145|};
  |      0|  146|typedef struct wide                     wide;
  |      0|  147|struct UnsignedWide {
  |      0|  148|  UInt32              lo;
  |      0|  149|  UInt32              hi;
  |      0|  150|};
  |      0|  151|typedef struct UnsignedWide             UnsignedWide;
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  |      0|  154|#endif
  |      0|  155|
  |      0|  156|#if TYPE_LONGLONG
  |      0|  157|/*
  ------------------
       |  158|  Note:   wide and UnsignedWide must always be structs for source code
       |  159|           compatibility. On the other hand UInt64 and SInt64 can be
       |  160|          either a struct or a long long, depending on the compiler.
       |  161|         
       |  162|           If you use UInt64 and SInt64 you should do all operations on 
       |  163|          those data types through the functions/macros in Math64.h.  
       |  164|           This will assure that your code compiles with compilers that
       |  165|           support long long and those that don't.
       |  166|            
       |  167|           The MS Visual C/C++ compiler uses __int64 instead of long long. 
  ------------------
  | -[AFHTTPSessionManager POST:parameters:progress:success:failure:]:
  |      0|  161|         
  |      0|  162|           If you use UInt64 and SInt64 you should do all operations on 
  |      0|  163|          those data types through the functions/macros in Math64.h.  
  |      0|  164|           This will assure that your code compiles with compilers that
  |      0|  165|           support long long and those that don't.
  |      0|  166|            
  |      0|  167|           The MS Visual C/C++ compiler uses __int64 instead of long long. 
  ------------------
       |  168|*/
       |  169|    #if defined(_MSC_VER) && !defined(__MWERKS__) && defined(_M_IX86)
       |  170|      typedef   signed __int64                SInt64;
       |  171|        typedef unsigned __int64                UInt64;
  ------------------
  | -[AFNetworkReachabilityManager initWithReachability:]:
  |      0|  161|         
  |      0|  162|           If you use UInt64 and SInt64 you should do all operations on 
  |      0|  163|          those data types through the functions/macros in Math64.h.  
  |      0|  164|           This will assure that your code compiles with compilers that
  |      0|  165|           support long long and those that don't.
  |      0|  166|            
  |      0|  167|           The MS Visual C/C++ compiler uses __int64 instead of long long. 
  |      0|  168|*/
  |      0|  169|    #if defined(_MSC_VER) && !defined(__MWERKS__) && defined(_M_IX86)
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  ------------------
       |  172|    #else
       |  173|      typedef   signed long long              SInt64;
       |  174|        typedef unsigned long long              UInt64;
       |  175|    #endif
  ------------------
  | +[AFImageDownloader defaultInstance]:
  |      0|  168|*/
  |      0|  169|    #if defined(_MSC_VER) && !defined(__MWERKS__) && defined(_M_IX86)
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  |      0|  172|    #else
  |      0|  173|      typedef   signed long long              SInt64;
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  ------------------
       |  176|#else
  ------------------
  | -[AFNetworkReachabilityManager init]:
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  ------------------
  | -[AFHTTPSessionManager POST:parameters:constructingBodyWithBlock:success:failure:]:
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  ------------------
       |  177|
  ------------------
  | -[AFAutoPurgingImageCache imageWithIdentifier:]:
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  |      0|  172|    #else
  |      0|  173|      typedef   signed long long              SInt64;
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  |      0|  177|
  ------------------
       |  178|
       |  179|typedef wide                            SInt64;
  ------------------
  | +[AFSecurityPolicy defaultPinnedCertificates]:
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  |      0|  172|    #else
  |      0|  173|      typedef   signed long long              SInt64;
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  |      0|  177|
  |      0|  178|
  |      0|  179|typedef wide                            SInt64;
  ------------------
       |  180|typedef UnsignedWide                    UInt64;
  ------------------
  | __91-[UIButton(AFNetworking) setImageForState:withURLRequest:placeholderImage:success:failure:]_block_invoke:
  |      0|  169|    #if defined(_MSC_VER) && !defined(__MWERKS__) && defined(_M_IX86)
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  |      0|  172|    #else
  |      0|  173|      typedef   signed long long              SInt64;
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  |      0|  177|
  |      0|  178|
  |      0|  179|typedef wide                            SInt64;
  |      0|  180|typedef UnsignedWide                    UInt64;
  ------------------
       |  181|#endif  /* TYPE_LONGLONG */
       |  182|
       |  183|/********************************************************************************
       |  184|
       |  185|    Base fixed point types 
  ------------------
  | AFHTTPRequestSerializerObservedKeyPaths:
  |      0|  177|
  |      0|  178|
  |      0|  179|typedef wide                            SInt64;
  |      0|  180|typedef UnsignedWide                    UInt64;
  |      0|  181|#endif  /* TYPE_LONGLONG */
  |      0|  182|
  |      0|  183|/********************************************************************************
  |      0|  184|
  |      0|  185|    Base fixed point types 
  ------------------
       |  186|    
  ------------------
  | -[AFHTTPResponseSerializer initWithCoder:]:
  |      0|  176|#else
  |      0|  177|
  |      0|  178|
  |      0|  179|typedef wide                            SInt64;
  |      0|  180|typedef UnsignedWide                    UInt64;
  |      0|  181|#endif  /* TYPE_LONGLONG */
  |      0|  182|
  |      0|  183|/********************************************************************************
  |      0|  184|
  |      0|  185|    Base fixed point types 
  |      0|  186|    
  ------------------
       |  187|        Fixed           16-bit signed integer plus 16-bit fraction
       |  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
       |  189|        Fract           2-bit signed integer plus 30-bit fraction
  ------------------
  | __91-[UIButton(AFNetworking) setImageForState:withURLRequest:placeholderImage:success:failure:]_block_invoke41:
  |      0|  181|#endif  /* TYPE_LONGLONG */
  |      0|  182|
  |      0|  183|/********************************************************************************
  |      0|  184|
  |      0|  185|    Base fixed point types 
  |      0|  186|    
  |      0|  187|        Fixed           16-bit signed integer plus 16-bit fraction
  |      0|  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
  |      0|  189|        Fract           2-bit signed integer plus 30-bit fraction
  ------------------
       |  190|        ShortFixed      8-bit signed integer plus 8-bit fraction
       |  191|        
       |  192|*********************************************************************************/
       |  193|typedef SInt32                          Fixed;
  ------------------
  | -[UIButton(AFNetworking) setImageForState:withURLRequest:placeholderImage:success:failure:]:
  |      0|  139|};
  |      0|  140|typedef struct UnsignedWide             UnsignedWide;
  |      0|  141|#else
  |      0|  142|struct wide {
  |      0|  143|  UInt32              lo;
  |      0|  144|  SInt32              hi;
  |      0|  145|};
  |      0|  146|typedef struct wide                     wide;
  |      0|  147|struct UnsignedWide {
  |      0|  148|  UInt32              lo;
  |      0|  149|  UInt32              hi;
  |      0|  150|};
  |      0|  151|typedef struct UnsignedWide             UnsignedWide;
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  |      0|  154|#endif
  |      0|  155|
  |      0|  156|#if TYPE_LONGLONG
  |      0|  157|/*
  |      0|  158|  Note:   wide and UnsignedWide must always be structs for source code
  |      0|  159|           compatibility. On the other hand UInt64 and SInt64 can be
  |      0|  160|          either a struct or a long long, depending on the compiler.
  |      0|  161|         
  |      0|  162|           If you use UInt64 and SInt64 you should do all operations on 
  |      0|  163|          those data types through the functions/macros in Math64.h.  
  |      0|  164|           This will assure that your code compiles with compilers that
  |      0|  165|           support long long and those that don't.
  |      0|  166|            
  |      0|  167|           The MS Visual C/C++ compiler uses __int64 instead of long long. 
  |      0|  168|*/
  |      0|  169|    #if defined(_MSC_VER) && !defined(__MWERKS__) && defined(_M_IX86)
  |      0|  170|      typedef   signed __int64                SInt64;
  |      0|  171|        typedef unsigned __int64                UInt64;
  |      0|  172|    #else
  |      0|  173|      typedef   signed long long              SInt64;
  |      0|  174|        typedef unsigned long long              UInt64;
  |      0|  175|    #endif
  |      0|  176|#else
  |      0|  177|
  |      0|  178|
  |      0|  179|typedef wide                            SInt64;
  |      0|  180|typedef UnsignedWide                    UInt64;
  |      0|  181|#endif  /* TYPE_LONGLONG */
  |      0|  182|
  |      0|  183|/********************************************************************************
  |      0|  184|
  |      0|  185|    Base fixed point types 
  |      0|  186|    
  |      0|  187|        Fixed           16-bit signed integer plus 16-bit fraction
  |      0|  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
  |      0|  189|        Fract           2-bit signed integer plus 30-bit fraction
  |      0|  190|        ShortFixed      8-bit signed integer plus 8-bit fraction
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  ------------------
  | __91-[AFHTTPSessionManager POST:parameters:constructingBodyWithBlock:progress:success:failure:]_block_invoke:
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  ------------------
       |  194|typedef Fixed *                         FixedPtr;
       |  195|typedef SInt32                          Fract;
       |  196|typedef Fract *                         FractPtr;
       |  197|typedef UInt32                          UnsignedFixed;
  ------------------
  | -[AFAutoPurgingImageCache imageCacheKeyFromURLRequest:withAdditionalIdentifier:]:
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  |      0|  194|typedef Fixed *                         FixedPtr;
  |      0|  195|typedef SInt32                          Fract;
  |      0|  196|typedef Fract *                         FractPtr;
  |      0|  197|typedef UInt32                          UnsignedFixed;
  ------------------
       |  198|typedef UnsignedFixed *                 UnsignedFixedPtr;
       |  199|typedef short                           ShortFixed;
       |  200|typedef ShortFixed *                    ShortFixedPtr;
       |  201|
  ------------------
  | -[UIButton(AFNetworking) setBackgroundImageForState:withURL:]:
  |      0|  199|typedef short                           ShortFixed;
  |      0|  200|typedef ShortFixed *                    ShortFixedPtr;
  |      0|  201|
  ------------------
       |  202|
       |  203|/********************************************************************************
       |  204|
       |  205|    Base floating point types 
       |  206|    
       |  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
       |  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
       |  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
       |  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  ------------------
  | __78-[AFImageDownloader downloadImageForURLRequest:withReceiptID:success:failure:]_block_invoke_2:
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  ------------------
  | -[AFSecurityPolicy init]:
  |      0|  201|
  |      0|  202|
  |      0|  203|/********************************************************************************
  |      0|  204|
  |      0|  205|    Base floating point types 
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  ------------------
       |  211|        
  ------------------
  | -[UIButton(AFNetworking) setBackgroundImageForState:withURL:placeholderImage:]:
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  |      0|  211|        
  ------------------
       |  212|    Note: These are fixed size floating point types, useful when writing a floating
       |  213|          point value to disk.  If your compiler does not support a particular size 
       |  214|          float, a struct is used instead.
       |  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  ------------------
  | -[AFHTTPSessionManager POST:parameters:constructingBodyWithBlock:progress:success:failure:]:
  |      0|  184|
  |      0|  185|    Base fixed point types 
  |      0|  186|    
  |      0|  187|        Fixed           16-bit signed integer plus 16-bit fraction
  |      0|  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
  |      0|  189|        Fract           2-bit signed integer plus 30-bit fraction
  |      0|  190|        ShortFixed      8-bit signed integer plus 8-bit fraction
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  |      0|  194|typedef Fixed *                         FixedPtr;
  |      0|  195|typedef SInt32                          Fract;
  |      0|  196|typedef Fract *                         FractPtr;
  |      0|  197|typedef UInt32                          UnsignedFixed;
  |      0|  198|typedef UnsignedFixed *                 UnsignedFixedPtr;
  |      0|  199|typedef short                           ShortFixed;
  |      0|  200|typedef ShortFixed *                    ShortFixedPtr;
  |      0|  201|
  |      0|  202|
  |      0|  203|/********************************************************************************
  |      0|  204|
  |      0|  205|    Base floating point types 
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  |      0|  211|        
  |      0|  212|    Note: These are fixed size floating point types, useful when writing a floating
  |      0|  213|          point value to disk.  If your compiler does not support a particular size 
  |      0|  214|          float, a struct is used instead.
  |      0|  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  ------------------
       |  216|          you want a floating point representation that is natural for any given
       |  217|          compiler, but might be a different size on different compilers.
       |  218|
       |  219|*********************************************************************************/
       |  220|typedef float               Float32;
       |  221|typedef double              Float64;
       |  222|struct Float80 {
       |  223|    SInt16  exp;
       |  224|    UInt16  man[4];
       |  225|};
       |  226|typedef struct Float80 Float80;
       |  227|
  ------------------
  | -[AFHTTPSessionManager PUT:parameters:success:failure:]:
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  ------------------
       |  228|struct Float96 {
  ------------------
  | -[AFSecurityPolicy setPinnedCertificates:]:
  |      0|  212|    Note: These are fixed size floating point types, useful when writing a floating
  |      0|  213|          point value to disk.  If your compiler does not support a particular size 
  |      0|  214|          float, a struct is used instead.
  |      0|  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  |      0|  216|          you want a floating point representation that is natural for any given
  |      0|  217|          compiler, but might be a different size on different compilers.
  |      0|  218|
  |      0|  219|*********************************************************************************/
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |      0|  228|struct Float96 {
  ------------------
       |  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  ------------------
  | -[AFJSONResponseSerializer init]:
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |      0|  228|struct Float96 {
  |      0|  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  ------------------
       |  230|    UInt16  man[4];
       |  231|};
       |  232|typedef struct Float96 Float96;
       |  233|struct Float32Point {
       |  234|    Float32             x;
       |  235|    Float32             y;
       |  236|};
       |  237|typedef struct Float32Point Float32Point;
       |  238|
       |  239|/********************************************************************************
  ------------------
  | -[AFHTTPSessionManager PATCH:parameters:success:failure:]:
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  ------------------
       |  240|
       |  241|    MacOS Memory Manager types
       |  242|    
       |  243|        Ptr             Pointer to a non-relocatable block
       |  244|        Handle          Pointer to a master pointer to a relocatable block
       |  245|        Size            The number of bytes in a block (signed for historical reasons)
       |  246|        
       |  247|*********************************************************************************/
       |  248|typedef char *                          Ptr;
       |  249|typedef Ptr *                           Handle;
       |  250|typedef long                            Size;
       |  251|
  ------------------
  | -[AFHTTPSessionManager DELETE:parameters:success:failure:]:
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  ------------------
       |  252|/********************************************************************************
  ------------------
  | __78-[AFImageDownloader downloadImageForURLRequest:withReceiptID:success:failure:]_block_invoke_2176:
  |      0|  227|
  |      0|  228|struct Float96 {
  |      0|  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  |      0|  230|    UInt16  man[4];
  |      0|  231|};
  |      0|  232|typedef struct Float96 Float96;
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  ------------------
       |  253|
       |  254|    Higher level basic types
       |  255|    
  ------------------
  | -[AFHTTPRequestSerializer init]:
  |      0|  202|
  |      0|  203|/********************************************************************************
  |      0|  204|
  |      0|  205|    Base floating point types 
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  |      0|  211|        
  |      0|  212|    Note: These are fixed size floating point types, useful when writing a floating
  |      0|  213|          point value to disk.  If your compiler does not support a particular size 
  |      0|  214|          float, a struct is used instead.
  |      0|  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  |      0|  216|          you want a floating point representation that is natural for any given
  |      0|  217|          compiler, but might be a different size on different compilers.
  |      0|  218|
  |      0|  219|*********************************************************************************/
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |       |  228|struct Float96 {
  |       |  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  |       |  230|    UInt16  man[4];
  |       |  231|};
  |       |  232|typedef struct Float96 Float96;
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  ------------------
       |  256|        OSErr                   16-bit result error code
       |  257|        OSStatus                32-bit result error code
       |  258|        LogicalAddress          Address in the clients virtual address space
       |  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  ------------------
  | __101-[UIButton(AFNetworking) setBackgroundImageForState:withURLRequest:placeholderImage:success:failure:]_block_invoke:
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  ------------------
       |  260|        PhysicalAddress         Real address as used on the hardware bus
       |  261|        BytePtr                 Pointer to an array of bytes
       |  262|        ByteCount               The size of an array of bytes
       |  263|        ByteOffset              An offset into an array of bytes
       |  264|        ItemCount               32-bit iteration count
       |  265|        OptionBits              Standard 32-bit set of bit flags
       |  266|        PBVersion               ?
       |  267|        Duration                32-bit millisecond timer for drivers
       |  268|        AbsoluteTime            64-bit clock
  ------------------
  | __101-[UIButton(AFNetworking) setBackgroundImageForState:withURLRequest:placeholderImage:success:failure:]_block_invoke61:
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  ------------------
       |  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  ------------------
  | __116-[AFHTTPSessionManager dataTaskWithHTTPMethod:URLString:parameters:uploadProgress:downloadProgress:success:failure:]_block_invoke:
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  ------------------
       |  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
       |  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
       |  272|                                English) together with other region-dependent characteristics (e.g. date format)
  ------------------
  | -[UIButton(AFNetworking) setBackgroundImageForState:withURLRequest:placeholderImage:success:failure:]:
  |      0|  218|
  |      0|  219|*********************************************************************************/
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |      0|  228|struct Float96 {
  |      0|  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  |      0|  230|    UInt16  man[4];
  |      0|  231|};
  |      0|  232|typedef struct Float96 Float96;
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  ------------------
       |  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  ------------------
  | __78-[AFImageDownloader downloadImageForURLRequest:withReceiptID:success:failure:]_block_invoke:
  |      0|  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
  |      0|  189|        Fract           2-bit signed integer plus 30-bit fraction
  |      0|  190|        ShortFixed      8-bit signed integer plus 8-bit fraction
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  |      0|  194|typedef Fixed *                         FixedPtr;
  |      0|  195|typedef SInt32                          Fract;
  |      0|  196|typedef Fract *                         FractPtr;
  |      0|  197|typedef UInt32                          UnsignedFixed;
  |      0|  198|typedef UnsignedFixed *                 UnsignedFixedPtr;
  |      0|  199|typedef short                           ShortFixed;
  |      0|  200|typedef ShortFixed *                    ShortFixedPtr;
  |      0|  201|
  |      0|  202|
  |      0|  203|/********************************************************************************
  |      0|  204|
  |      0|  205|    Base floating point types 
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  |      0|  211|        
  |      0|  212|    Note: These are fixed size floating point types, useful when writing a floating
  |      0|  213|          point value to disk.  If your compiler does not support a particular size 
  |      0|  214|          float, a struct is used instead.
  |      0|  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  |      0|  216|          you want a floating point representation that is natural for any given
  |      0|  217|          compiler, but might be a different size on different compilers.
  |      0|  218|
  |      0|  219|*********************************************************************************/
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |      0|  228|struct Float96 {
  |      0|  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  |      0|  230|    UInt16  man[4];
  |      0|  231|};
  |      0|  232|typedef struct Float96 Float96;
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  |      0|  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  ------------------
       |  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
       |  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
       |  276|        
       |  277|*********************************************************************************/
       |  278|typedef SInt16                          OSErr;
       |  279|typedef SInt32                          OSStatus;
  ------------------
  | -[AFImageDownloader downloadImageForURLRequest:withReceiptID:success:failure:]:
  |      0|  186|    
  |      0|  187|        Fixed           16-bit signed integer plus 16-bit fraction
  |      0|  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
  |      0|  189|        Fract           2-bit signed integer plus 30-bit fraction
  |      0|  190|        ShortFixed      8-bit signed integer plus 8-bit fraction
  |      0|  191|        
  |      0|  192|*********************************************************************************/
  |      0|  193|typedef SInt32                          Fixed;
  |      0|  194|typedef Fixed *                         FixedPtr;
  |      0|  195|typedef SInt32                          Fract;
  |      0|  196|typedef Fract *                         FractPtr;
  |      0|  197|typedef UInt32                          UnsignedFixed;
  |      0|  198|typedef UnsignedFixed *                 UnsignedFixedPtr;
  |      0|  199|typedef short                           ShortFixed;
  |      0|  200|typedef ShortFixed *                    ShortFixedPtr;
  |      0|  201|
  |      0|  202|
  |      0|  203|/********************************************************************************
  |      0|  204|
  |      0|  205|    Base floating point types 
  |      0|  206|    
  |      0|  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
  |      0|  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
  |      0|  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
  |      0|  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
  |      0|  211|        
  |      0|  212|    Note: These are fixed size floating point types, useful when writing a floating
  |      0|  213|          point value to disk.  If your compiler does not support a particular size 
  |      0|  214|          float, a struct is used instead.
  |      0|  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
  |      0|  216|          you want a floating point representation that is natural for any given
  |      0|  217|          compiler, but might be a different size on different compilers.
  |      0|  218|
  |      0|  219|*********************************************************************************/
  |      0|  220|typedef float               Float32;
  |      0|  221|typedef double              Float64;
  |      0|  222|struct Float80 {
  |      0|  223|    SInt16  exp;
  |      0|  224|    UInt16  man[4];
  |      0|  225|};
  |      0|  226|typedef struct Float80 Float80;
  |      0|  227|
  |      0|  228|struct Float96 {
  |      0|  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
  |      0|  230|    UInt16  man[4];
  |      0|  231|};
  |      0|  232|typedef struct Float96 Float96;
  |      0|  233|struct Float32Point {
  |      0|  234|    Float32             x;
  |      0|  235|    Float32             y;
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  |      0|  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  |      0|  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
  |      0|  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
  |      0|  276|        
  |      0|  277|*********************************************************************************/
  |      0|  278|typedef SInt16                          OSErr;
  |      0|  279|typedef SInt32                          OSStatus;
  ------------------
       |  280|typedef void *                          LogicalAddress;
       |  281|typedef const void *                    ConstLogicalAddress;
       |  282|typedef void *                          PhysicalAddress;
  ------------------
  | -[UIButton(AFNetworking) cancelImageDownloadTaskForState:]:
  |      0|  276|        
  |      0|  277|*********************************************************************************/
  |      0|  278|typedef SInt16                          OSErr;
  |      0|  279|typedef SInt32                          OSStatus;
  |      0|  280|typedef void *                          LogicalAddress;
  |      0|  281|typedef const void *                    ConstLogicalAddress;
  |      0|  282|typedef void *                          PhysicalAddress;
  ------------------
       |  283|typedef UInt8 *                         BytePtr;
       |  284|typedef unsigned long                   ByteCount;
       |  285|typedef unsigned long                   ByteOffset;
       |  286|typedef SInt32                          Duration;
       |  287|typedef UnsignedWide                    AbsoluteTime;
       |  288|typedef UInt32                          OptionBits;
  ------------------
  | -[AFJSONResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  236|};
  |      0|  237|typedef struct Float32Point Float32Point;
  |      0|  238|
  |      0|  239|/********************************************************************************
  |      0|  240|
  |      0|  241|    MacOS Memory Manager types
  |      0|  242|    
  |      0|  243|        Ptr             Pointer to a non-relocatable block
  |      0|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      0|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      0|  248|typedef char *                          Ptr;
  |      0|  249|typedef Ptr *                           Handle;
  |      0|  250|typedef long                            Size;
  |      0|  251|
  |      0|  252|/********************************************************************************
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  |      0|  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  |      0|  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
  |      0|  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
  |      0|  276|        
  |      0|  277|*********************************************************************************/
  |      0|  278|typedef SInt16                          OSErr;
  |      0|  279|typedef SInt32                          OSStatus;
  |      0|  280|typedef void *                          LogicalAddress;
  |      0|  281|typedef const void *                    ConstLogicalAddress;
  |      0|  282|typedef void *                          PhysicalAddress;
  |      0|  283|typedef UInt8 *                         BytePtr;
  |      0|  284|typedef unsigned long                   ByteCount;
  |      0|  285|typedef unsigned long                   ByteOffset;
  |      0|  286|typedef SInt32                          Duration;
  |      0|  287|typedef UnsignedWide                    AbsoluteTime;
  |      0|  288|typedef UInt32                          OptionBits;
  ------------------
       |  289|typedef unsigned long                   ItemCount;
       |  290|typedef UInt32                          PBVersion;
  ------------------
  | -[UIButton(AFNetworking) cancelBackgroundImageDownloadTaskForState:]:
  |      0|  284|typedef unsigned long                   ByteCount;
  |      0|  285|typedef unsigned long                   ByteOffset;
  |      0|  286|typedef SInt32                          Duration;
  |      0|  287|typedef UnsignedWide                    AbsoluteTime;
  |      0|  288|typedef UInt32                          OptionBits;
  |      0|  289|typedef unsigned long                   ItemCount;
  |      0|  290|typedef UInt32                          PBVersion;
  ------------------
       |  291|typedef SInt16                          ScriptCode;
       |  292|typedef SInt16                          LangCode;
       |  293|typedef SInt16                          RegionCode;
  ------------------
  | -[AFHTTPSessionManager dataTaskWithHTTPMethod:URLString:parameters:uploadProgress:downloadProgress:success:failure:]:
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  |      0|  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  |      0|  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
  |      0|  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
  |      0|  276|        
  |      0|  277|*********************************************************************************/
  |      0|  278|typedef SInt16                          OSErr;
  |      0|  279|typedef SInt32                          OSStatus;
  |      0|  280|typedef void *                          LogicalAddress;
  |      0|  281|typedef const void *                    ConstLogicalAddress;
  |      0|  282|typedef void *                          PhysicalAddress;
  |      0|  283|typedef UInt8 *                         BytePtr;
  |      0|  284|typedef unsigned long                   ByteCount;
  |      0|  285|typedef unsigned long                   ByteOffset;
  |      0|  286|typedef SInt32                          Duration;
  |      0|  287|typedef UnsignedWide                    AbsoluteTime;
  |      0|  288|typedef UInt32                          OptionBits;
  |      0|  289|typedef unsigned long                   ItemCount;
  |      0|  290|typedef UInt32                          PBVersion;
  |      0|  291|typedef SInt16                          ScriptCode;
  |      0|  292|typedef SInt16                          LangCode;
  |      0|  293|typedef SInt16                          RegionCode;
  ------------------
       |  294|typedef UInt32                          FourCharCode;
       |  295|typedef FourCharCode                    OSType;
       |  296|typedef FourCharCode                    ResType;
       |  297|typedef OSType *                        OSTypePtr;
       |  298|typedef ResType *                       ResTypePtr;
  ------------------
  | __55-[AFImageDownloader cancelTaskForImageDownloadReceipt:]_block_invoke240:
  |      0|  296|typedef FourCharCode                    ResType;
  |      0|  297|typedef OSType *                        OSTypePtr;
  |      0|  298|typedef ResType *                       ResTypePtr;
  ------------------
       |  299|/********************************************************************************
       |  300|
       |  301|    Boolean types and values
       |  302|    
  ------------------
  | -[AFJSONResponseSerializer initWithCoder:]:
  |      0|  292|typedef SInt16                          LangCode;
  |      0|  293|typedef SInt16                          RegionCode;
  |      0|  294|typedef UInt32                          FourCharCode;
  |      0|  295|typedef FourCharCode                    OSType;
  |      0|  296|typedef FourCharCode                    ResType;
  |      0|  297|typedef OSType *                        OSTypePtr;
  |      0|  298|typedef ResType *                       ResTypePtr;
  |      0|  299|/********************************************************************************
  |      0|  300|
  |      0|  301|    Boolean types and values
  |      0|  302|    
  ------------------
       |  303|        Boolean         Mac OS historic type, sizeof(Boolean)==1
       |  304|        bool            Defined in stdbool.h, ISO C/C++ standard type
       |  305|        false           Now defined in stdbool.h
       |  306|        true            Now defined in stdbool.h
       |  307|        
       |  308|*********************************************************************************/
       |  309|typedef unsigned char                   Boolean;
       |  310|/********************************************************************************
       |  311|
       |  312|    Function Pointer Types
       |  313|    
       |  314|        ProcPtr                 Generic pointer to a function
       |  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
  ------------------
  | __72-[AFURLSessionManagerTaskDelegate URLSession:task:didCompleteWithError:]_block_invoke148:
  |      0|  290|typedef UInt32                          PBVersion;
  |      0|  291|typedef SInt16                          ScriptCode;
  |      0|  292|typedef SInt16                          LangCode;
  |      0|  293|typedef SInt16                          RegionCode;
  |      0|  294|typedef UInt32                          FourCharCode;
  |      0|  295|typedef FourCharCode                    OSType;
  |      0|  296|typedef FourCharCode                    ResType;
  |      0|  297|typedef OSType *                        OSTypePtr;
  |      0|  298|typedef ResType *                       ResTypePtr;
  |      0|  299|/********************************************************************************
  |      0|  300|
  |      0|  301|    Boolean types and values
  |      0|  302|    
  |      0|  303|        Boolean         Mac OS historic type, sizeof(Boolean)==1
  |      0|  304|        bool            Defined in stdbool.h, ISO C/C++ standard type
  |      0|  305|        false           Now defined in stdbool.h
  |      0|  306|        true            Now defined in stdbool.h
  |      0|  307|        
  |      0|  308|*********************************************************************************/
  |      0|  309|typedef unsigned char                   Boolean;
  |      0|  310|/********************************************************************************
  |      0|  311|
  |      0|  312|    Function Pointer Types
  |      0|  313|    
  |      0|  314|        ProcPtr                 Generic pointer to a function
  |      0|  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
  ------------------
       |  316|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
  ------------------
  | -[AFImageDownloader safelyRemoveMergedTaskWithIdentifier:]:
  |      0|  308|*********************************************************************************/
  |      0|  309|typedef unsigned char                   Boolean;
  |      0|  310|/********************************************************************************
  |      0|  311|
  |      0|  312|    Function Pointer Types
  |      0|  313|    
  |      0|  314|        ProcPtr                 Generic pointer to a function
  |      0|  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
  |      0|  316|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
  ------------------
       |  317|        
       |  318|        ProcHandle              Pointer to a ProcPtr
  ------------------
  | -[AFURLSessionManagerTaskDelegate URLSession:task:didCompleteWithError:]:
  |      0|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      0|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      0|  258|        LogicalAddress          Address in the clients virtual address space
  |      0|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  |      0|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      0|  261|        BytePtr                 Pointer to an array of bytes
  |      0|  262|        ByteCount               The size of an array of bytes
  |      0|  263|        ByteOffset              An offset into an array of bytes
  |      0|  264|        ItemCount               32-bit iteration count
  |      0|  265|        OptionBits              Standard 32-bit set of bit flags
  |      0|  266|        PBVersion               ?
  |      0|  267|        Duration                32-bit millisecond timer for drivers
  |      0|  268|        AbsoluteTime            64-bit clock
  |      0|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      0|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      0|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      0|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  |      0|  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  |      0|  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
  |      0|  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
  |      0|  276|        
  |      0|  277|*********************************************************************************/
  |      0|  278|typedef SInt16                          OSErr;
  |      0|  279|typedef SInt32                          OSStatus;
  |      0|  280|typedef void *                          LogicalAddress;
  |      0|  281|typedef const void *                    ConstLogicalAddress;
  |      0|  282|typedef void *                          PhysicalAddress;
  |      0|  283|typedef UInt8 *                         BytePtr;
  |      0|  284|typedef unsigned long                   ByteCount;
  |      0|  285|typedef unsigned long                   ByteOffset;
  |      0|  286|typedef SInt32                          Duration;
  |      0|  287|typedef UnsignedWide                    AbsoluteTime;
  |      0|  288|typedef UInt32                          OptionBits;
  |      0|  289|typedef unsigned long                   ItemCount;
  |      0|  290|typedef UInt32                          PBVersion;
  |      0|  291|typedef SInt16                          ScriptCode;
  |      0|  292|typedef SInt16                          LangCode;
  |      0|  293|typedef SInt16                          RegionCode;
  |      0|  294|typedef UInt32                          FourCharCode;
  |      0|  295|typedef FourCharCode                    OSType;
  |      0|  296|typedef FourCharCode                    ResType;
  |      0|  297|typedef OSType *                        OSTypePtr;
  |      0|  298|typedef ResType *                       ResTypePtr;
  |      0|  299|/********************************************************************************
  |      0|  300|
  |      0|  301|    Boolean types and values
  |      0|  302|    
  |      0|  303|        Boolean         Mac OS historic type, sizeof(Boolean)==1
  |      0|  304|        bool            Defined in stdbool.h, ISO C/C++ standard type
  |      0|  305|        false           Now defined in stdbool.h
  |      0|  306|        true            Now defined in stdbool.h
  |      0|  307|        
  |      0|  308|*********************************************************************************/
  |      0|  309|typedef unsigned char                   Boolean;
  |      0|  310|/********************************************************************************
  |      0|  311|
  |      0|  312|    Function Pointer Types
  |      0|  313|    
  |      0|  314|        ProcPtr                 Generic pointer to a function
  |      0|  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
  |      0|  316|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
  |      0|  317|        
  |      0|  318|        ProcHandle              Pointer to a ProcPtr
  ------------------
       |  319|        UniversalProcHandle     Pointer to a UniversalProcPtr
       |  320|        
       |  321|*********************************************************************************/
       |  322|typedef CALLBACK_API_C( long , ProcPtr )();
       |  323|typedef CALLBACK_API( void , Register68kProcPtr )();
       |  324|#if TARGET_RT_MAC_CFM
       |  325|/*  The RoutineDescriptor structure is defined in MixedMode.h */
       |  326|typedef struct RoutineDescriptor *UniversalProcPtr;
       |  327|#else
       |  328|typedef ProcPtr                         UniversalProcPtr;
       |  329|#endif  /* TARGET_RT_MAC_CFM */
       |  330|
       |  331|typedef ProcPtr *                       ProcHandle;
       |  332|typedef UniversalProcPtr *              UniversalProcHandle;
  ------------------
  | -[AFSecurityPolicy initWithCoder:]:
  |      0|  319|        UniversalProcHandle     Pointer to a UniversalProcPtr
  |      0|  320|        
  |      0|  321|*********************************************************************************/
  |      0|  322|typedef CALLBACK_API_C( long , ProcPtr )();
  |      0|  323|typedef CALLBACK_API( void , Register68kProcPtr )();
  |      0|  324|#if TARGET_RT_MAC_CFM
  |      0|  325|/*  The RoutineDescriptor structure is defined in MixedMode.h */
  |      0|  326|typedef struct RoutineDescriptor *UniversalProcPtr;
  |      0|  327|#else
  |      0|  328|typedef ProcPtr                         UniversalProcPtr;
  |      0|  329|#endif  /* TARGET_RT_MAC_CFM */
  |      0|  330|
  |      0|  331|typedef ProcPtr *                       ProcHandle;
  |      0|  332|typedef UniversalProcPtr *              UniversalProcHandle;
  ------------------
       |  333|/********************************************************************************
       |  334|
  ------------------
  | -[AFHTTPSessionManager initWithCoder:]:
  |      0|  307|        
  |      0|  308|*********************************************************************************/
  |      0|  309|typedef unsigned char                   Boolean;
  |      0|  310|/********************************************************************************
  |      0|  311|
  |      0|  312|    Function Pointer Types
  |      0|  313|    
  |      0|  314|        ProcPtr                 Generic pointer to a function
  |      0|  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
  |       |  316|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
  |       |  317|        
  |      0|  318|        ProcHandle              Pointer to a ProcPtr
  |      0|  319|        UniversalProcHandle     Pointer to a UniversalProcPtr
  |      0|  320|        
  |      0|  321|*********************************************************************************/
  |      0|  322|typedef CALLBACK_API_C( long , ProcPtr )();
  |      0|  323|typedef CALLBACK_API( void , Register68kProcPtr )();
  |      0|  324|#if TARGET_RT_MAC_CFM
  |      0|  325|/*  The RoutineDescriptor structure is defined in MixedMode.h */
  |      0|  326|typedef struct RoutineDescriptor *UniversalProcPtr;
  |      0|  327|#else
  |      0|  328|typedef ProcPtr                         UniversalProcPtr;
  |      0|  329|#endif  /* TARGET_RT_MAC_CFM */
  |      0|  330|
  |      0|  331|typedef ProcPtr *                       ProcHandle;
  |      0|  332|typedef UniversalProcPtr *              UniversalProcHandle;
  |      0|  333|/********************************************************************************
  |      0|  334|
  ------------------
       |  335|    RefCon Types
       |  336|    
       |  337|        For access to private data in callbacks, etc.; refcons are generally
       |  338|        used as a pointer to something, but in the 32-bit world refcons in
       |  339|        different APIs have had various types: pointer, unsigned scalar, and
  ------------------
  | -[AFHTTPRequestSerializer setQueryStringSerializationWithStyle:]:
  |      0|  336|    
  |      0|  337|        For access to private data in callbacks, etc.; refcons are generally
  |      0|  338|        used as a pointer to something, but in the 32-bit world refcons in
  |      0|  339|        different APIs have had various types: pointer, unsigned scalar, and
  ------------------
       |  340|        signed scalar. The RefCon types defined here support the current 32-bit
       |  341|        usage but provide normalization to pointer types for 64-bit.
       |  342|        
  ------------------
  | -[AFXMLParserResponseSerializer init]:
  |      0|  333|/********************************************************************************
  |      0|  334|
  |      0|  335|    RefCon Types
  |      0|  336|    
  |      0|  337|        For access to private data in callbacks, etc.; refcons are generally
  |      0|  338|        used as a pointer to something, but in the 32-bit world refcons in
  |      0|  339|        different APIs have had various types: pointer, unsigned scalar, and
  |      0|  340|        signed scalar. The RefCon types defined here support the current 32-bit
  |      0|  341|        usage but provide normalization to pointer types for 64-bit.
  |      0|  342|        
  ------------------
       |  343|        PRefCon is preferred for new APIs; URefCon and SRefCon are primarily
       |  344|        for compatibility with existing APIs.
       |  345|        
       |  346|*********************************************************************************/
       |  347|typedef void *                          PRefCon;
       |  348|#if __LP64__
  ------------------
  | -[AFURLSessionManagerTaskDelegate URLSession:downloadTask:didFinishDownloadingToURL:]:
  |      0|  334|
  |      0|  335|    RefCon Types
  |      0|  336|    
  |      0|  337|        For access to private data in callbacks, etc.; refcons are generally
  |      0|  338|        used as a pointer to something, but in the 32-bit world refcons in
  |      0|  339|        different APIs have had various types: pointer, unsigned scalar, and
  |      0|  340|        signed scalar. The RefCon types defined here support the current 32-bit
  |      0|  341|        usage but provide normalization to pointer types for 64-bit.
  |      0|  342|        
  |      0|  343|        PRefCon is preferred for new APIs; URefCon and SRefCon are primarily
  |      0|  344|        for compatibility with existing APIs.
  |      0|  345|        
  |      0|  346|*********************************************************************************/
  |      0|  347|typedef void *                          PRefCon;
  |      0|  348|#if __LP64__
  ------------------
       |  349|typedef void *                          URefCon;
       |  350|typedef void *                          SRefCon;
       |  351|#else
       |  352|typedef UInt32                          URefCon;
       |  353|typedef SInt32                          SRefCon;
       |  354|#endif  /* __LP64__ */
       |  355|
       |  356|/********************************************************************************
       |  357|
  ------------------
  | -[AFXMLParserResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  349|typedef void *                          URefCon;
  |      0|  350|typedef void *                          SRefCon;
  |      0|  351|#else
  |      0|  352|typedef UInt32                          URefCon;
  |      0|  353|typedef SInt32                          SRefCon;
  |      0|  354|#endif  /* __LP64__ */
  |      0|  355|
  |      0|  356|/********************************************************************************
  |      0|  357|
  ------------------
       |  358|    Common Constants
       |  359|    
       |  360|        noErr                   OSErr: function performed properly - no error
       |  361|        kNilOptions             OptionBits: all flags false
  ------------------
  | -[AFImageDownloader dequeueMergedTask]:
  |      0|  356|/********************************************************************************
  |      0|  357|
  |      0|  358|    Common Constants
  |      0|  359|    
  |      0|  360|        noErr                   OSErr: function performed properly - no error
  |      0|  361|        kNilOptions             OptionBits: all flags false
  ------------------
       |  362|        kInvalidID              KernelID: NULL is for pointers as kInvalidID is for ID's
       |  363|        kVariableLengthArray    array bounds: variable length array
       |  364|
       |  365|    Note: kVariableLengthArray was used in array bounds to specify a variable length array,
       |  366|          usually the last field in a struct.  Now that the C language supports 
       |  367|		  the concept of flexible array members, you can instead use: 
       |  368|		
       |  369|		struct BarList
       |  370|		{
       |  371|			short	listLength;
       |  372|			Bar		elements[];
       |  373|		};
       |  374|
       |  375|		However, this changes the semantics somewhat, as sizeof( BarList ) contains
       |  376|		no space for any of the elements, so to allocate a list with space for
       |  377|		the count elements
       |  378|
       |  379|		struct BarList* l = (struct BarList*) malloc( sizeof(BarList) + count * sizeof(Bar) );
       |  380|        
       |  381|*********************************************************************************/
       |  382|enum {
       |  383|  noErr                         = 0
       |  384|};
       |  385|
       |  386|enum {
       |  387|  kNilOptions                   = 0
       |  388|};
       |  389|
       |  390|#define kInvalidID   0
       |  391|enum {
       |  392|  kVariableLengthArray  
       |  393|#ifdef __has_extension
       |  394|   #if __has_extension(enumerator_attributes)
       |  395|		__attribute__((deprecated))  
       |  396|	#endif
       |  397|#endif
       |  398|  = 1
       |  399|};
       |  400|
       |  401|enum {
       |  402|  kUnknownType                  = 0x3F3F3F3F /* "????" QuickTime 3.0: default unknown ResType or OSType */
       |  403|};
       |  404|
       |  405|
       |  406|
       |  407|/********************************************************************************
       |  408|
  ------------------
  | -[AFHTTPRequestSerializer multipartFormRequestWithMethod:URLString:parameters:constructingBodyWithBlock:error:]:
  |      0|  378|
  |      0|  379|		struct BarList* l = (struct BarList*) malloc( sizeof(BarList) + count * sizeof(Bar) );
  |      0|  380|        
  |      0|  381|*********************************************************************************/
  |      0|  382|enum {
  |      0|  383|  noErr                         = 0
  |      0|  384|};
  |      0|  385|
  |      0|  386|enum {
  |      0|  387|  kNilOptions                   = 0
  |      0|  388|};
  |      0|  389|
  |      0|  390|#define kInvalidID   0
  |      0|  391|enum {
  |      0|  392|  kVariableLengthArray  
  |      0|  393|#ifdef __has_extension
  |      0|  394|   #if __has_extension(enumerator_attributes)
  |      0|  395|		__attribute__((deprecated))  
  |      0|  396|	#endif
  |      0|  397|#endif
  |      0|  398|  = 1
  |      0|  399|};
  |      0|  400|
  |      0|  401|enum {
  |      0|  402|  kUnknownType                  = 0x3F3F3F3F /* "????" QuickTime 3.0: default unknown ResType or OSType */
  |      0|  403|};
  |      0|  404|
  |      0|  405|
  |      0|  406|
  |      0|  407|/********************************************************************************
  |      0|  408|
  ------------------
       |  409|    String Types and Unicode Types
       |  410|    
       |  411|        UnicodeScalarValue,     A complete Unicode character in UTF-32 format, with
       |  412|        UTF32Char               values from 0 through 0x10FFFF (excluding the surrogate
       |  413|                                range 0xD800-0xDFFF and certain disallowed values).
       |  414|
       |  415|        UniChar,                A 16-bit Unicode code value in the default UTF-16 format.
       |  416|        UTF16Char               UnicodeScalarValues 0-0xFFFF are expressed in UTF-16
       |  417|                                format using a single UTF16Char with the same value.
       |  418|                                UnicodeScalarValues 0x10000-0x10FFFF are expressed in
       |  419|                                UTF-16 format using a pair of UTF16Chars - one in the
       |  420|                                high surrogate range (0xD800-0xDBFF) followed by one in
       |  421|                                the low surrogate range (0xDC00-0xDFFF). All of the
       |  422|                                characters defined in Unicode versions through 3.0 are
       |  423|                                in the range 0-0xFFFF and can be expressed using a single
       |  424|                                UTF16Char, thus the term "Unicode character" generally
       |  425|                                refers to a UniChar = UTF16Char.
       |  426|
       |  427|        UTF8Char                An 8-bit code value in UTF-8 format. UnicodeScalarValues
       |  428|                                0-0x7F are expressed in UTF-8 format using one UTF8Char
       |  429|                                with the same value. UnicodeScalarValues above 0x7F are
       |  430|                                expressed in UTF-8 format using 2-4 UTF8Chars, all with
       |  431|                                values in the range 0x80-0xF4 (UnicodeScalarValues
       |  432|                                0x100-0xFFFF use two or three UTF8Chars,
       |  433|                                UnicodeScalarValues 0x10000-0x10FFFF use four UTF8Chars).
       |  434|
       |  435|        UniCharCount            A count of UTF-16 code values in an array or buffer.
       |  436|
       |  437|        StrNNN                  Pascal string holding up to NNN bytes
       |  438|        StringPtr               Pointer to a pascal string
  ------------------
  | +[_AFURLSessionTaskSwizzling load]:
  |      3|  382|enum {
  |      3|  383|  noErr                         = 0
  |      3|  384|};
  |      3|  385|
  |      3|  386|enum {
  |      3|  387|  kNilOptions                   = 0
  |      3|  388|};
  |      3|  389|
  |      3|  390|#define kInvalidID   0
  |      3|  391|enum {
  |      3|  392|  kVariableLengthArray  
  |      3|  393|#ifdef __has_extension
  |      3|  394|   #if __has_extension(enumerator_attributes)
  |      3|  395|		__attribute__((deprecated))  
  |      3|  396|	#endif
  |      3|  397|#endif
  |      3|  398|  = 1
  |      3|  399|};
  |      3|  400|
  |      3|  401|enum {
  |      3|  402|  kUnknownType                  = 0x3F3F3F3F /* "????" QuickTime 3.0: default unknown ResType or OSType */
  |      3|  403|};
  |      3|  404|
  |      3|  405|
  |      3|  406|
  |      3|  407|/********************************************************************************
  |      3|  408|
  |      3|  409|    String Types and Unicode Types
  |      3|  410|    
  |      3|  411|        UnicodeScalarValue,     A complete Unicode character in UTF-32 format, with
  |      3|  412|        UTF32Char               values from 0 through 0x10FFFF (excluding the surrogate
  |      3|  413|                                range 0xD800-0xDFFF and certain disallowed values).
  |      3|  414|
  |      3|  415|        UniChar,                A 16-bit Unicode code value in the default UTF-16 format.
  |      3|  416|        UTF16Char               UnicodeScalarValues 0-0xFFFF are expressed in UTF-16
  |      3|  417|                                format using a single UTF16Char with the same value.
  |      3|  418|                                UnicodeScalarValues 0x10000-0x10FFFF are expressed in
  |      3|  419|                                UTF-16 format using a pair of UTF16Chars - one in the
  |      3|  420|                                high surrogate range (0xD800-0xDBFF) followed by one in
  |      3|  421|                                the low surrogate range (0xDC00-0xDFFF). All of the
  |      3|  422|                                characters defined in Unicode versions through 3.0 are
  |      3|  423|                                in the range 0-0xFFFF and can be expressed using a single
  |     15|  424|                                UTF16Char, thus the term "Unicode character" generally
  |     12|  425|                                refers to a UniChar = UTF16Char.
  |     12|  426|
  |     12|  427|        UTF8Char                An 8-bit code value in UTF-8 format. UnicodeScalarValues
  |     12|  428|                                0-0x7F are expressed in UTF-8 format using one UTF8Char
  |      5|  429|                                with the same value. UnicodeScalarValues above 0x7F are
  |      5|  430|                                expressed in UTF-8 format using 2-4 UTF8Chars, all with
  |      5|  431|                                values in the range 0x80-0xF4 (UnicodeScalarValues
  |     12|  432|                                0x100-0xFFFF use two or three UTF8Chars,
  |     12|  433|                                UnicodeScalarValues 0x10000-0x10FFFF use four UTF8Chars).
  |      3|  434|
  |      3|  435|        UniCharCount            A count of UTF-16 code values in an array or buffer.
  |      3|  436|
  |      3|  437|        StrNNN                  Pascal string holding up to NNN bytes
  |      3|  438|        StringPtr               Pointer to a pascal string
  ------------------
       |  439|        StringHandle            Pointer to a StringPtr
       |  440|        ConstStringPtr          Pointer to a read-only pascal string
       |  441|        ConstStrNNNParam        For function parameters only - means string is const
       |  442|        
       |  443|        CStringPtr              Pointer to a C string           (in C:  char*)
       |  444|        ConstCStringPtr         Pointer to a read-only C string (in C:  const char*)
       |  445|        
       |  446|    Note: The length of a pascal string is stored as the first byte.
       |  447|          A pascal string does not have a termination byte.
       |  448|          A pascal string can hold at most 255 bytes of data.
       |  449|          The first character in a pascal string is offset one byte from the start of the string. 
       |  450|          
       |  451|          A C string is terminated with a byte of value zero.  
       |  452|          A C string has no length limitation.
       |  453|          The first character in a C string is the zeroth byte of the string. 
       |  454|          
       |  455|        
       |  456|*********************************************************************************/
       |  457|typedef UInt32                          UnicodeScalarValue;
       |  458|typedef UInt32                          UTF32Char;
       |  459|typedef UInt16                          UniChar;
       |  460|typedef UInt16                          UTF16Char;
       |  461|typedef UInt8                           UTF8Char;
       |  462|typedef UniChar *                       UniCharPtr;
  ------------------
  | -[AFHTTPRequestSerializer requestWithMultipartFormRequest:writingStreamContentsToFile:completionHandler:]:
  |      0|  413|                                range 0xD800-0xDFFF and certain disallowed values).
  |      0|  414|
  |      0|  415|        UniChar,                A 16-bit Unicode code value in the default UTF-16 format.
  |      0|  416|        UTF16Char               UnicodeScalarValues 0-0xFFFF are expressed in UTF-16
  |      0|  417|                                format using a single UTF16Char with the same value.
  |      0|  418|                                UnicodeScalarValues 0x10000-0x10FFFF are expressed in
  |      0|  419|                                UTF-16 format using a pair of UTF16Chars - one in the
  |      0|  420|                                high surrogate range (0xD800-0xDBFF) followed by one in
  |      0|  421|                                the low surrogate range (0xDC00-0xDFFF). All of the
  |      0|  422|                                characters defined in Unicode versions through 3.0 are
  |      0|  423|                                in the range 0-0xFFFF and can be expressed using a single
  |      0|  424|                                UTF16Char, thus the term "Unicode character" generally
  |      0|  425|                                refers to a UniChar = UTF16Char.
  |      0|  426|
  |      0|  427|        UTF8Char                An 8-bit code value in UTF-8 format. UnicodeScalarValues
  |      0|  428|                                0-0x7F are expressed in UTF-8 format using one UTF8Char
  |      0|  429|                                with the same value. UnicodeScalarValues above 0x7F are
  |      0|  430|                                expressed in UTF-8 format using 2-4 UTF8Chars, all with
  |      0|  431|                                values in the range 0x80-0xF4 (UnicodeScalarValues
  |      0|  432|                                0x100-0xFFFF use two or three UTF8Chars,
  |      0|  433|                                UnicodeScalarValues 0x10000-0x10FFFF use four UTF8Chars).
  |      0|  434|
  |      0|  435|        UniCharCount            A count of UTF-16 code values in an array or buffer.
  |      0|  436|
  |      0|  437|        StrNNN                  Pascal string holding up to NNN bytes
  |      0|  438|        StringPtr               Pointer to a pascal string
  |      0|  439|        StringHandle            Pointer to a StringPtr
  |      0|  440|        ConstStringPtr          Pointer to a read-only pascal string
  |      0|  441|        ConstStrNNNParam        For function parameters only - means string is const
  |      0|  442|        
  |      0|  443|        CStringPtr              Pointer to a C string           (in C:  char*)
  |      0|  444|        ConstCStringPtr         Pointer to a read-only C string (in C:  const char*)
  |      0|  445|        
  |      0|  446|    Note: The length of a pascal string is stored as the first byte.
  |      0|  447|          A pascal string does not have a termination byte.
  |      0|  448|          A pascal string can hold at most 255 bytes of data.
  |      0|  449|          The first character in a pascal string is offset one byte from the start of the string. 
  |      0|  450|          
  |      0|  451|          A C string is terminated with a byte of value zero.  
  |      0|  452|          A C string has no length limitation.
  |      0|  453|          The first character in a C string is the zeroth byte of the string. 
  |      0|  454|          
  |      0|  455|        
  |      0|  456|*********************************************************************************/
  |      0|  457|typedef UInt32                          UnicodeScalarValue;
  |      0|  458|typedef UInt32                          UTF32Char;
  |      0|  459|typedef UInt16                          UniChar;
  |      0|  460|typedef UInt16                          UTF16Char;
  |      0|  461|typedef UInt8                           UTF8Char;
  |      0|  462|typedef UniChar *                       UniCharPtr;
  ------------------
       |  463|typedef unsigned long                   UniCharCount;
       |  464|typedef UniCharCount *                  UniCharCountPtr;
       |  465|typedef unsigned char                   Str255[256];
       |  466|typedef unsigned char                   Str63[64];
       |  467|typedef unsigned char                   Str32[33];
       |  468|typedef unsigned char                   Str31[32];
       |  469|typedef unsigned char                   Str27[28];
       |  470|typedef unsigned char                   Str15[16];
  ------------------
  | -[AFPropertyListResponseSerializer init]:
  |      0|  461|typedef UInt8                           UTF8Char;
  |      0|  462|typedef UniChar *                       UniCharPtr;
  |      0|  463|typedef unsigned long                   UniCharCount;
  |      0|  464|typedef UniCharCount *                  UniCharCountPtr;
  |      0|  465|typedef unsigned char                   Str255[256];
  |      0|  466|typedef unsigned char                   Str63[64];
  |      0|  467|typedef unsigned char                   Str32[33];
  |      0|  468|typedef unsigned char                   Str31[32];
  |      0|  469|typedef unsigned char                   Str27[28];
  |      0|  470|typedef unsigned char                   Str15[16];
  ------------------
       |  471|/*
       |  472|    The type Str32 is used in many AppleTalk based data structures.
       |  473|    It holds up to 32 one byte chars.  The problem is that with the
       |  474|    length byte it is 33 bytes long.  This can cause weird alignment
       |  475|    problems in structures.  To fix this the type "Str32Field" has
       |  476|    been created.  It should only be used to hold 32 chars, but
       |  477|    it is 34 bytes long so that there are no alignment problems.
       |  478|*/
       |  479|typedef unsigned char                   Str32Field[34];
       |  480|/*
       |  481|    QuickTime 3.0:
       |  482|    The type StrFileName is used to make MacOS structs work 
       |  483|    cross-platform.  For example FSSpec or SFReply previously
       |  484|    contained a Str63 field.  They now contain a StrFileName
       |  485|    field which is the same when targeting the MacOS but is
       |  486|    a 256 char buffer for Win32 and unix, allowing them to
       |  487|    contain long file names.
       |  488|*/
       |  489|typedef Str63                           StrFileName;
       |  490|typedef unsigned char *                 StringPtr;
       |  491|typedef StringPtr *                     StringHandle;
       |  492|typedef const unsigned char *           ConstStringPtr;
       |  493|typedef const unsigned char *           ConstStr255Param;
       |  494|typedef const unsigned char *           ConstStr63Param;
       |  495|typedef const unsigned char *           ConstStr32Param;
       |  496|typedef const unsigned char *           ConstStr31Param;
  ------------------
  | -[AFPropertyListResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  477|    it is 34 bytes long so that there are no alignment problems.
  |      0|  478|*/
  |      0|  479|typedef unsigned char                   Str32Field[34];
  |      0|  480|/*
  |      0|  481|    QuickTime 3.0:
  |      0|  482|    The type StrFileName is used to make MacOS structs work 
  |      0|  483|    cross-platform.  For example FSSpec or SFReply previously
  |      0|  484|    contained a Str63 field.  They now contain a StrFileName
  |      0|  485|    field which is the same when targeting the MacOS but is
  |      0|  486|    a 256 char buffer for Win32 and unix, allowing them to
  |      0|  487|    contain long file names.
  |      0|  488|*/
  |      0|  489|typedef Str63                           StrFileName;
  |      0|  490|typedef unsigned char *                 StringPtr;
  |      0|  491|typedef StringPtr *                     StringHandle;
  |      0|  492|typedef const unsigned char *           ConstStringPtr;
  |      0|  493|typedef const unsigned char *           ConstStr255Param;
  |      0|  494|typedef const unsigned char *           ConstStr63Param;
  |      0|  495|typedef const unsigned char *           ConstStr32Param;
  |      0|  496|typedef const unsigned char *           ConstStr31Param;
  ------------------
       |  497|typedef const unsigned char *           ConstStr27Param;
       |  498|typedef const unsigned char *           ConstStr15Param;
       |  499|typedef ConstStr63Param                 ConstStrFileNameParam;
       |  500|#ifdef __cplusplus
       |  501|inline unsigned char StrLength(ConstStr255Param string) { return (*string); }
       |  502|#else
       |  503|#define StrLength(string) (*(unsigned char *)(string))
       |  504|#endif  /* defined(__cplusplus) */
       |  505|
       |  506|#if OLDROUTINENAMES
       |  507|#define Length(string) StrLength(string)
       |  508|#endif  /* OLDROUTINENAMES */
       |  509|
  ------------------
  | -[AFURLSessionManager init]:
  |      0|  507|#define Length(string) StrLength(string)
  |      0|  508|#endif  /* OLDROUTINENAMES */
  |      0|  509|
  ------------------
       |  510|/********************************************************************************
  ------------------
  | -[AFPropertyListResponseSerializer initWithCoder:]:
  |      0|  500|#ifdef __cplusplus
  |      0|  501|inline unsigned char StrLength(ConstStr255Param string) { return (*string); }
  |      0|  502|#else
  |      0|  503|#define StrLength(string) (*(unsigned char *)(string))
  |      0|  504|#endif  /* defined(__cplusplus) */
  |      0|  505|
  |      0|  506|#if OLDROUTINENAMES
  |      0|  507|#define Length(string) StrLength(string)
  |      0|  508|#endif  /* OLDROUTINENAMES */
  |      0|  509|
  |      0|  510|/********************************************************************************
  ------------------
       |  511|
       |  512|    Process Manager type ProcessSerialNumber (previously in Processes.h)
       |  513|
       |  514|*********************************************************************************/
       |  515|/* type for unique process identifier */
       |  516|struct ProcessSerialNumber {
       |  517|  UInt32              highLongOfPSN;
       |  518|  UInt32              lowLongOfPSN;
  ------------------
  | -[AFHTTPRequestSerializer requestBySerializingRequest:withParameters:error:]:
  |      0|  469|typedef unsigned char                   Str27[28];
  |      0|  470|typedef unsigned char                   Str15[16];
  |      0|  471|/*
  |      0|  472|    The type Str32 is used in many AppleTalk based data structures.
  |      0|  473|    It holds up to 32 one byte chars.  The problem is that with the
  |      0|  474|    length byte it is 33 bytes long.  This can cause weird alignment
  |      0|  475|    problems in structures.  To fix this the type "Str32Field" has
  |      0|  476|    been created.  It should only be used to hold 32 chars, but
  |      0|  477|    it is 34 bytes long so that there are no alignment problems.
  |      0|  478|*/
  |      0|  479|typedef unsigned char                   Str32Field[34];
  |      0|  480|/*
  |      0|  481|    QuickTime 3.0:
  |      0|  482|    The type StrFileName is used to make MacOS structs work 
  |      0|  483|    cross-platform.  For example FSSpec or SFReply previously
  |      0|  484|    contained a Str63 field.  They now contain a StrFileName
  |      0|  485|    field which is the same when targeting the MacOS but is
  |      0|  486|    a 256 char buffer for Win32 and unix, allowing them to
  |      0|  487|    contain long file names.
  |      0|  488|*/
  |      0|  489|typedef Str63                           StrFileName;
  |      0|  490|typedef unsigned char *                 StringPtr;
  |      0|  491|typedef StringPtr *                     StringHandle;
  |      0|  492|typedef const unsigned char *           ConstStringPtr;
  |      0|  493|typedef const unsigned char *           ConstStr255Param;
  |      0|  494|typedef const unsigned char *           ConstStr63Param;
  |      0|  495|typedef const unsigned char *           ConstStr32Param;
  |      0|  496|typedef const unsigned char *           ConstStr31Param;
  |      0|  497|typedef const unsigned char *           ConstStr27Param;
  |      0|  498|typedef const unsigned char *           ConstStr15Param;
  |      0|  499|typedef ConstStr63Param                 ConstStrFileNameParam;
  |      0|  500|#ifdef __cplusplus
  |      0|  501|inline unsigned char StrLength(ConstStr255Param string) { return (*string); }
  |      0|  502|#else
  |      0|  503|#define StrLength(string) (*(unsigned char *)(string))
  |      0|  504|#endif  /* defined(__cplusplus) */
  |      0|  505|
  |      0|  506|#if OLDROUTINENAMES
  |      0|  507|#define Length(string) StrLength(string)
  |      0|  508|#endif  /* OLDROUTINENAMES */
  |      0|  509|
  |      0|  510|/********************************************************************************
  |      0|  511|
  |      0|  512|    Process Manager type ProcessSerialNumber (previously in Processes.h)
  |      0|  513|
  |      0|  514|*********************************************************************************/
  |      0|  515|/* type for unique process identifier */
  |      0|  516|struct ProcessSerialNumber {
  |      0|  517|  UInt32              highLongOfPSN;
  |      0|  518|  UInt32              lowLongOfPSN;
  ------------------
       |  519|};
       |  520|typedef struct ProcessSerialNumber      ProcessSerialNumber;
       |  521|typedef ProcessSerialNumber *           ProcessSerialNumberPtr;
       |  522|/********************************************************************************
       |  523|
       |  524|    Quickdraw Types
       |  525|    
       |  526|        Point               2D Quickdraw coordinate, range: -32K to +32K
       |  527|        Rect                Rectangular Quickdraw area
       |  528|        Style               Quickdraw font rendering styles
       |  529|        StyleParameter      Style when used as a parameter (historical 68K convention)
       |  530|        StyleField          Style when used as a field (historical 68K convention)
       |  531|        CharParameter       Char when used as a parameter (historical 68K convention)
       |  532|        
       |  533|    Note:   The original Macintosh toolbox in 68K Pascal defined Style as a SET.  
       |  534|            Both Style and CHAR occupy 8-bits in packed records or 16-bits when 
       |  535|            used as fields in non-packed records or as parameters. 
       |  536|        
       |  537|*********************************************************************************/
       |  538|struct Point {
       |  539|  short               v;
       |  540|  short               h;
       |  541|};
       |  542|typedef struct Point                    Point;
       |  543|typedef Point *                         PointPtr;
       |  544|struct Rect {
       |  545|  short               top;
       |  546|  short               left;
       |  547|  short               bottom;
       |  548|  short               right;
       |  549|};
       |  550|typedef struct Rect                     Rect;
       |  551|typedef Rect *                          RectPtr;
       |  552|struct FixedPoint {
       |  553|  Fixed               x;
  ------------------
  | __52-[AFURLSessionManager initWithSessionConfiguration:]_block_invoke:
  |      0|  541|};
  |      0|  542|typedef struct Point                    Point;
  |      0|  543|typedef Point *                         PointPtr;
  |      0|  544|struct Rect {
  |      0|  545|  short               top;
  |      0|  546|  short               left;
  |      0|  547|  short               bottom;
  |      0|  548|  short               right;
  |      0|  549|};
  |      0|  550|typedef struct Rect                     Rect;
  |      0|  551|typedef Rect *                          RectPtr;
  |      0|  552|struct FixedPoint {
  |      0|  553|  Fixed               x;
  ------------------
       |  554|  Fixed               y;
       |  555|};
       |  556|typedef struct FixedPoint               FixedPoint;
  ------------------
  | +[UIImage(AFNetworkingSafeImageLoading) af_safeImageWithData:]:
  |      0|  545|  short               top;
  |      0|  546|  short               left;
  |      0|  547|  short               bottom;
  |      0|  548|  short               right;
  |      0|  549|};
  |      0|  550|typedef struct Rect                     Rect;
  |      0|  551|typedef Rect *                          RectPtr;
  |      0|  552|struct FixedPoint {
  |      0|  553|  Fixed               x;
  |      0|  554|  Fixed               y;
  |      0|  555|};
  |      0|  556|typedef struct FixedPoint               FixedPoint;
  ------------------
  | -[AFURLSessionManager initWithSessionConfiguration:]:
  |      0|  511|
  |      0|  512|    Process Manager type ProcessSerialNumber (previously in Processes.h)
  |      0|  513|
  |      0|  514|*********************************************************************************/
  |      0|  515|/* type for unique process identifier */
  |      0|  516|struct ProcessSerialNumber {
  |      0|  517|  UInt32              highLongOfPSN;
  |      0|  518|  UInt32              lowLongOfPSN;
  |      0|  519|};
  |      0|  520|typedef struct ProcessSerialNumber      ProcessSerialNumber;
  |      0|  521|typedef ProcessSerialNumber *           ProcessSerialNumberPtr;
  |      0|  522|/********************************************************************************
  |      0|  523|
  |      0|  524|    Quickdraw Types
  |      0|  525|    
  |      0|  526|        Point               2D Quickdraw coordinate, range: -32K to +32K
  |      0|  527|        Rect                Rectangular Quickdraw area
  |      0|  528|        Style               Quickdraw font rendering styles
  |      0|  529|        StyleParameter      Style when used as a parameter (historical 68K convention)
  |      0|  530|        StyleField          Style when used as a field (historical 68K convention)
  |      0|  531|        CharParameter       Char when used as a parameter (historical 68K convention)
  |      0|  532|        
  |      0|  533|    Note:   The original Macintosh toolbox in 68K Pascal defined Style as a SET.  
  |      0|  534|            Both Style and CHAR occupy 8-bits in packed records or 16-bits when 
  |      0|  535|            used as fields in non-packed records or as parameters. 
  |      0|  536|        
  |      0|  537|*********************************************************************************/
  |      0|  538|struct Point {
  |      0|  539|  short               v;
  |      0|  540|  short               h;
  |      0|  541|};
  |      0|  542|typedef struct Point                    Point;
  |      0|  543|typedef Point *                         PointPtr;
  |      0|  544|struct Rect {
  |      0|  545|  short               top;
  |      0|  546|  short               left;
  |      0|  547|  short               bottom;
  |      0|  548|  short               right;
  |      0|  549|};
  |      0|  550|typedef struct Rect                     Rect;
  |      0|  551|typedef Rect *                          RectPtr;
  |      0|  552|struct FixedPoint {
  |      0|  553|  Fixed               x;
  |      0|  554|  Fixed               y;
  |      0|  555|};
  |      0|  556|typedef struct FixedPoint               FixedPoint;
  ------------------
       |  557|struct FixedRect {
       |  558|  Fixed               left;
       |  559|  Fixed               top;
       |  560|  Fixed               right;
  ------------------
  | -[AFHTTPRequestSerializer initWithCoder:]:
  |      0|  550|typedef struct Rect                     Rect;
  |      0|  551|typedef Rect *                          RectPtr;
  |      0|  552|struct FixedPoint {
  |      0|  553|  Fixed               x;
  |      0|  554|  Fixed               y;
  |      0|  555|};
  |      0|  556|typedef struct FixedPoint               FixedPoint;
  |      0|  557|struct FixedRect {
  |      0|  558|  Fixed               left;
  |      0|  559|  Fixed               top;
  |      0|  560|  Fixed               right;
  ------------------
       |  561|  Fixed               bottom;
       |  562|};
       |  563|typedef struct FixedRect                FixedRect;
       |  564|
       |  565|typedef short                           CharParameter;
       |  566|enum {
       |  567|  normal                        = 0,
       |  568|  bold                          = 1,
       |  569|  italic                        = 2,
       |  570|  underline                     = 4,
       |  571|  outline                       = 8,
       |  572|  shadow                        = 0x10,
       |  573|  condense                      = 0x20,
       |  574|  extend                        = 0x40
       |  575|};
       |  576|
       |  577|typedef unsigned char                   Style;
       |  578|typedef short                           StyleParameter;
       |  579|typedef Style                           StyleField;
       |  580|
       |  581|
       |  582|/********************************************************************************
       |  583|
       |  584|    QuickTime TimeBase types (previously in Movies.h)
       |  585|    
       |  586|        TimeValue           Count of units
       |  587|        TimeScale           Units per second
       |  588|        CompTimeValue       64-bit count of units (always a struct) 
       |  589|        TimeValue64         64-bit count of units (long long or struct) 
       |  590|        TimeBase            An opaque reference to a time base
       |  591|        TimeRecord          Package of TimeBase, duration, and scale
       |  592|        
       |  593|*********************************************************************************/
       |  594|typedef SInt32                          TimeValue;
       |  595|typedef SInt32                          TimeScale;
       |  596|typedef wide                            CompTimeValue;
       |  597|typedef SInt64                          TimeValue64;
       |  598|typedef struct TimeBaseRecord*          TimeBase;
       |  599|struct TimeRecord {
       |  600|  CompTimeValue       value;                  /* units (duration or absolute) */
       |  601|  TimeScale           scale;                  /* units per second */
  ------------------
  | -[AFURLSessionManager delegateForTask:]:
  |      0|  592|        
  |      0|  593|*********************************************************************************/
  |      0|  594|typedef SInt32                          TimeValue;
  |      0|  595|typedef SInt32                          TimeScale;
  |      0|  596|typedef wide                            CompTimeValue;
  |      0|  597|typedef SInt64                          TimeValue64;
  |      0|  598|typedef struct TimeBaseRecord*          TimeBase;
  |      0|  599|struct TimeRecord {
  |      0|  600|  CompTimeValue       value;                  /* units (duration or absolute) */
  |      0|  601|  TimeScale           scale;                  /* units per second */
  ------------------
       |  602|  TimeBase            base;                   /* refernce to the time base */
       |  603|};
       |  604|typedef struct TimeRecord               TimeRecord;
       |  605|
       |  606|/********************************************************************************
       |  607|
       |  608|    THINK C base objects
       |  609|
       |  610|        HandleObject        Root class for handle based THINK C++ objects
       |  611|        PascalObject        Root class for pascal style objects in THINK C++ 
       |  612|
       |  613|*********************************************************************************/
       |  614|#if defined(__SC__) && !defined(__STDC__) && defined(__cplusplus)
       |  615|        class __machdl HandleObject {};
       |  616|        #if TARGET_CPU_68K
       |  617|            class __pasobj PascalObject {};
       |  618|        #endif
       |  619|#endif
       |  620|
       |  621|
       |  622|/********************************************************************************
       |  623|
       |  624|    MacOS versioning structures
       |  625|    
       |  626|        VersRec                 Contents of a 'vers' resource
       |  627|        VersRecPtr              Pointer to a VersRecPtr
       |  628|        VersRecHndl             Resource Handle containing a VersRec
       |  629|        NumVersion              Packed BCD version representation (e.g. "4.2.1a3" is 0x04214003)
       |  630|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
       |  631|        
       |  632|        ProcHandle              Pointer to a ProcPtr
       |  633|        UniversalProcHandle     Pointer to a UniversalProcPtr
       |  634|        
       |  635|*********************************************************************************/
       |  636|#if TARGET_RT_BIG_ENDIAN
       |  637|struct NumVersion {
       |  638|                                              /* Numeric version part of 'vers' resource */
       |  639|  UInt8               majorRev;               /*1st part of version number in BCD*/
       |  640|  UInt8               minorAndBugRev;         /*2nd & 3rd part of version number share a byte*/
       |  641|  UInt8               stage;                  /*stage code: dev, alpha, beta, final*/
       |  642|  UInt8               nonRelRev;              /*revision level of non-released version*/
       |  643|};
       |  644|typedef struct NumVersion               NumVersion;
       |  645|#else
       |  646|struct NumVersion {
       |  647|                                              /* Numeric version part of 'vers' resource accessable in little endian format */
       |  648|  UInt8               nonRelRev;              /*revision level of non-released version*/
       |  649|  UInt8               stage;                  /*stage code: dev, alpha, beta, final*/
       |  650|  UInt8               minorAndBugRev;         /*2nd & 3rd part of version number share a byte*/
       |  651|  UInt8               majorRev;               /*1st part of version number in BCD*/
       |  652|};
       |  653|typedef struct NumVersion               NumVersion;
       |  654|#endif  /* TARGET_RT_BIG_ENDIAN */
       |  655|
       |  656|enum {
       |  657|                                        /* Version Release Stage Codes */
       |  658|  developStage                  = 0x20,
       |  659|  alphaStage                    = 0x40,
  ------------------
  | AFInflatedImageFromResponseWithDataAtScale:
  |      0|  569|  italic                        = 2,
  |      0|  570|  underline                     = 4,
  |      0|  571|  outline                       = 8,
  |      0|  572|  shadow                        = 0x10,
  |      0|  573|  condense                      = 0x20,
  |      0|  574|  extend                        = 0x40
  |      0|  575|};
  |      0|  576|
  |      0|  577|typedef unsigned char                   Style;
  |      0|  578|typedef short                           StyleParameter;
  |      0|  579|typedef Style                           StyleField;
  |      0|  580|
  |      0|  581|
  |      0|  582|/********************************************************************************
  |      0|  583|
  |      0|  584|    QuickTime TimeBase types (previously in Movies.h)
  |      0|  585|    
  |      0|  586|        TimeValue           Count of units
  |      0|  587|        TimeScale           Units per second
  |      0|  588|        CompTimeValue       64-bit count of units (always a struct) 
  |      0|  589|        TimeValue64         64-bit count of units (long long or struct) 
  |      0|  590|        TimeBase            An opaque reference to a time base
  |      0|  591|        TimeRecord          Package of TimeBase, duration, and scale
  |      0|  592|        
  |      0|  593|*********************************************************************************/
  |      0|  594|typedef SInt32                          TimeValue;
  |      0|  595|typedef SInt32                          TimeScale;
  |      0|  596|typedef wide                            CompTimeValue;
  |      0|  597|typedef SInt64                          TimeValue64;
  |      0|  598|typedef struct TimeBaseRecord*          TimeBase;
  |      0|  599|struct TimeRecord {
  |      0|  600|  CompTimeValue       value;                  /* units (duration or absolute) */
  |      0|  601|  TimeScale           scale;                  /* units per second */
  |      0|  602|  TimeBase            base;                   /* refernce to the time base */
  |      0|  603|};
  |      0|  604|typedef struct TimeRecord               TimeRecord;
  |      0|  605|
  |      0|  606|/********************************************************************************
  |      0|  607|
  |      0|  608|    THINK C base objects
  |      0|  609|
  |      0|  610|        HandleObject        Root class for handle based THINK C++ objects
  |      0|  611|        PascalObject        Root class for pascal style objects in THINK C++ 
  |      0|  612|
  |      0|  613|*********************************************************************************/
  |      0|  614|#if defined(__SC__) && !defined(__STDC__) && defined(__cplusplus)
  |      0|  615|        class __machdl HandleObject {};
  |      0|  616|        #if TARGET_CPU_68K
  |      0|  617|            class __pasobj PascalObject {};
  |      0|  618|        #endif
  |      0|  619|#endif
  |      0|  620|
  |      0|  621|
  |      0|  622|/********************************************************************************
  |      0|  623|
  |      0|  624|    MacOS versioning structures
  |      0|  625|    
  |      0|  626|        VersRec                 Contents of a 'vers' resource
  |      0|  627|        VersRecPtr              Pointer to a VersRecPtr
  |      0|  628|        VersRecHndl             Resource Handle containing a VersRec
  |      0|  629|        NumVersion              Packed BCD version representation (e.g. "4.2.1a3" is 0x04214003)
  |      0|  630|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
  |      0|  631|        
  |      0|  632|        ProcHandle              Pointer to a ProcPtr
  |      0|  633|        UniversalProcHandle     Pointer to a UniversalProcPtr
  |      0|  634|        
  |      0|  635|*********************************************************************************/
  |      0|  636|#if TARGET_RT_BIG_ENDIAN
  |      0|  637|struct NumVersion {
  |      0|  638|                                              /* Numeric version part of 'vers' resource */
  |      0|  639|  UInt8               majorRev;               /*1st part of version number in BCD*/
  |      0|  640|  UInt8               minorAndBugRev;         /*2nd & 3rd part of version number share a byte*/
  |      0|  641|  UInt8               stage;                  /*stage code: dev, alpha, beta, final*/
  |      0|  642|  UInt8               nonRelRev;              /*revision level of non-released version*/
  |      0|  643|};
  |      0|  644|typedef struct NumVersion               NumVersion;
  |      0|  645|#else
  |      0|  646|struct NumVersion {
  |      0|  647|                                              /* Numeric version part of 'vers' resource accessable in little endian format */
  |      0|  648|  UInt8               nonRelRev;              /*revision level of non-released version*/
  |      0|  649|  UInt8               stage;                  /*stage code: dev, alpha, beta, final*/
  |      0|  650|  UInt8               minorAndBugRev;         /*2nd & 3rd part of version number share a byte*/
  |      0|  651|  UInt8               majorRev;               /*1st part of version number in BCD*/
  |      0|  652|};
  |      0|  653|typedef struct NumVersion               NumVersion;
  |      0|  654|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  655|
  |      0|  656|enum {
  |      0|  657|                                        /* Version Release Stage Codes */
  |      0|  658|  developStage                  = 0x20,
  |      0|  659|  alphaStage                    = 0x40,
  ------------------
       |  660|  betaStage                     = 0x60,
       |  661|  finalStage                    = 0x80
       |  662|};
       |  663|
       |  664|union NumVersionVariant {
       |  665|                                              /* NumVersionVariant is a wrapper so NumVersion can be accessed as a 32-bit value */
       |  666|  NumVersion          parts;
       |  667|  UInt32              whole;
       |  668|};
  ------------------
  | -[AFStreamingMultipartFormData initWithURLRequest:stringEncoding:]:
  |      0|  656|enum {
  |      0|  657|                                        /* Version Release Stage Codes */
  |      0|  658|  developStage                  = 0x20,
  |      0|  659|  alphaStage                    = 0x40,
  |      0|  660|  betaStage                     = 0x60,
  |      0|  661|  finalStage                    = 0x80
  |      0|  662|};
  |      0|  663|
  |      0|  664|union NumVersionVariant {
  |      0|  665|                                              /* NumVersionVariant is a wrapper so NumVersion can be accessed as a 32-bit value */
  |      0|  666|  NumVersion          parts;
  |      0|  667|  UInt32              whole;
  |      0|  668|};
  ------------------
       |  669|typedef union NumVersionVariant         NumVersionVariant;
       |  670|typedef NumVersionVariant *             NumVersionVariantPtr;
       |  671|typedef NumVersionVariantPtr *          NumVersionVariantHandle;
       |  672|struct VersRec {
       |  673|                                              /* 'vers' resource format */
       |  674|  NumVersion          numericVersion;         /*encoded version number*/
       |  675|  short               countryCode;            /*country code from intl utilities*/
       |  676|  Str255              shortVersion;           /*version number string - worst case*/
       |  677|  Str255              reserved;               /*longMessage string packed after shortVersion*/
       |  678|};
       |  679|typedef struct VersRec                  VersRec;
       |  680|typedef VersRec *                       VersRecPtr;
       |  681|typedef VersRecPtr *                    VersRecHndl;
       |  682|/*********************************************************************************
  ------------------
  | -[AFImageResponseSerializer init]:
  |      0|  665|                                              /* NumVersionVariant is a wrapper so NumVersion can be accessed as a 32-bit value */
  |      0|  666|  NumVersion          parts;
  |      0|  667|  UInt32              whole;
  |      0|  668|};
  |      0|  669|typedef union NumVersionVariant         NumVersionVariant;
  |      0|  670|typedef NumVersionVariant *             NumVersionVariantPtr;
  |      0|  671|typedef NumVersionVariantPtr *          NumVersionVariantHandle;
  |      0|  672|struct VersRec {
  |      0|  673|                                              /* 'vers' resource format */
  |      0|  674|  NumVersion          numericVersion;         /*encoded version number*/
  |      0|  675|  short               countryCode;            /*country code from intl utilities*/
  |      0|  676|  Str255              shortVersion;           /*version number string - worst case*/
  |       |  677|  Str255              reserved;               /*longMessage string packed after shortVersion*/
  |       |  678|};
  |       |  679|typedef struct VersRec                  VersRec;
  |      0|  680|typedef VersRec *                       VersRecPtr;
  |      0|  681|typedef VersRecPtr *                    VersRecHndl;
  |      0|  682|/*********************************************************************************
  ------------------
       |  683|
       |  684|    Old names for types
       |  685|        
       |  686|*********************************************************************************/
       |  687|typedef UInt8                           Byte;
       |  688|typedef SInt8                           SignedByte;
       |  689|typedef wide *                          WidePtr;
       |  690|typedef UnsignedWide *                  UnsignedWidePtr;
       |  691|typedef Float80                         extended80;
       |  692|typedef Float96                         extended96;
       |  693|typedef SInt8                           VHSelect;
       |  694|/*********************************************************************************
       |  695|
       |  696|    Debugger functions
       |  697|    
       |  698|*********************************************************************************/
       |  699|/*
       |  700| *  Debugger()
       |  701| *  
       |  702| *  Availability:
  ------------------
  | -[AFURLSessionManager tasksForKeyPath:]:
  |      0|  682|/*********************************************************************************
  |      0|  683|
  |      0|  684|    Old names for types
  |      0|  685|        
  |      0|  686|*********************************************************************************/
  |      0|  687|typedef UInt8                           Byte;
  |      0|  688|typedef SInt8                           SignedByte;
  |      0|  689|typedef wide *                          WidePtr;
  |      0|  690|typedef UnsignedWide *                  UnsignedWidePtr;
  |      0|  691|typedef Float80                         extended80;
  |      0|  692|typedef Float96                         extended96;
  |      0|  693|typedef SInt8                           VHSelect;
  |      0|  694|/*********************************************************************************
  |      0|  695|
  |      0|  696|    Debugger functions
  |      0|  697|    
  |      0|  698|*********************************************************************************/
  |      0|  699|/*
  |      0|  700| *  Debugger()
  |      0|  701| *  
  |      0|  702| *  Availability:
  ------------------
       |  703| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  704| *    CarbonLib:        in CarbonLib 1.0 and later
       |  705| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  706| */
       |  707|extern void 
       |  708|Debugger(void)                                                __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  709|
       |  710|
       |  711|/*
       |  712| *  DebugStr()
  ------------------
  | -[AFImageResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  689|typedef wide *                          WidePtr;
  |      0|  690|typedef UnsignedWide *                  UnsignedWidePtr;
  |      0|  691|typedef Float80                         extended80;
  |      0|  692|typedef Float96                         extended96;
  |      0|  693|typedef SInt8                           VHSelect;
  |      0|  694|/*********************************************************************************
  |      0|  695|
  |      0|  696|    Debugger functions
  |      0|  697|    
  |      0|  698|*********************************************************************************/
  |      0|  699|/*
  |      0|  700| *  Debugger()
  |      0|  701| *  
  |      0|  702| *  Availability:
  |       |  703| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
  |       |  704| *    CarbonLib:        in CarbonLib 1.0 and later
  |       |  705| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |       |  706| */
  |       |  707|extern void 
  |       |  708|Debugger(void)                                                __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
  |       |  709|
  |      0|  710|
  |      0|  711|/*
  |      0|  712| *  DebugStr()
  ------------------
       |  713| *  
       |  714| *  Availability:
       |  715| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  716| *    CarbonLib:        in CarbonLib 1.0 and later
       |  717| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  718| */
       |  719|extern void 
       |  720|DebugStr(ConstStr255Param debuggerMsg)                        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  721|
       |  722|
       |  723|/*
       |  724| *  debugstr()
       |  725| *  
       |  726| *  Availability:
       |  727| *    Mac OS X:         not available
       |  728| *    CarbonLib:        not available
       |  729| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  730| */
       |  731|
       |  732|
       |  733|#if TARGET_CPU_PPC
       |  734|/* Only for Mac OS native drivers */
  ------------------
  | -[AFImageResponseSerializer initWithCoder:]:
  |      0|  716| *    CarbonLib:        in CarbonLib 1.0 and later
  |      0|  717| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |      0|  718| */
  |      0|  719|extern void 
  |      0|  720|DebugStr(ConstStr255Param debuggerMsg)                        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
  |      0|  721|
  |      0|  722|
  |      0|  723|/*
  |      0|  724| *  debugstr()
  |      0|  725| *  
  |      0|  726| *  Availability:
  |       |  727| *    Mac OS X:         not available
  |       |  728| *    CarbonLib:        not available
  |      0|  729| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |      0|  730| */
  |      0|  731|
  |      0|  732|
  |      0|  733|#if TARGET_CPU_PPC
  |      0|  734|/* Only for Mac OS native drivers */
  ------------------
       |  735|/*
       |  736| *  SysDebug()
       |  737| *  
       |  738| *  Availability:
       |  739| *    Mac OS X:         not available
       |  740| *    CarbonLib:        not available
       |  741| *    Non-Carbon CFM:   in DriverServicesLib 1.0 and later
       |  742| */
       |  743|
       |  744|
       |  745|/*
       |  746| *  SysDebugStr()
       |  747| *  
       |  748| *  Availability:
       |  749| *    Mac OS X:         not available
       |  750| *    CarbonLib:        not available
       |  751| *    Non-Carbon CFM:   in DriverServicesLib 1.0 and later
       |  752| */
       |  753|
       |  754|
       |  755|#endif  /* TARGET_CPU_PPC */
       |  756|
       |  757|/* SADE break points */
  ------------------
  | -[AFURLSessionManager dataTaskWithRequest:completionHandler:]:
  |      0|  755|#endif  /* TARGET_CPU_PPC */
  |      0|  756|
  |      0|  757|/* SADE break points */
  ------------------
       |  758|/*
       |  759| *  SysBreak()
       |  760| *  
       |  761| *  Availability:
       |  762| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  763| *    CarbonLib:        in CarbonLib 1.0 and later
       |  764| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  765| */
       |  766|extern void 
       |  767|SysBreak(void)                                                __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  768|
       |  769|
       |  770|/*
       |  771| *  SysBreakStr()
       |  772| *  
  ------------------
  | -[AFURLSessionManager dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:]:
  |      0|  762| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
  |      0|  763| *    CarbonLib:        in CarbonLib 1.0 and later
  |      0|  764| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |      0|  765| */
  |      0|  766|extern void 
  |      0|  767|SysBreak(void)                                                __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
  |      0|  768|
  |      0|  769|
  |      0|  770|/*
  |      0|  771| *  SysBreakStr()
  |      0|  772| *  
  ------------------
       |  773| *  Availability:
       |  774| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  775| *    CarbonLib:        in CarbonLib 1.0 and later
       |  776| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  777| */
       |  778|extern void 
       |  779|SysBreakStr(ConstStr255Param debuggerMsg)                     __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  780|
       |  781|
       |  782|/*
       |  783| *  SysBreakFunc()
       |  784| *  
       |  785| *  Availability:
       |  786| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  787| *    CarbonLib:        in CarbonLib 1.0 and later
       |  788| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  789| */
       |  790|extern void 
       |  791|SysBreakFunc(ConstStr255Param debuggerMsg)                    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  792|
       |  793|
       |  794|/* old names for Debugger and DebugStr */
       |  795|#if OLDROUTINENAMES && TARGET_CPU_68K
  ------------------
  | -[AFURLSessionManager uploadTaskWithRequest:fromFile:progress:completionHandler:]:
  |      0|  780|
  |      0|  781|
  |      0|  782|/*
  |      0|  783| *  SysBreakFunc()
  |      0|  784| *  
  |      0|  785| *  Availability:
  |      0|  786| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
  |      0|  787| *    CarbonLib:        in CarbonLib 1.0 and later
  |      0|  788| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |      0|  789| */
  |      0|  790|extern void 
  |      0|  791|SysBreakFunc(ConstStr255Param debuggerMsg)                    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
  |      0|  792|
  |      0|  793|
  |      0|  794|/* old names for Debugger and DebugStr */
  |      0|  795|#if OLDROUTINENAMES && TARGET_CPU_68K
  ------------------
       |  796|    #define Debugger68k()   Debugger()
       |  797|    #define DebugStr68k(s)  DebugStr(s)
       |  798|#endif
  ------------------
  | -[AFCompoundResponseSerializer responseObjectForResponse:data:error:]:
  |      0|  780|
  |      0|  781|
  |      0|  782|/*
  |      0|  783| *  SysBreakFunc()
  |      0|  784| *  
  |      0|  785| *  Availability:
  |      0|  786| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
  |      0|  787| *    CarbonLib:        in CarbonLib 1.0 and later
  |      0|  788| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
  |      0|  789| */
  |      0|  790|extern void 
  |      0|  791|SysBreakFunc(ConstStr255Param debuggerMsg)                    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
  |      0|  792|
  |      0|  793|
  |      0|  794|/* old names for Debugger and DebugStr */
  |      0|  795|#if OLDROUTINENAMES && TARGET_CPU_68K
  |      0|  796|    #define Debugger68k()   Debugger()
  |      0|  797|    #define DebugStr68k(s)  DebugStr(s)
  |      0|  798|#endif
  ------------------
       |  799|
       |  800|
       |  801|#pragma pack(pop)
       |  802|
       |  803|#ifdef __cplusplus
       |  804|}
       |  805|#endif
       |  806|
       |  807|#endif /* __MACTYPES__ */
       |  808|

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/dispatch/object.h:
       |    1|/*
       |    2| * Copyright (c) 2008-2012 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_APACHE_LICENSE_HEADER_START@
       |    5| *
       |    6| * Licensed under the Apache License, Version 2.0 (the "License");
       |    7| * you may not use this file except in compliance with the License.
       |    8| * You may obtain a copy of the License at
       |    9| *
       |   10| *     http://www.apache.org/licenses/LICENSE-2.0
       |   11| *
       |   12| * Unless required by applicable law or agreed to in writing, software
       |   13| * distributed under the License is distributed on an "AS IS" BASIS,
       |   14| * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       |   15| * See the License for the specific language governing permissions and
       |   16| * limitations under the License.
       |   17| *
       |   18| * @APPLE_APACHE_LICENSE_HEADER_END@
       |   19| */
       |   20|
       |   21|#ifndef __DISPATCH_OBJECT__
       |   22|#define __DISPATCH_OBJECT__
       |   23|
       |   24|#ifndef __DISPATCH_INDIRECT__
       |   25|#error "Please #include <dispatch/dispatch.h> instead of this file directly."
       |   26|#include <dispatch/base.h> // for HeaderDoc
       |   27|#endif
       |   28|
       |   29|/*!
       |   30| * @typedef dispatch_object_t
       |   31| *
       |   32| * @abstract
       |   33| * Abstract base type for all dispatch objects.
       |   34| * The details of the type definition are language-specific.
       |   35| *
       |   36| * @discussion
       |   37| * Dispatch objects are reference counted via calls to dispatch_retain() and
       |   38| * dispatch_release().
       |   39| */
       |   40|
       |   41|#if OS_OBJECT_USE_OBJC
       |   42|/*
       |   43| * By default, dispatch objects are declared as Objective-C types when building
       |   44| * with an Objective-C compiler. This allows them to participate in ARC, in RR
       |   45| * management by the Blocks runtime and in leaks checking by the static
       |   46| * analyzer, and enables them to be added to Cocoa collections.
       |   47| * See <os/object.h> for details.
       |   48| */
       |   49|OS_OBJECT_DECL(dispatch_object);
       |   50|#define DISPATCH_DECL(name) OS_OBJECT_DECL_SUBCLASS(name, dispatch_object)
      0|   51|#define DISPATCH_GLOBAL_OBJECT(type, object) ((OS_OBJECT_BRIDGE type)&(object))
       |   52|#define DISPATCH_RETURNS_RETAINED OS_OBJECT_RETURNS_RETAINED
       |   53|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |   54|void
       |   55|_dispatch_object_validate(dispatch_object_t object) {
       |   56|	void *isa = *(void* volatile*)(OS_OBJECT_BRIDGE void*)object;
       |   57|	(void)isa;
       |   58|}
       |   59|#elif defined(__cplusplus) && !defined(__DISPATCH_BUILDING_DISPATCH__)
       |   60|/*
       |   61| * Dispatch objects are NOT C++ objects. Nevertheless, we can at least keep C++
       |   62| * aware of type compatibility.
       |   63| */
       |   64|typedef struct dispatch_object_s {
       |   65|private:
       |   66|	dispatch_object_s();
       |   67|	~dispatch_object_s();
       |   68|	dispatch_object_s(const dispatch_object_s &);
       |   69|	void operator=(const dispatch_object_s &);
       |   70|} *dispatch_object_t;
       |   71|#define DISPATCH_DECL(name) \
       |   72|		typedef struct name##_s : public dispatch_object_s {} *name##_t
       |   73|#define DISPATCH_GLOBAL_OBJECT(type, object) (&(object))
       |   74|#define DISPATCH_RETURNS_RETAINED
       |   75|#else /* Plain C */
       |   76|typedef union {
       |   77|	struct _os_object_s *_os_obj;
       |   78|	struct dispatch_object_s *_do;
       |   79|	struct dispatch_continuation_s *_dc;
       |   80|	struct dispatch_queue_s *_dq;
       |   81|	struct dispatch_queue_attr_s *_dqa;
       |   82|	struct dispatch_group_s *_dg;
       |   83|	struct dispatch_source_s *_ds;
       |   84|	struct dispatch_mach_s *_dm;
       |   85|	struct dispatch_mach_msg_s *_dmsg;
       |   86|	struct dispatch_timer_aggregate_s *_dta;
       |   87|	struct dispatch_source_attr_s *_dsa;
       |   88|	struct dispatch_semaphore_s *_dsema;
       |   89|	struct dispatch_data_s *_ddata;
       |   90|	struct dispatch_io_s *_dchannel;
       |   91|	struct dispatch_operation_s *_doperation;
       |   92|	struct dispatch_disk_s *_ddisk;
       |   93|} dispatch_object_t __attribute__((__transparent_union__));
       |   94|/*! @parseOnly */
       |   95|#define DISPATCH_DECL(name) typedef struct name##_s *name##_t
       |   96|/*! @parseOnly */
       |   97|#define DISPATCH_GLOBAL_OBJECT(t, x) (&(x))
       |   98|/*! @parseOnly */
       |   99|#define DISPATCH_RETURNS_RETAINED
       |  100|#endif
       |  101|
       |  102|#ifdef __BLOCKS__
       |  103|/*!
       |  104| * @typedef dispatch_block_t
       |  105| *
       |  106| * @abstract
       |  107| * The type of blocks submitted to dispatch queues, which take no arguments
       |  108| * and have no return value.
       |  109| *
       |  110| * @discussion
       |  111| * When not building with Objective-C ARC, a block object allocated on or
       |  112| * copied to the heap must be released with a -[release] message or the
       |  113| * Block_release() function.
       |  114| *
       |  115| * The declaration of a block literal allocates storage on the stack.
       |  116| * Therefore, this is an invalid construct:
       |  117| * <code>
       |  118| * dispatch_block_t block;
       |  119| * if (x) {
       |  120| *     block = ^{ printf("true\n"); };
       |  121| * } else {
       |  122| *     block = ^{ printf("false\n"); };
       |  123| * }
       |  124| * block(); // unsafe!!!
       |  125| * </code>
       |  126| *
       |  127| * What is happening behind the scenes:
       |  128| * <code>
       |  129| * if (x) {
       |  130| *     struct Block __tmp_1 = ...; // setup details
       |  131| *     block = &__tmp_1;
       |  132| * } else {
       |  133| *     struct Block __tmp_2 = ...; // setup details
       |  134| *     block = &__tmp_2;
       |  135| * }
       |  136| * </code>
       |  137| *
       |  138| * As the example demonstrates, the address of a stack variable is escaping the
       |  139| * scope in which it is allocated. That is a classic C bug.
       |  140| *
       |  141| * Instead, the block literal must be copied to the heap with the Block_copy()
       |  142| * function or by sending it a -[copy] message.
       |  143| */
       |  144|typedef void (^dispatch_block_t)(void);
       |  145|#endif // __BLOCKS__
       |  146|
       |  147|__BEGIN_DECLS
       |  148|
       |  149|/*!
       |  150| * @function dispatch_retain
       |  151| *
       |  152| * @abstract
       |  153| * Increment the reference count of a dispatch object.
       |  154| *
       |  155| * @discussion
       |  156| * Calls to dispatch_retain() must be balanced with calls to
       |  157| * dispatch_release().
       |  158| *
       |  159| * @param object
       |  160| * The object to retain.
       |  161| * The result of passing NULL in this parameter is undefined.
       |  162| */
       |  163|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  164|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  165|void
       |  166|dispatch_retain(dispatch_object_t object);
       |  167|#if OS_OBJECT_USE_OBJC_RETAIN_RELEASE
       |  168|#undef dispatch_retain
       |  169|#define dispatch_retain(object) ({ dispatch_object_t _o = (object); \
       |  170|		_dispatch_object_validate(_o); (void)[_o retain]; })
       |  171|#endif
       |  172|
       |  173|/*!
       |  174| * @function dispatch_release
       |  175| *
       |  176| * @abstract
       |  177| * Decrement the reference count of a dispatch object.
       |  178| *
       |  179| * @discussion
       |  180| * A dispatch object is asynchronously deallocated once all references are
       |  181| * released (i.e. the reference count becomes zero). The system does not
       |  182| * guarantee that a given client is the last or only reference to a given
       |  183| * object.
       |  184| *
       |  185| * @param object
       |  186| * The object to release.
       |  187| * The result of passing NULL in this parameter is undefined.
       |  188| */
       |  189|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  190|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  191|void
       |  192|dispatch_release(dispatch_object_t object);
       |  193|#if OS_OBJECT_USE_OBJC_RETAIN_RELEASE
       |  194|#undef dispatch_release
       |  195|#define dispatch_release(object) ({ dispatch_object_t _o = (object); \
       |  196|		_dispatch_object_validate(_o); [_o release]; })
       |  197|#endif
       |  198|
       |  199|/*!
       |  200| * @function dispatch_get_context
       |  201| *
       |  202| * @abstract
       |  203| * Returns the application defined context of the object.
       |  204| *
       |  205| * @param object
       |  206| * The result of passing NULL in this parameter is undefined.
       |  207| *
       |  208| * @result
       |  209| * The context of the object; may be NULL.
       |  210| */
       |  211|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  212|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_PURE DISPATCH_WARN_RESULT
       |  213|DISPATCH_NOTHROW
       |  214|void *
       |  215|dispatch_get_context(dispatch_object_t object);
       |  216|
       |  217|/*!
       |  218| * @function dispatch_set_context
       |  219| *
       |  220| * @abstract
       |  221| * Associates an application defined context with the object.
       |  222| *
       |  223| * @param object
       |  224| * The result of passing NULL in this parameter is undefined.
       |  225| *
       |  226| * @param context
       |  227| * The new client defined context for the object. This may be NULL.
       |  228| *
       |  229| */
       |  230|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  231|DISPATCH_EXPORT DISPATCH_NOTHROW //DISPATCH_NONNULL1
       |  232|void
       |  233|dispatch_set_context(dispatch_object_t object, void *context);
       |  234|
       |  235|/*!
       |  236| * @function dispatch_set_finalizer_f
       |  237| *
       |  238| * @abstract
       |  239| * Set the finalizer function for a dispatch object.
       |  240| *
       |  241| * @param object
       |  242| * The dispatch object to modify.
       |  243| * The result of passing NULL in this parameter is undefined.
       |  244| *
       |  245| * @param finalizer
       |  246| * The finalizer function pointer.
       |  247| *
       |  248| * @discussion
       |  249| * A dispatch object's finalizer will be invoked on the object's target queue
       |  250| * after all references to the object have been released. This finalizer may be
       |  251| * used by the application to release any resources associated with the object,
       |  252| * such as freeing the object's context.
       |  253| * The context parameter passed to the finalizer function is the current
       |  254| * context of the dispatch object at the time the finalizer call is made.
       |  255| */
       |  256|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  257|DISPATCH_EXPORT DISPATCH_NOTHROW //DISPATCH_NONNULL1
       |  258|void
       |  259|dispatch_set_finalizer_f(dispatch_object_t object,
       |  260|		dispatch_function_t finalizer);
       |  261|
       |  262|/*!
       |  263| * @function dispatch_suspend
       |  264| *
       |  265| * @abstract
       |  266| * Suspends the invocation of blocks on a dispatch object.
       |  267| *
       |  268| * @discussion
       |  269| * A suspended object will not invoke any blocks associated with it. The
       |  270| * suspension of an object will occur after any running block associated with
       |  271| * the object completes.
       |  272| *
       |  273| * Calls to dispatch_suspend() must be balanced with calls
       |  274| * to dispatch_resume().
       |  275| *
       |  276| * @param object
       |  277| * The object to be suspended.
       |  278| * The result of passing NULL in this parameter is undefined.
       |  279| */
       |  280|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  281|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  282|void
       |  283|dispatch_suspend(dispatch_object_t object);
       |  284|
       |  285|/*!
       |  286| * @function dispatch_resume
       |  287| *
       |  288| * @abstract
       |  289| * Resumes the invocation of blocks on a dispatch object.
       |  290| *
       |  291| * @param object
       |  292| * The object to be resumed.
       |  293| * The result of passing NULL in this parameter is undefined.
       |  294| */
       |  295|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  296|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  297|void
       |  298|dispatch_resume(dispatch_object_t object);
       |  299|
       |  300|#ifdef __BLOCKS__
       |  301|/*!
       |  302| * @function dispatch_wait
       |  303| *
       |  304| * @abstract
       |  305| * Wait synchronously for an object or until the specified timeout has elapsed.
       |  306| *
       |  307| * @discussion
       |  308| * Type-generic macro that maps to dispatch_block_wait, dispatch_group_wait or
       |  309| * dispatch_semaphore_wait, depending on the type of the first argument.
       |  310| * See documentation for these functions for more details.
       |  311| * This function is unavailable for any other object type.
       |  312| *
       |  313| * @param object
       |  314| * The object to wait on.
       |  315| * The result of passing NULL in this parameter is undefined.
       |  316| *
       |  317| * @param timeout
       |  318| * When to timeout (see dispatch_time). As a convenience, there are the
       |  319| * DISPATCH_TIME_NOW and DISPATCH_TIME_FOREVER constants.
       |  320| *
       |  321| * @result
       |  322| * Returns zero on success or non-zero on error (i.e. timed out).
       |  323| */
       |  324|DISPATCH_UNAVAILABLE
       |  325|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NOTHROW
       |  326|long
       |  327|dispatch_wait(void *object, dispatch_time_t timeout);
       |  328|#if __has_extension(c_generic_selections)
       |  329|#define dispatch_wait(object, timeout) \
       |  330|		_Generic((object), \
       |  331|			dispatch_block_t:dispatch_block_wait, \
       |  332|			dispatch_group_t:dispatch_group_wait, \
       |  333|			dispatch_semaphore_t:dispatch_semaphore_wait \
       |  334|		)((object),(timeout))
       |  335|#endif
       |  336|
       |  337|/*!
       |  338| * @function dispatch_notify
       |  339| *
       |  340| * @abstract
       |  341| * Schedule a notification block to be submitted to a queue when the execution
       |  342| * of a specified object has completed.
       |  343| *
       |  344| * @discussion
       |  345| * Type-generic macro that maps to dispatch_block_notify or
       |  346| * dispatch_group_notify, depending on the type of the first argument.
       |  347| * See documentation for these functions for more details.
       |  348| * This function is unavailable for any other object type.
       |  349| *
       |  350| * @param object
       |  351| * The object to observe.
       |  352| * The result of passing NULL in this parameter is undefined.
       |  353| *
       |  354| * @param queue
       |  355| * The queue to which the supplied notification block will be submitted when
       |  356| * the observed object completes.
       |  357| *
       |  358| * @param notification_block
       |  359| * The block to submit when the observed object completes.
       |  360| */
       |  361|DISPATCH_UNAVAILABLE
       |  362|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  363|void
       |  364|dispatch_notify(void *object, dispatch_object_t queue,
       |  365|		dispatch_block_t notification_block);
       |  366|#if __has_extension(c_generic_selections)
       |  367|#define dispatch_notify(object, queue, notification_block) \
       |  368|		_Generic((object), \
       |  369|			dispatch_block_t:dispatch_block_notify, \
       |  370|			dispatch_group_t:dispatch_group_notify \
       |  371|		)((object),(queue), (notification_block))
       |  372|#endif
       |  373|
       |  374|/*!
       |  375| * @function dispatch_cancel
       |  376| *
       |  377| * @abstract
       |  378| * Cancel the specified object.
       |  379| *
       |  380| * @discussion
       |  381| * Type-generic macro that maps to dispatch_block_cancel or
       |  382| * dispatch_source_cancel, depending on the type of the first argument.
       |  383| * See documentation for these functions for more details.
       |  384| * This function is unavailable for any other object type.
       |  385| *
       |  386| * @param object
       |  387| * The object to cancel.
       |  388| * The result of passing NULL in this parameter is undefined.
       |  389| */
       |  390|DISPATCH_UNAVAILABLE
       |  391|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  392|void
       |  393|dispatch_cancel(void *object);
       |  394|#if __has_extension(c_generic_selections)
       |  395|#define dispatch_cancel(object) \
       |  396|		_Generic((object), \
       |  397|			dispatch_block_t:dispatch_block_cancel, \
       |  398|			dispatch_source_t:dispatch_source_cancel \
       |  399|		)((object))
       |  400|#endif
       |  401|
       |  402|/*!
       |  403| * @function dispatch_testcancel
       |  404| *
       |  405| * @abstract
       |  406| * Test whether the specified object has been canceled
       |  407| *
       |  408| * @discussion
       |  409| * Type-generic macro that maps to dispatch_block_testcancel or
       |  410| * dispatch_source_testcancel, depending on the type of the first argument.
       |  411| * See documentation for these functions for more details.
       |  412| * This function is unavailable for any other object type.
       |  413| *
       |  414| * @param object
       |  415| * The object to test.
       |  416| * The result of passing NULL in this parameter is undefined.
       |  417| *
       |  418| * @result
       |  419| * Non-zero if canceled and zero if not canceled.
       |  420| */
       |  421|DISPATCH_UNAVAILABLE
       |  422|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_WARN_RESULT DISPATCH_PURE
       |  423|DISPATCH_NOTHROW
       |  424|long
       |  425|dispatch_testcancel(void *object);
       |  426|#if __has_extension(c_generic_selections)
       |  427|#define dispatch_testcancel(object) \
       |  428|		_Generic((object), \
       |  429|			dispatch_block_t:dispatch_block_testcancel, \
       |  430|			dispatch_source_t:dispatch_source_testcancel \
       |  431|		)((object))
       |  432|#endif
       |  433|#endif // __BLOCKS__
       |  434|
       |  435|/*!
       |  436| * @function dispatch_debug
       |  437| *
       |  438| * @abstract
       |  439| * Programmatically log debug information about a dispatch object.
       |  440| *
       |  441| * @discussion
       |  442| * Programmatically log debug information about a dispatch object. By default,
       |  443| * the log output is sent to syslog at notice level. In the debug version of
       |  444| * the library, the log output is sent to a file in /var/tmp.
       |  445| * The log output destination can be configured via the LIBDISPATCH_LOG
       |  446| * environment variable, valid values are: YES, NO, syslog, stderr, file.
       |  447| *
       |  448| * This function is deprecated and will be removed in a future release.
       |  449| * Objective-C callers may use -debugDescription instead.
       |  450| *
       |  451| * @param object
       |  452| * The object to introspect.
       |  453| *
       |  454| * @param message
       |  455| * The message to log above and beyond the introspection.
       |  456| */
       |  457|__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6,__MAC_10_9,__IPHONE_4_0,__IPHONE_6_0)
       |  458|DISPATCH_EXPORT DISPATCH_NONNULL2 DISPATCH_NOTHROW
       |  459|__attribute__((__format__(printf,2,3)))
       |  460|void
       |  461|dispatch_debug(dispatch_object_t object, const char *message, ...);
       |  462|
       |  463|__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6,__MAC_10_9,__IPHONE_4_0,__IPHONE_6_0)
       |  464|DISPATCH_EXPORT DISPATCH_NONNULL2 DISPATCH_NOTHROW
       |  465|__attribute__((__format__(printf,2,0)))
       |  466|void
       |  467|dispatch_debugv(dispatch_object_t object, const char *message, va_list ap);
       |  468|
       |  469|__END_DECLS
       |  470|
       |  471|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/dispatch/once.h:
       |    1|/*
       |    2| * Copyright (c) 2008-2010 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_APACHE_LICENSE_HEADER_START@
       |    5| *
       |    6| * Licensed under the Apache License, Version 2.0 (the "License");
       |    7| * you may not use this file except in compliance with the License.
       |    8| * You may obtain a copy of the License at
       |    9| *
       |   10| *     http://www.apache.org/licenses/LICENSE-2.0
       |   11| *
       |   12| * Unless required by applicable law or agreed to in writing, software
       |   13| * distributed under the License is distributed on an "AS IS" BASIS,
       |   14| * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       |   15| * See the License for the specific language governing permissions and
       |   16| * limitations under the License.
       |   17| *
       |   18| * @APPLE_APACHE_LICENSE_HEADER_END@
       |   19| */
       |   20|
       |   21|#ifndef __DISPATCH_ONCE__
       |   22|#define __DISPATCH_ONCE__
       |   23|
       |   24|#ifndef __DISPATCH_INDIRECT__
       |   25|#error "Please #include <dispatch/dispatch.h> instead of this file directly."
       |   26|#include <dispatch/base.h> // for HeaderDoc
       |   27|#endif
       |   28|
       |   29|__BEGIN_DECLS
       |   30|
       |   31|/*!
       |   32| * @typedef dispatch_once_t
       |   33| *
       |   34| * @abstract
       |   35| * A predicate for use with dispatch_once(). It must be initialized to zero.
       |   36| * Note: static and global variables default to zero.
       |   37| */
       |   38|typedef long dispatch_once_t;
       |   39|
  ------------------
  | url_session_manager_creation_queue:
  |      0|   31|/*!
  |      0|   32| * @typedef dispatch_once_t
  |      0|   33| *
  |      0|   34| * @abstract
  |      0|   35| * A predicate for use with dispatch_once(). It must be initialized to zero.
  |      0|   36| * Note: static and global variables default to zero.
  |      0|   37| */
  |      0|   38|typedef long dispatch_once_t;
  |      0|   39|
  ------------------
       |   40|/*!
       |   41| * @function dispatch_once
       |   42| *
       |   43| * @abstract
       |   44| * Execute a block once and only once.
       |   45| *
       |   46| * @param predicate
       |   47| * A pointer to a dispatch_once_t that is used to test whether the block has
       |   48| * completed or not.
       |   49| *
       |   50| * @param block
       |   51| * The block to execute once.
       |   52| *
       |   53| * @discussion
       |   54| * Always call dispatch_once() before using or testing any variables that are
       |   55| * initialized by the block.
       |   56| */
       |   57|#ifdef __BLOCKS__
       |   58|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |   59|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |   60|void
  ------------------
  | url_session_manager_processing_queue:
  |      0|   52| *
  |      0|   53| * @discussion
  |      0|   54| * Always call dispatch_once() before using or testing any variables that are
  |      0|   55| * initialized by the block.
  |      0|   56| */
  |      0|   57|#ifdef __BLOCKS__
  |      0|   58|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
  |      0|   59|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
  |      0|   60|void
  ------------------
       |   61|dispatch_once(dispatch_once_t *predicate, dispatch_block_t block);
       |   62|
       |   63|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |   64|void
       |   65|_dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
  ------------------
  | -[UIWebView(AFNetworking) sessionManager]:
  |      0|   52| *
  |      0|   53| * @discussion
  |      0|   54| * Always call dispatch_once() before using or testing any variables that are
  |      0|   55| * initialized by the block.
  |      0|   56| */
  |      0|   57|#ifdef __BLOCKS__
  |      0|   58|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
  |      0|   59|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
  |      0|   60|void
  |      0|   61|dispatch_once(dispatch_once_t *predicate, dispatch_block_t block);
  |      0|   62|
  |      0|   63|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
  |      0|   64|void
  |      0|   65|_dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
  ------------------
       |   66|{
       |   67|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
       |   68|		dispatch_once(predicate, block);
       |   69|	}
  ------------------
  | +[AFNetworkActivityIndicatorManager sharedManager]:
  |      0|   61|dispatch_once(dispatch_once_t *predicate, dispatch_block_t block);
  |      0|   62|
  |      0|   63|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
  |      0|   64|void
  |      0|   65|_dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
  |      0|   66|{
  |      0|   67|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
  |      0|   68|		dispatch_once(predicate, block);
  |      0|   69|	}
  ------------------
       |   70|}
  ------------------
  | url_session_manager_completion_group:
  |      0|   62|
  |      0|   63|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
  |      0|   64|void
  |      0|   65|_dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
  |      0|   66|{
  |      0|   67|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
  |      0|   68|		dispatch_once(predicate, block);
  |      0|   69|	}
  |      0|   70|}
  ------------------
       |   71|#undef dispatch_once
      0|   72|#define dispatch_once _dispatch_once
       |   73|#endif
       |   74|
       |   75|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |   76|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |   77|void
       |   78|dispatch_once_f(dispatch_once_t *predicate, void *context,
       |   79|		dispatch_function_t function);
       |   80|
       |   81|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL1 DISPATCH_NONNULL3
       |   82|DISPATCH_NOTHROW
  ------------------
  | -[UIWebView(AFNetworking) responseSerializer]:
  |      0|   71|#undef dispatch_once
  |      0|   72|#define dispatch_once _dispatch_once
  |      0|   73|#endif
  |      0|   74|
  |      0|   75|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
  |      0|   76|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
  |      0|   77|void
  |      0|   78|dispatch_once_f(dispatch_once_t *predicate, void *context,
  |      0|   79|		dispatch_function_t function);
  |      0|   80|
  |      0|   81|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL1 DISPATCH_NONNULL3
  |      0|   82|DISPATCH_NOTHROW
  ------------------
       |   83|void
       |   84|_dispatch_once_f(dispatch_once_t *predicate, void *context,
       |   85|		dispatch_function_t function)
       |   86|{
       |   87|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
       |   88|		dispatch_once_f(predicate, context, function);
       |   89|	}
       |   90|}
       |   91|#undef dispatch_once_f
       |   92|#define dispatch_once_f _dispatch_once_f
       |   93|
       |   94|__END_DECLS
       |   95|
       |   96|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/dispatch/queue.h:
       |    1|/*
       |    2| * Copyright (c) 2008-2014 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_APACHE_LICENSE_HEADER_START@
       |    5| *
       |    6| * Licensed under the Apache License, Version 2.0 (the "License");
       |    7| * you may not use this file except in compliance with the License.
       |    8| * You may obtain a copy of the License at
       |    9| *
       |   10| *     http://www.apache.org/licenses/LICENSE-2.0
       |   11| *
       |   12| * Unless required by applicable law or agreed to in writing, software
       |   13| * distributed under the License is distributed on an "AS IS" BASIS,
       |   14| * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       |   15| * See the License for the specific language governing permissions and
       |   16| * limitations under the License.
       |   17| *
       |   18| * @APPLE_APACHE_LICENSE_HEADER_END@
       |   19| */
       |   20|
       |   21|#ifndef __DISPATCH_QUEUE__
       |   22|#define __DISPATCH_QUEUE__
       |   23|
       |   24|#ifndef __DISPATCH_INDIRECT__
       |   25|#error "Please #include <dispatch/dispatch.h> instead of this file directly."
       |   26|#include <dispatch/base.h> // for HeaderDoc
       |   27|#endif
       |   28|
       |   29|/*!
       |   30| * @header
       |   31| *
       |   32| * Dispatch is an abstract model for expressing concurrency via simple but
       |   33| * powerful API.
       |   34| *
       |   35| * At the core, dispatch provides serial FIFO queues to which blocks may be
       |   36| * submitted. Blocks submitted to these dispatch queues are invoked on a pool
       |   37| * of threads fully managed by the system. No guarantee is made regarding
       |   38| * which thread a block will be invoked on; however, it is guaranteed that only
       |   39| * one block submitted to the FIFO dispatch queue will be invoked at a time.
       |   40| *
       |   41| * When multiple queues have blocks to be processed, the system is free to
       |   42| * allocate additional threads to invoke the blocks concurrently. When the
       |   43| * queues become empty, these threads are automatically released.
       |   44| */
       |   45|
       |   46|/*!
       |   47| * @typedef dispatch_queue_t
       |   48| *
       |   49| * @abstract
       |   50| * Dispatch queues invoke blocks submitted to them serially in FIFO order. A
       |   51| * queue will only invoke one block at a time, but independent queues may each
       |   52| * invoke their blocks concurrently with respect to each other.
       |   53| *
       |   54| * @discussion
       |   55| * Dispatch queues are lightweight objects to which blocks may be submitted.
       |   56| * The system manages a pool of threads which process dispatch queues and
       |   57| * invoke blocks submitted to them.
       |   58| *
       |   59| * Conceptually a dispatch queue may have its own thread of execution, and
       |   60| * interaction between queues is highly asynchronous.
       |   61| *
       |   62| * Dispatch queues are reference counted via calls to dispatch_retain() and
       |   63| * dispatch_release(). Pending blocks submitted to a queue also hold a
       |   64| * reference to the queue until they have finished. Once all references to a
       |   65| * queue have been released, the queue will be deallocated by the system.
       |   66| */
       |   67|DISPATCH_DECL(dispatch_queue);
       |   68|
       |   69|__BEGIN_DECLS
       |   70|
       |   71|/*!
       |   72| * @function dispatch_async
       |   73| *
       |   74| * @abstract
       |   75| * Submits a block for asynchronous execution on a dispatch queue.
       |   76| *
       |   77| * @discussion
       |   78| * The dispatch_async() function is the fundamental mechanism for submitting
       |   79| * blocks to a dispatch queue.
       |   80| *
       |   81| * Calls to dispatch_async() always return immediately after the block has
       |   82| * been submitted, and never wait for the block to be invoked.
       |   83| *
       |   84| * The target queue determines whether the block will be invoked serially or
       |   85| * concurrently with respect to other blocks submitted to that same queue.
       |   86| * Serial queues are processed concurrently with respect to each other.
       |   87| *
       |   88| * @param queue
       |   89| * The target dispatch queue to which the block is submitted.
       |   90| * The system will hold a reference on the target queue until the block
       |   91| * has finished.
       |   92| * The result of passing NULL in this parameter is undefined.
       |   93| *
       |   94| * @param block
       |   95| * The block to submit to the target dispatch queue. This function performs
       |   96| * Block_copy() and Block_release() on behalf of callers.
       |   97| * The result of passing NULL in this parameter is undefined.
       |   98| */
       |   99|#ifdef __BLOCKS__
       |  100|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  101|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  102|void
       |  103|dispatch_async(dispatch_queue_t queue, dispatch_block_t block);
       |  104|#endif
       |  105|
       |  106|/*!
       |  107| * @function dispatch_async_f
       |  108| *
       |  109| * @abstract
       |  110| * Submits a function for asynchronous execution on a dispatch queue.
       |  111| *
       |  112| * @discussion
       |  113| * See dispatch_async() for details.
       |  114| *
       |  115| * @param queue
       |  116| * The target dispatch queue to which the function is submitted.
       |  117| * The system will hold a reference on the target queue until the function
       |  118| * has returned.
       |  119| * The result of passing NULL in this parameter is undefined.
       |  120| *
       |  121| * @param context
       |  122| * The application-defined context parameter to pass to the function.
       |  123| *
       |  124| * @param work
       |  125| * The application-defined function to invoke on the target queue. The first
       |  126| * parameter passed to this function is the context provided to
       |  127| * dispatch_async_f().
       |  128| * The result of passing NULL in this parameter is undefined.
       |  129| */
       |  130|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  131|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  132|void
       |  133|dispatch_async_f(dispatch_queue_t queue,
       |  134|	void *context,
       |  135|	dispatch_function_t work);
       |  136|
       |  137|/*!
       |  138| * @function dispatch_sync
       |  139| *
       |  140| * @abstract
       |  141| * Submits a block for synchronous execution on a dispatch queue.
       |  142| *
       |  143| * @discussion
       |  144| * Submits a block to a dispatch queue like dispatch_async(), however
       |  145| * dispatch_sync() will not return until the block has finished.
       |  146| *
       |  147| * Calls to dispatch_sync() targeting the current queue will result
       |  148| * in dead-lock. Use of dispatch_sync() is also subject to the same
       |  149| * multi-party dead-lock problems that may result from the use of a mutex.
       |  150| * Use of dispatch_async() is preferred.
       |  151| *
       |  152| * Unlike dispatch_async(), no retain is performed on the target queue. Because
       |  153| * calls to this function are synchronous, the dispatch_sync() "borrows" the
       |  154| * reference of the caller.
       |  155| *
       |  156| * As an optimization, dispatch_sync() invokes the block on the current
       |  157| * thread when possible.
       |  158| *
       |  159| * @param queue
       |  160| * The target dispatch queue to which the block is submitted.
       |  161| * The result of passing NULL in this parameter is undefined.
       |  162| *
       |  163| * @param block
       |  164| * The block to be invoked on the target dispatch queue.
       |  165| * The result of passing NULL in this parameter is undefined.
       |  166| */
       |  167|#ifdef __BLOCKS__
       |  168|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  169|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  170|void
       |  171|dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);
       |  172|#endif
       |  173|
       |  174|/*!
       |  175| * @function dispatch_sync_f
       |  176| *
       |  177| * @abstract
       |  178| * Submits a function for synchronous execution on a dispatch queue.
       |  179| *
       |  180| * @discussion
       |  181| * See dispatch_sync() for details.
       |  182| *
       |  183| * @param queue
       |  184| * The target dispatch queue to which the function is submitted.
       |  185| * The result of passing NULL in this parameter is undefined.
       |  186| *
       |  187| * @param context
       |  188| * The application-defined context parameter to pass to the function.
       |  189| *
       |  190| * @param work
       |  191| * The application-defined function to invoke on the target queue. The first
       |  192| * parameter passed to this function is the context provided to
       |  193| * dispatch_sync_f().
       |  194| * The result of passing NULL in this parameter is undefined.
       |  195| */
       |  196|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  197|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  198|void
       |  199|dispatch_sync_f(dispatch_queue_t queue,
       |  200|	void *context,
       |  201|	dispatch_function_t work);
       |  202|
       |  203|/*!
       |  204| * @function dispatch_apply
       |  205| *
       |  206| * @abstract
       |  207| * Submits a block to a dispatch queue for multiple invocations.
       |  208| *
       |  209| * @discussion
       |  210| * Submits a block to a dispatch queue for multiple invocations. This function
       |  211| * waits for the task block to complete before returning. If the target queue
       |  212| * is concurrent, the block may be invoked concurrently, and it must therefore
       |  213| * be reentrant safe.
       |  214| *
       |  215| * Each invocation of the block will be passed the current index of iteration.
       |  216| *
       |  217| * @param iterations
       |  218| * The number of iterations to perform.
       |  219| *
       |  220| * @param queue
       |  221| * The target dispatch queue to which the block is submitted.
       |  222| * The result of passing NULL in this parameter is undefined.
       |  223| *
       |  224| * @param block
       |  225| * The block to be invoked the specified number of iterations.
       |  226| * The result of passing NULL in this parameter is undefined.
       |  227| */
       |  228|#ifdef __BLOCKS__
       |  229|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  230|DISPATCH_EXPORT DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  231|void
       |  232|dispatch_apply(size_t iterations, dispatch_queue_t queue,
       |  233|		void (^block)(size_t));
       |  234|#endif
       |  235|
       |  236|/*!
       |  237| * @function dispatch_apply_f
       |  238| *
       |  239| * @abstract
       |  240| * Submits a function to a dispatch queue for multiple invocations.
       |  241| *
       |  242| * @discussion
       |  243| * See dispatch_apply() for details.
       |  244| *
       |  245| * @param iterations
       |  246| * The number of iterations to perform.
       |  247| *
       |  248| * @param queue
       |  249| * The target dispatch queue to which the function is submitted.
       |  250| * The result of passing NULL in this parameter is undefined.
       |  251| *
       |  252| * @param context
       |  253| * The application-defined context parameter to pass to the function.
       |  254| *
       |  255| * @param work
       |  256| * The application-defined function to invoke on the target queue. The first
       |  257| * parameter passed to this function is the context provided to
       |  258| * dispatch_apply_f(). The second parameter passed to this function is the
       |  259| * current index of iteration.
       |  260| * The result of passing NULL in this parameter is undefined.
       |  261| */
       |  262|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  263|DISPATCH_EXPORT DISPATCH_NONNULL4 DISPATCH_NOTHROW
       |  264|void
       |  265|dispatch_apply_f(size_t iterations, dispatch_queue_t queue,
       |  266|	void *context,
       |  267|	void (*work)(void *, size_t));
       |  268|
       |  269|/*!
       |  270| * @function dispatch_get_current_queue
       |  271| *
       |  272| * @abstract
       |  273| * Returns the queue on which the currently executing block is running.
       |  274| *
       |  275| * @discussion
       |  276| * Returns the queue on which the currently executing block is running.
       |  277| *
       |  278| * When dispatch_get_current_queue() is called outside of the context of a
       |  279| * submitted block, it will return the default concurrent queue.
       |  280| *
       |  281| * Recommended for debugging and logging purposes only:
       |  282| * The code must not make any assumptions about the queue returned, unless it
       |  283| * is one of the global queues or a queue the code has itself created.
       |  284| * The code must not assume that synchronous execution onto a queue is safe
       |  285| * from deadlock if that queue is not the one returned by
       |  286| * dispatch_get_current_queue().
       |  287| *
       |  288| * When dispatch_get_current_queue() is called on the main thread, it may
       |  289| * or may not return the same value as dispatch_get_main_queue(). Comparing
       |  290| * the two is not a valid way to test whether code is executing on the
       |  291| * main thread.
       |  292| *
       |  293| * This function is deprecated and will be removed in a future release.
       |  294| *
       |  295| * @result
       |  296| * Returns the current queue.
       |  297| */
       |  298|__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6,__MAC_10_9,__IPHONE_4_0,__IPHONE_6_0)
       |  299|DISPATCH_EXPORT DISPATCH_PURE DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |  300|dispatch_queue_t
       |  301|dispatch_get_current_queue(void);
       |  302|
       |  303|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  304|DISPATCH_EXPORT struct dispatch_queue_s _dispatch_main_q;
       |  305|
       |  306|/*!
       |  307| * @function dispatch_get_main_queue
       |  308| *
       |  309| * @abstract
       |  310| * Returns the default queue that is bound to the main thread.
       |  311| *
       |  312| * @discussion
       |  313| * In order to invoke blocks submitted to the main queue, the application must
       |  314| * call dispatch_main(), NSApplicationMain(), or use a CFRunLoop on the main
       |  315| * thread.
       |  316| *
       |  317| * @result
       |  318| * Returns the main queue. This queue is created automatically on behalf of
       |  319| * the main thread before main() is called.
       |  320| */
       |  321|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_CONST DISPATCH_NOTHROW
       |  322|dispatch_queue_t
       |  323|dispatch_get_main_queue(void)
       |  324|{
       |  325|	return DISPATCH_GLOBAL_OBJECT(dispatch_queue_t, _dispatch_main_q);
       |  326|}
       |  327|
       |  328|/*!
       |  329| * @typedef dispatch_queue_priority_t
       |  330| * Type of dispatch_queue_priority
       |  331| *
       |  332| * @constant DISPATCH_QUEUE_PRIORITY_HIGH
       |  333| * Items dispatched to the queue will run at high priority,
       |  334| * i.e. the queue will be scheduled for execution before
       |  335| * any default priority or low priority queue.
       |  336| *
       |  337| * @constant DISPATCH_QUEUE_PRIORITY_DEFAULT
       |  338| * Items dispatched to the queue will run at the default
       |  339| * priority, i.e. the queue will be scheduled for execution
       |  340| * after all high priority queues have been scheduled, but
       |  341| * before any low priority queues have been scheduled.
       |  342| *
       |  343| * @constant DISPATCH_QUEUE_PRIORITY_LOW
       |  344| * Items dispatched to the queue will run at low priority,
       |  345| * i.e. the queue will be scheduled for execution after all
       |  346| * default priority and high priority queues have been
       |  347| * scheduled.
       |  348| *
       |  349| * @constant DISPATCH_QUEUE_PRIORITY_BACKGROUND
       |  350| * Items dispatched to the queue will run at background priority, i.e. the queue
       |  351| * will be scheduled for execution after all higher priority queues have been
       |  352| * scheduled and the system will run items on this queue on a thread with
       |  353| * background status as per setpriority(2) (i.e. disk I/O is throttled and the
       |  354| * thread's scheduling priority is set to lowest value).
       |  355| */
       |  356|#define DISPATCH_QUEUE_PRIORITY_HIGH 2
      0|  357|#define DISPATCH_QUEUE_PRIORITY_DEFAULT 0
       |  358|#define DISPATCH_QUEUE_PRIORITY_LOW (-2)
      0|  359|#define DISPATCH_QUEUE_PRIORITY_BACKGROUND INT16_MIN
       |  360|
       |  361|typedef long dispatch_queue_priority_t;
       |  362|
       |  363|/*!
       |  364| * @typedef dispatch_qos_class_t
       |  365| * Alias for qos_class_t type.
       |  366| */
       |  367|#if __has_include(<sys/qos.h>)
       |  368|#include <sys/qos.h>
       |  369|typedef qos_class_t dispatch_qos_class_t;
       |  370|#else
       |  371|typedef unsigned int dispatch_qos_class_t;
       |  372|#endif
       |  373|
       |  374|/*!
       |  375| * @function dispatch_get_global_queue
       |  376| *
       |  377| * @abstract
       |  378| * Returns a well-known global concurrent queue of a given quality of service
       |  379| * class.
       |  380| *
       |  381| * @discussion
       |  382| * The well-known global concurrent queues may not be modified. Calls to
       |  383| * dispatch_suspend(), dispatch_resume(), dispatch_set_context(), etc., will
       |  384| * have no effect when used with queues returned by this function.
       |  385| *
       |  386| * @param identifier
       |  387| * A quality of service class defined in qos_class_t or a priority defined in
       |  388| * dispatch_queue_priority_t.
       |  389| *
       |  390| * It is recommended to use quality of service class values to identify the
       |  391| * well-known global concurrent queues:
       |  392| *  - QOS_CLASS_USER_INTERACTIVE
       |  393| *  - QOS_CLASS_USER_INITIATED
       |  394| *  - QOS_CLASS_DEFAULT
       |  395| *  - QOS_CLASS_UTILITY
       |  396| *  - QOS_CLASS_BACKGROUND
       |  397| *
       |  398| * The global concurrent queues may still be identified by their priority,
       |  399| * which map to the following QOS classes:
       |  400| *  - DISPATCH_QUEUE_PRIORITY_HIGH:         QOS_CLASS_USER_INITIATED
       |  401| *  - DISPATCH_QUEUE_PRIORITY_DEFAULT:      QOS_CLASS_DEFAULT
       |  402| *  - DISPATCH_QUEUE_PRIORITY_LOW:          QOS_CLASS_UTILITY
       |  403| *  - DISPATCH_QUEUE_PRIORITY_BACKGROUND:   QOS_CLASS_BACKGROUND
       |  404| *
       |  405| * @param flags
       |  406| * Reserved for future use. Passing any value other than zero may result in
       |  407| * a NULL return value.
       |  408| *
       |  409| * @result
       |  410| * Returns the requested global queue or NULL if the requested global queue
       |  411| * does not exist.
       |  412| */
       |  413|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  414|DISPATCH_EXPORT DISPATCH_CONST DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |  415|dispatch_queue_t
       |  416|dispatch_get_global_queue(long identifier, unsigned long flags);
       |  417|
       |  418|/*!
       |  419| * @typedef dispatch_queue_attr_t
       |  420| *
       |  421| * @abstract
       |  422| * Attribute for dispatch queues.
       |  423| */
       |  424|DISPATCH_DECL(dispatch_queue_attr);
       |  425|
       |  426|/*!
       |  427| * @const DISPATCH_QUEUE_SERIAL
       |  428| * @discussion A dispatch queue that invokes blocks serially in FIFO order.
       |  429| */
      0|  430|#define DISPATCH_QUEUE_SERIAL NULL
       |  431|
       |  432|/*!
       |  433| * @const DISPATCH_QUEUE_CONCURRENT
       |  434| * @discussion A dispatch queue that may invoke blocks concurrently and supports
       |  435| * barrier blocks submitted with the dispatch barrier API.
       |  436| */
       |  437|#define DISPATCH_QUEUE_CONCURRENT \
      0|  438|		DISPATCH_GLOBAL_OBJECT(dispatch_queue_attr_t, \
      0|  439|		_dispatch_queue_attr_concurrent)
       |  440|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_3)
       |  441|DISPATCH_EXPORT
       |  442|struct dispatch_queue_attr_s _dispatch_queue_attr_concurrent;
       |  443|
       |  444|/*!
       |  445| * @function dispatch_queue_attr_make_with_qos_class
       |  446| *
       |  447| * @abstract
       |  448| * Returns an attribute value which may be provided to dispatch_queue_create()
       |  449| * in order to assign a QOS class and relative priority to the queue.
       |  450| *
       |  451| * @discussion
       |  452| * When specified in this manner, the QOS class and relative priority take
       |  453| * precedence over those inherited from the dispatch queue's target queue (if
       |  454| * any) as long that does not result in a lower QOS class and relative priority.
       |  455| *
       |  456| * The global queue priorities map to the following QOS classes:
       |  457| *  - DISPATCH_QUEUE_PRIORITY_HIGH:         QOS_CLASS_USER_INITIATED
       |  458| *  - DISPATCH_QUEUE_PRIORITY_DEFAULT:      QOS_CLASS_DEFAULT
       |  459| *  - DISPATCH_QUEUE_PRIORITY_LOW:          QOS_CLASS_UTILITY
       |  460| *  - DISPATCH_QUEUE_PRIORITY_BACKGROUND:   QOS_CLASS_BACKGROUND
       |  461| *
       |  462| * Example:
       |  463| * <code>
       |  464| *	dispatch_queue_t queue;
       |  465| *	dispatch_queue_attr_t attr;
       |  466| *	attr = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL,
       |  467| *			QOS_CLASS_UTILITY, 0);
       |  468| *	queue = dispatch_queue_create("com.example.myqueue", attr);
       |  469| * </code>
       |  470| *
       |  471| * @param attr
       |  472| * A queue attribute value to be combined with the QOS class, or NULL.
       |  473| *
       |  474| * @param qos_class
       |  475| * A QOS class value:
       |  476| *  - QOS_CLASS_USER_INTERACTIVE
       |  477| *  - QOS_CLASS_USER_INITIATED
       |  478| *  - QOS_CLASS_DEFAULT
       |  479| *  - QOS_CLASS_UTILITY
       |  480| *  - QOS_CLASS_BACKGROUND
       |  481| * Passing any other value results in NULL being returned.
       |  482| *
       |  483| * @param relative_priority
       |  484| * A relative priority within the QOS class. This value is a negative
       |  485| * offset from the maximum supported scheduler priority for the given class.
       |  486| * Passing a value greater than zero or less than QOS_MIN_RELATIVE_PRIORITY
       |  487| * results in NULL being returned.
       |  488| *
       |  489| * @return
       |  490| * Returns an attribute value which may be provided to dispatch_queue_create(),
       |  491| * or NULL if an invalid QOS class was requested.
       |  492| * The new value combines the attributes specified by the 'attr' parameter and
       |  493| * the new QOS class and relative priority.
       |  494| */
       |  495|__OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0)
       |  496|DISPATCH_EXPORT DISPATCH_WARN_RESULT DISPATCH_PURE DISPATCH_NOTHROW
       |  497|dispatch_queue_attr_t
       |  498|dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr,
       |  499|		dispatch_qos_class_t qos_class, int relative_priority);
       |  500|
       |  501|/*!
       |  502| * @function dispatch_queue_create
       |  503| *
       |  504| * @abstract
       |  505| * Creates a new dispatch queue to which blocks may be submitted.
       |  506| *
       |  507| * @discussion
       |  508| * Dispatch queues created with the DISPATCH_QUEUE_SERIAL or a NULL attribute
       |  509| * invoke blocks serially in FIFO order.
       |  510| *
       |  511| * Dispatch queues created with the DISPATCH_QUEUE_CONCURRENT attribute may
       |  512| * invoke blocks concurrently (similarly to the global concurrent queues, but
       |  513| * potentially with more overhead), and support barrier blocks submitted with
       |  514| * the dispatch barrier API, which e.g. enables the implementation of efficient
       |  515| * reader-writer schemes.
       |  516| *
       |  517| * When a dispatch queue is no longer needed, it should be released with
       |  518| * dispatch_release(). Note that any pending blocks submitted to a queue will
       |  519| * hold a reference to that queue. Therefore a queue will not be deallocated
       |  520| * until all pending blocks have finished.
       |  521| *
       |  522| * Passing the result of the dispatch_queue_attr_make_with_qos_class() function
       |  523| * to the attr parameter of this function allows a quality of service class and
       |  524| * relative priority to be specified for the newly created queue.
       |  525| * The quality of service class so specified takes precedence over the quality
       |  526| * of service class of the newly created dispatch queue's target queue (if any)
       |  527| * as long that does not result in a lower QOS class and relative priority.
       |  528| *
       |  529| * When no quality of service class is specified, the target queue of a newly
       |  530| * created dispatch queue is the default priority global concurrent queue.
       |  531| *
       |  532| * @param label
       |  533| * A string label to attach to the queue.
       |  534| * This parameter is optional and may be NULL.
       |  535| *
       |  536| * @param attr
       |  537| * DISPATCH_QUEUE_SERIAL, DISPATCH_QUEUE_CONCURRENT, or the result of a call to
       |  538| * the function dispatch_queue_attr_make_with_qos_class().
       |  539| *
       |  540| * @result
       |  541| * The newly created dispatch queue.
       |  542| */
       |  543|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  544|DISPATCH_EXPORT DISPATCH_MALLOC DISPATCH_RETURNS_RETAINED DISPATCH_WARN_RESULT
       |  545|DISPATCH_NOTHROW
       |  546|dispatch_queue_t
       |  547|dispatch_queue_create(const char *label, dispatch_queue_attr_t attr);
       |  548|
       |  549|/*!
       |  550| * @const DISPATCH_CURRENT_QUEUE_LABEL
       |  551| * @discussion Constant to pass to the dispatch_queue_get_label() function to
       |  552| * retrieve the label of the current queue.
       |  553| */
       |  554|#define DISPATCH_CURRENT_QUEUE_LABEL NULL
       |  555|
       |  556|/*!
       |  557| * @function dispatch_queue_get_label
       |  558| *
       |  559| * @abstract
       |  560| * Returns the label of the given queue, as specified when the queue was
       |  561| * created, or the empty string if a NULL label was specified.
       |  562| *
       |  563| * Passing DISPATCH_CURRENT_QUEUE_LABEL will return the label of the current
       |  564| * queue.
       |  565| *
       |  566| * @param queue
       |  567| * The queue to query, or DISPATCH_CURRENT_QUEUE_LABEL.
       |  568| *
       |  569| * @result
       |  570| * The label of the queue.
       |  571| */
       |  572|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  573|DISPATCH_EXPORT DISPATCH_PURE DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |  574|const char *
       |  575|dispatch_queue_get_label(dispatch_queue_t queue);
       |  576|
       |  577|/*!
       |  578| * @function dispatch_queue_get_qos_class
       |  579| *
       |  580| * @abstract
       |  581| * Returns the QOS class and relative priority of the given queue.
       |  582| *
       |  583| * @discussion
       |  584| * If the given queue was created with an attribute value returned from
       |  585| * dispatch_queue_attr_make_with_qos_class(), this function returns the QOS
       |  586| * class and relative priority specified at that time; for any other attribute
       |  587| * value it returns a QOS class of QOS_CLASS_UNSPECIFIED and a relative
       |  588| * priority of 0.
       |  589| *
       |  590| * If the given queue is one of the global queues, this function returns its
       |  591| * assigned QOS class value as documented under dispatch_get_global_queue() and
       |  592| * a relative priority of 0; in the case of the main queue it returns the QOS
       |  593| * value provided by qos_class_main() and a relative priority of 0.
       |  594| *
       |  595| * @param queue
       |  596| * The queue to query.
       |  597| *
       |  598| * @param relative_priority_ptr
       |  599| * A pointer to an int variable to be filled with the relative priority offset
       |  600| * within the QOS class, or NULL.
       |  601| *
       |  602| * @return
       |  603| * A QOS class value:
       |  604| *	- QOS_CLASS_USER_INTERACTIVE
       |  605| *	- QOS_CLASS_USER_INITIATED
       |  606| *	- QOS_CLASS_DEFAULT
       |  607| *	- QOS_CLASS_UTILITY
       |  608| *	- QOS_CLASS_BACKGROUND
       |  609| *	- QOS_CLASS_UNSPECIFIED
       |  610| */
       |  611|__OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0)
       |  612|DISPATCH_EXPORT DISPATCH_WARN_RESULT DISPATCH_NONNULL1 DISPATCH_NOTHROW
       |  613|dispatch_qos_class_t
       |  614|dispatch_queue_get_qos_class(dispatch_queue_t queue,
       |  615|		int *relative_priority_ptr);
       |  616|
       |  617|/*!
       |  618| * @const DISPATCH_TARGET_QUEUE_DEFAULT
       |  619| * @discussion Constant to pass to the dispatch_set_target_queue() and
       |  620| * dispatch_source_create() functions to indicate that the default target queue
       |  621| * for the given object type should be used.
       |  622| */
       |  623|#define DISPATCH_TARGET_QUEUE_DEFAULT NULL
       |  624|
       |  625|/*!
       |  626| * @function dispatch_set_target_queue
       |  627| *
       |  628| * @abstract
       |  629| * Sets the target queue for the given object.
       |  630| *
       |  631| * @discussion
       |  632| * An object's target queue is responsible for processing the object.
       |  633| *
       |  634| * When no quality of service class and relative priority is specified for a
       |  635| * dispatch queue at the time of creation, a dispatch queue's quality of service
       |  636| * class is inherited from its target queue. The dispatch_get_global_queue()
       |  637| * function may be used to obtain a target queue of a specific quality of
       |  638| * service class, however the use of dispatch_queue_attr_make_with_qos_class()
       |  639| * is recommended instead.
       |  640| *
       |  641| * Blocks submitted to a serial queue whose target queue is another serial
       |  642| * queue will not be invoked concurrently with blocks submitted to the target
       |  643| * queue or to any other queue with that same target queue.
       |  644| *
       |  645| * The result of introducing a cycle into the hierarchy of target queues is
       |  646| * undefined.
       |  647| *
       |  648| * A dispatch source's target queue specifies where its event handler and
       |  649| * cancellation handler blocks will be submitted.
       |  650| *
       |  651| * A dispatch I/O channel's target queue specifies where where its I/O
       |  652| * operations are executed. If the channel's target queue's priority is set to
       |  653| * DISPATCH_QUEUE_PRIORITY_BACKGROUND, then the I/O operations performed by
       |  654| * dispatch_io_read() or dispatch_io_write() on that queue will be
       |  655| * throttled when there is I/O contention.
       |  656| *
       |  657| * For all other dispatch object types, the only function of the target queue
       |  658| * is to determine where an object's finalizer function is invoked.
       |  659| *
       |  660| * @param object
       |  661| * The object to modify.
       |  662| * The result of passing NULL in this parameter is undefined.
       |  663| *
       |  664| * @param queue
       |  665| * The new target queue for the object. The queue is retained, and the
       |  666| * previous target queue, if any, is released.
       |  667| * If queue is DISPATCH_TARGET_QUEUE_DEFAULT, set the object's target queue
       |  668| * to the default target queue for the given object type.
       |  669| */
       |  670|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  671|DISPATCH_EXPORT DISPATCH_NOTHROW // DISPATCH_NONNULL1
       |  672|void
       |  673|dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue);
       |  674|
       |  675|/*!
       |  676| * @function dispatch_main
       |  677| *
       |  678| * @abstract
       |  679| * Execute blocks submitted to the main queue.
       |  680| *
       |  681| * @discussion
       |  682| * This function "parks" the main thread and waits for blocks to be submitted
       |  683| * to the main queue. This function never returns.
       |  684| *
       |  685| * Applications that call NSApplicationMain() or CFRunLoopRun() on the
       |  686| * main thread do not need to call dispatch_main().
       |  687| */
       |  688|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  689|DISPATCH_EXPORT DISPATCH_NOTHROW DISPATCH_NORETURN
       |  690|void
       |  691|dispatch_main(void);
       |  692|
       |  693|/*!
       |  694| * @function dispatch_after
       |  695| *
       |  696| * @abstract
       |  697| * Schedule a block for execution on a given queue at a specified time.
       |  698| *
       |  699| * @discussion
       |  700| * Passing DISPATCH_TIME_NOW as the "when" parameter is supported, but not as
       |  701| * optimal as calling dispatch_async() instead. Passing DISPATCH_TIME_FOREVER
       |  702| * is undefined.
       |  703| *
       |  704| * @param when
       |  705| * A temporal milestone returned by dispatch_time() or dispatch_walltime().
       |  706| *
       |  707| * @param queue
       |  708| * A queue to which the given block will be submitted at the specified time.
       |  709| * The result of passing NULL in this parameter is undefined.
       |  710| *
       |  711| * @param block
       |  712| * The block of code to execute.
       |  713| * The result of passing NULL in this parameter is undefined.
       |  714| */
       |  715|#ifdef __BLOCKS__
       |  716|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  717|DISPATCH_EXPORT DISPATCH_NONNULL2 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  718|void
       |  719|dispatch_after(dispatch_time_t when,
       |  720|	dispatch_queue_t queue,
       |  721|	dispatch_block_t block);
       |  722|#endif
       |  723|
       |  724|/*!
       |  725| * @function dispatch_after_f
       |  726| *
       |  727| * @abstract
       |  728| * Schedule a function for execution on a given queue at a specified time.
       |  729| *
       |  730| * @discussion
       |  731| * See dispatch_after() for details.
       |  732| *
       |  733| * @param when
       |  734| * A temporal milestone returned by dispatch_time() or dispatch_walltime().
       |  735| *
       |  736| * @param queue
       |  737| * A queue to which the given function will be submitted at the specified time.
       |  738| * The result of passing NULL in this parameter is undefined.
       |  739| *
       |  740| * @param context
       |  741| * The application-defined context parameter to pass to the function.
       |  742| *
       |  743| * @param work
       |  744| * The application-defined function to invoke on the target queue. The first
       |  745| * parameter passed to this function is the context provided to
       |  746| * dispatch_after_f().
       |  747| * The result of passing NULL in this parameter is undefined.
       |  748| */
       |  749|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  750|DISPATCH_EXPORT DISPATCH_NONNULL2 DISPATCH_NONNULL4 DISPATCH_NOTHROW
       |  751|void
       |  752|dispatch_after_f(dispatch_time_t when,
       |  753|	dispatch_queue_t queue,
       |  754|	void *context,
       |  755|	dispatch_function_t work);
       |  756|
       |  757|/*!
       |  758| * @functiongroup Dispatch Barrier API
       |  759| * The dispatch barrier API is a mechanism for submitting barrier blocks to a
       |  760| * dispatch queue, analogous to the dispatch_async()/dispatch_sync() API.
       |  761| * It enables the implementation of efficient reader/writer schemes.
       |  762| * Barrier blocks only behave specially when submitted to queues created with
       |  763| * the DISPATCH_QUEUE_CONCURRENT attribute; on such a queue, a barrier block
       |  764| * will not run until all blocks submitted to the queue earlier have completed,
       |  765| * and any blocks submitted to the queue after a barrier block will not run
       |  766| * until the barrier block has completed.
       |  767| * When submitted to a a global queue or to a queue not created with the
       |  768| * DISPATCH_QUEUE_CONCURRENT attribute, barrier blocks behave identically to
       |  769| * blocks submitted with the dispatch_async()/dispatch_sync() API.
       |  770| */
       |  771|
       |  772|/*!
       |  773| * @function dispatch_barrier_async
       |  774| *
       |  775| * @abstract
       |  776| * Submits a barrier block for asynchronous execution on a dispatch queue.
       |  777| *
       |  778| * @discussion
       |  779| * Submits a block to a dispatch queue like dispatch_async(), but marks that
       |  780| * block as a barrier (relevant only on DISPATCH_QUEUE_CONCURRENT queues).
       |  781| *
       |  782| * See dispatch_async() for details.
       |  783| *
       |  784| * @param queue
       |  785| * The target dispatch queue to which the block is submitted.
       |  786| * The system will hold a reference on the target queue until the block
       |  787| * has finished.
       |  788| * The result of passing NULL in this parameter is undefined.
       |  789| *
       |  790| * @param block
       |  791| * The block to submit to the target dispatch queue. This function performs
       |  792| * Block_copy() and Block_release() on behalf of callers.
       |  793| * The result of passing NULL in this parameter is undefined.
       |  794| */
       |  795|#ifdef __BLOCKS__
       |  796|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_3)
       |  797|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  798|void
       |  799|dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block);
       |  800|#endif
       |  801|
       |  802|/*!
       |  803| * @function dispatch_barrier_async_f
       |  804| *
       |  805| * @abstract
       |  806| * Submits a barrier function for asynchronous execution on a dispatch queue.
       |  807| *
       |  808| * @discussion
       |  809| * Submits a function to a dispatch queue like dispatch_async_f(), but marks
       |  810| * that function as a barrier (relevant only on DISPATCH_QUEUE_CONCURRENT
       |  811| * queues).
       |  812| *
       |  813| * See dispatch_async_f() for details.
       |  814| *
       |  815| * @param queue
       |  816| * The target dispatch queue to which the function is submitted.
       |  817| * The system will hold a reference on the target queue until the function
       |  818| * has returned.
       |  819| * The result of passing NULL in this parameter is undefined.
       |  820| *
       |  821| * @param context
       |  822| * The application-defined context parameter to pass to the function.
       |  823| *
       |  824| * @param work
       |  825| * The application-defined function to invoke on the target queue. The first
       |  826| * parameter passed to this function is the context provided to
       |  827| * dispatch_barrier_async_f().
       |  828| * The result of passing NULL in this parameter is undefined.
       |  829| */
       |  830|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_3)
       |  831|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  832|void
       |  833|dispatch_barrier_async_f(dispatch_queue_t queue,
       |  834|	void *context,
       |  835|	dispatch_function_t work);
       |  836|
       |  837|/*!
       |  838| * @function dispatch_barrier_sync
       |  839| *
       |  840| * @abstract
       |  841| * Submits a barrier block for synchronous execution on a dispatch queue.
       |  842| *
       |  843| * @discussion
       |  844| * Submits a block to a dispatch queue like dispatch_sync(), but marks that
       |  845| * block as a barrier (relevant only on DISPATCH_QUEUE_CONCURRENT queues).
       |  846| *
       |  847| * See dispatch_sync() for details.
       |  848| *
       |  849| * @param queue
       |  850| * The target dispatch queue to which the block is submitted.
       |  851| * The result of passing NULL in this parameter is undefined.
       |  852| *
       |  853| * @param block
       |  854| * The block to be invoked on the target dispatch queue.
       |  855| * The result of passing NULL in this parameter is undefined.
       |  856| */
       |  857|#ifdef __BLOCKS__
       |  858|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_3)
       |  859|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |  860|void
       |  861|dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block);
       |  862|#endif
       |  863|
       |  864|/*!
       |  865| * @function dispatch_barrier_sync_f
       |  866| *
       |  867| * @abstract
       |  868| * Submits a barrier function for synchronous execution on a dispatch queue.
       |  869| *
       |  870| * @discussion
       |  871| * Submits a function to a dispatch queue like dispatch_sync_f(), but marks that
       |  872| * fuction as a barrier (relevant only on DISPATCH_QUEUE_CONCURRENT queues).
       |  873| *
       |  874| * See dispatch_sync_f() for details.
       |  875| *
       |  876| * @param queue
       |  877| * The target dispatch queue to which the function is submitted.
       |  878| * The result of passing NULL in this parameter is undefined.
       |  879| *
       |  880| * @param context
       |  881| * The application-defined context parameter to pass to the function.
       |  882| *
       |  883| * @param work
       |  884| * The application-defined function to invoke on the target queue. The first
       |  885| * parameter passed to this function is the context provided to
       |  886| * dispatch_barrier_sync_f().
       |  887| * The result of passing NULL in this parameter is undefined.
       |  888| */
       |  889|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_3)
       |  890|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |  891|void
       |  892|dispatch_barrier_sync_f(dispatch_queue_t queue,
       |  893|	void *context,
       |  894|	dispatch_function_t work);
       |  895|
       |  896|/*!
       |  897| * @functiongroup Dispatch queue-specific contexts
       |  898| * This API allows different subsystems to associate context to a shared queue
       |  899| * without risk of collision and to retrieve that context from blocks executing
       |  900| * on that queue or any of its child queues in the target queue hierarchy.
       |  901| */
       |  902|
       |  903|/*!
       |  904| * @function dispatch_queue_set_specific
       |  905| *
       |  906| * @abstract
       |  907| * Associates a subsystem-specific context with a dispatch queue, for a key
       |  908| * unique to the subsystem.
       |  909| *
       |  910| * @discussion
       |  911| * The specified destructor will be invoked with the context on the default
       |  912| * priority global concurrent queue when a new context is set for the same key,
       |  913| * or after all references to the queue have been released.
       |  914| *
       |  915| * @param queue
       |  916| * The dispatch queue to modify.
       |  917| * The result of passing NULL in this parameter is undefined.
       |  918| *
       |  919| * @param key
       |  920| * The key to set the context for, typically a pointer to a static variable
       |  921| * specific to the subsystem. Keys are only compared as pointers and never
       |  922| * dereferenced. Passing a string constant directly is not recommended.
       |  923| * The NULL key is reserved and attemps to set a context for it are ignored.
       |  924| *
       |  925| * @param context
       |  926| * The new subsystem-specific context for the object. This may be NULL.
       |  927| *
       |  928| * @param destructor
       |  929| * The destructor function pointer. This may be NULL and is ignored if context
       |  930| * is NULL.
       |  931| */
       |  932|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_5_0)
       |  933|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NOTHROW
       |  934|void
       |  935|dispatch_queue_set_specific(dispatch_queue_t queue, const void *key,
       |  936|	void *context, dispatch_function_t destructor);
       |  937|
       |  938|/*!
       |  939| * @function dispatch_queue_get_specific
       |  940| *
       |  941| * @abstract
       |  942| * Returns the subsystem-specific context associated with a dispatch queue, for
       |  943| * a key unique to the subsystem.
       |  944| *
       |  945| * @discussion
       |  946| * Returns the context for the specified key if it has been set on the specified
       |  947| * queue.
       |  948| *
       |  949| * @param queue
       |  950| * The dispatch queue to query.
       |  951| * The result of passing NULL in this parameter is undefined.
       |  952| *
       |  953| * @param key
       |  954| * The key to get the context for, typically a pointer to a static variable
       |  955| * specific to the subsystem. Keys are only compared as pointers and never
       |  956| * dereferenced. Passing a string constant directly is not recommended.
       |  957| *
       |  958| * @result
       |  959| * The context for the specified key or NULL if no context was found.
       |  960| */
       |  961|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_5_0)
       |  962|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_PURE DISPATCH_WARN_RESULT
       |  963|DISPATCH_NOTHROW
       |  964|void *
       |  965|dispatch_queue_get_specific(dispatch_queue_t queue, const void *key);
       |  966|
       |  967|/*!
       |  968| * @function dispatch_get_specific
       |  969| *
       |  970| * @abstract
       |  971| * Returns the current subsystem-specific context for a key unique to the
       |  972| * subsystem.
       |  973| *
       |  974| * @discussion
       |  975| * When called from a block executing on a queue, returns the context for the
       |  976| * specified key if it has been set on the queue, otherwise returns the result
       |  977| * of dispatch_get_specific() executed on the queue's target queue or NULL
       |  978| * if the current queue is a global concurrent queue.
       |  979| *
       |  980| * @param key
       |  981| * The key to get the context for, typically a pointer to a static variable
       |  982| * specific to the subsystem. Keys are only compared as pointers and never
       |  983| * dereferenced. Passing a string constant directly is not recommended.
       |  984| *
       |  985| * @result
       |  986| * The context for the specified key or NULL if no context was found.
       |  987| */
       |  988|__OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_5_0)
       |  989|DISPATCH_EXPORT DISPATCH_PURE DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |  990|void *
       |  991|dispatch_get_specific(const void *key);
       |  992|
       |  993|__END_DECLS
       |  994|
       |  995|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/dispatch/time.h:
       |    1|/*
       |    2| * Copyright (c) 2008-2011 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_APACHE_LICENSE_HEADER_START@
       |    5| *
       |    6| * Licensed under the Apache License, Version 2.0 (the "License");
       |    7| * you may not use this file except in compliance with the License.
       |    8| * You may obtain a copy of the License at
       |    9| *
       |   10| *     http://www.apache.org/licenses/LICENSE-2.0
       |   11| *
       |   12| * Unless required by applicable law or agreed to in writing, software
       |   13| * distributed under the License is distributed on an "AS IS" BASIS,
       |   14| * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       |   15| * See the License for the specific language governing permissions and
       |   16| * limitations under the License.
       |   17| *
       |   18| * @APPLE_APACHE_LICENSE_HEADER_END@
       |   19| */
       |   20|
       |   21|#ifndef __DISPATCH_TIME__
       |   22|#define __DISPATCH_TIME__
       |   23|
       |   24|#ifndef __DISPATCH_INDIRECT__
       |   25|#error "Please #include <dispatch/dispatch.h> instead of this file directly."
       |   26|#include <dispatch/base.h> // for HeaderDoc
       |   27|#endif
       |   28|
       |   29|#include <stdint.h>
       |   30|
       |   31|// <rdar://problem/6368156&7563559>
       |   32|#if TARGET_OS_MAC
       |   33|#include <mach/clock_types.h>
       |   34|#endif
       |   35|
       |   36|#ifdef NSEC_PER_SEC
       |   37|#undef NSEC_PER_SEC
       |   38|#endif
       |   39|#ifdef USEC_PER_SEC
       |   40|#undef USEC_PER_SEC
       |   41|#endif
       |   42|#ifdef NSEC_PER_USEC
       |   43|#undef NSEC_PER_USEC
       |   44|#endif
       |   45|#ifdef NSEC_PER_MSEC
       |   46|#undef NSEC_PER_MSEC
       |   47|#endif
       |   48|#define NSEC_PER_SEC 1000000000ull
       |   49|#define NSEC_PER_MSEC 1000000ull
       |   50|#define USEC_PER_SEC 1000000ull
       |   51|#define NSEC_PER_USEC 1000ull
       |   52|
       |   53|__BEGIN_DECLS
       |   54|
       |   55|struct timespec;
       |   56|
       |   57|/*!
       |   58| * @typedef dispatch_time_t
       |   59| *
       |   60| * @abstract
       |   61| * A somewhat abstract representation of time; where zero means "now" and
       |   62| * DISPATCH_TIME_FOREVER means "infinity" and every value in between is an
       |   63| * opaque encoding.
       |   64| */
       |   65|typedef uint64_t dispatch_time_t;
       |   66|
       |   67|#define DISPATCH_TIME_NOW (0ull)
      0|   68|#define DISPATCH_TIME_FOREVER (~0ull)
       |   69|
       |   70|/*!
       |   71| * @function dispatch_time
       |   72| *
       |   73| * @abstract
       |   74| * Create dispatch_time_t relative to the default clock or modify an existing
       |   75| * dispatch_time_t.
       |   76| *
       |   77| * @discussion
       |   78| * On Mac OS X the default clock is based on mach_absolute_time().
       |   79| *
       |   80| * @param when
       |   81| * An optional dispatch_time_t to add nanoseconds to. If zero is passed, then
       |   82| * dispatch_time() will use the result of mach_absolute_time().
       |   83| *
       |   84| * @param delta
       |   85| * Nanoseconds to add.
       |   86| *
       |   87| * @result
       |   88| * A new dispatch_time_t.
       |   89| */
       |   90|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |   91|DISPATCH_EXPORT DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |   92|dispatch_time_t
       |   93|dispatch_time(dispatch_time_t when, int64_t delta);
       |   94|
       |   95|/*!
       |   96| * @function dispatch_walltime
       |   97| *
       |   98| * @abstract
       |   99| * Create a dispatch_time_t using the wall clock.
       |  100| *
       |  101| * @discussion
       |  102| * On Mac OS X the wall clock is based on gettimeofday(3).
       |  103| *
       |  104| * @param when
       |  105| * A struct timespect to add time to. If NULL is passed, then
       |  106| * dispatch_walltime() will use the result of gettimeofday(3).
       |  107| *
       |  108| * @param delta
       |  109| * Nanoseconds to add.
       |  110| *
       |  111| * @result
       |  112| * A new dispatch_time_t.
       |  113| */
       |  114|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |  115|DISPATCH_EXPORT DISPATCH_WARN_RESULT DISPATCH_NOTHROW
       |  116|dispatch_time_t
       |  117|dispatch_walltime(const struct timespec *when, int64_t delta);
       |  118|
       |  119|__END_DECLS
       |  120|
       |  121|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/objc/NSObjCRuntime.h:
       |    1|/*	NSObjCRuntime.h
       |    2|	Copyright (c) 1994-2012, Apple Inc. All rights reserved.
       |    3|*/
       |    4|
       |    5|#ifndef _OBJC_NSOBJCRUNTIME_H_
       |    6|#define _OBJC_NSOBJCRUNTIME_H_
       |    7|
       |    8|#include <TargetConditionals.h>
       |    9|#include <objc/objc.h>
       |   10|
       |   11|#if __LP64__ || (TARGET_OS_EMBEDDED && !TARGET_OS_IPHONE) || TARGET_OS_WIN32 || NS_BUILD_32_LIKE_64
       |   12|typedef long NSInteger;
       |   13|typedef unsigned long NSUInteger;
       |   14|#else
       |   15|typedef int NSInteger;
       |   16|typedef unsigned int NSUInteger;
       |   17|#endif
       |   18|
      0|   19|#define NSIntegerMax    LONG_MAX
       |   20|#define NSIntegerMin    LONG_MIN
       |   21|#define NSUIntegerMax   ULONG_MAX
       |   22|
       |   23|#define NSINTEGER_DEFINED 1
       |   24|
       |   25|#ifndef NS_DESIGNATED_INITIALIZER
       |   26|#if __has_attribute(objc_designated_initializer)
       |   27|#define NS_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
       |   28|#else
       |   29|#define NS_DESIGNATED_INITIALIZER
       |   30|#endif
       |   31|#endif
       |   32|
       |   33|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/objc/objc.h:
       |    1|/*
       |    2| * Copyright (c) 1999-2007 Apple Inc.  All Rights Reserved.
       |    3| * 
       |    4| * @APPLE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. Please obtain a copy of the License at
       |   10| * http://www.opensource.apple.com/apsl/ and read it before using this
       |   11| * file.
       |   12| * 
       |   13| * The Original Code and all software distributed under the License are
       |   14| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   15| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   16| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   18| * Please see the License for the specific language governing rights and
       |   19| * limitations under the License.
       |   20| * 
       |   21| * @APPLE_LICENSE_HEADER_END@
       |   22| */
       |   23|/*
       |   24| *	objc.h
       |   25| *	Copyright 1988-1996, NeXT Software, Inc.
       |   26| */
       |   27|
       |   28|#ifndef _OBJC_OBJC_H_
  ------------------
  | -[testUITests setUp]:
  |      1|   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
  |      1|   18| * Please see the License for the specific language governing rights and
  |      1|   19| * limitations under the License.
  |      1|   20| * 
  |      1|   21| * @APPLE_LICENSE_HEADER_END@
  |      1|   22| */
  |      1|   23|/*
  |      1|   24| *	objc.h
  |      1|   25| *	Copyright 1988-1996, NeXT Software, Inc.
  |      1|   26| */
  |      1|   27|
  |      1|   28|#ifndef _OBJC_OBJC_H_
  ------------------
       |   29|#define _OBJC_OBJC_H_
       |   30|
       |   31|#include <sys/types.h>      // for __DARWIN_NULL
       |   32|#include <Availability.h>
       |   33|#include <objc/objc-api.h>
       |   34|#include <stdbool.h>
       |   35|
       |   36|#if !OBJC_TYPES_DEFINED
       |   37|/// An opaque type that represents an Objective-C class.
       |   38|typedef struct objc_class *Class;
       |   39|
       |   40|/// Represents an instance of a class.
       |   41|struct objc_object {
       |   42|    Class isa  OBJC_ISA_AVAILABILITY;
       |   43|};
       |   44|
       |   45|/// A pointer to an instance of a class.
       |   46|typedef struct objc_object *id;
       |   47|#endif
       |   48|
       |   49|/// An opaque type that represents a method selector.
       |   50|typedef struct objc_selector *SEL;
       |   51|
       |   52|/// A pointer to the function of a method implementation. 
       |   53|#if !OBJC_OLD_DISPATCH_PROTOTYPES
       |   54|typedef void (*IMP)(void /* id, SEL, ... */ ); 
       |   55|#else
       |   56|typedef id (*IMP)(id, SEL, ...); 
       |   57|#endif
       |   58|
       |   59|#define OBJC_BOOL_DEFINED
       |   60|
       |   61|/// Type to represent a boolean value.
  ------------------
  | AFErrorOrUnderlyingErrorHasCodeInDomain:
  |      0|   53|#if !OBJC_OLD_DISPATCH_PROTOTYPES
  |      0|   54|typedef void (*IMP)(void /* id, SEL, ... */ ); 
  |      0|   55|#else
  |      0|   56|typedef id (*IMP)(id, SEL, ...); 
  |      0|   57|#endif
  |      0|   58|
  |      0|   59|#define OBJC_BOOL_DEFINED
  |      0|   60|
  |      0|   61|/// Type to represent a boolean value.
  ------------------
       |   62|#if (TARGET_OS_IPHONE && __LP64__)  ||  TARGET_OS_WATCH
       |   63|#define OBJC_BOOL_IS_BOOL 1
       |   64|typedef bool BOOL;
       |   65|#else
       |   66|#define OBJC_BOOL_IS_CHAR 1
       |   67|typedef signed char BOOL; 
       |   68|// BOOL is explicitly signed so @encode(BOOL) == "c" rather than "C" 
       |   69|// even if -funsigned-char is used.
       |   70|#endif
       |   71|
  ------------------
  | AFNetworkReachabilityStatusForFlags:
  |      0|   50|typedef struct objc_selector *SEL;
  |      0|   51|
  |      0|   52|/// A pointer to the function of a method implementation. 
  |      0|   53|#if !OBJC_OLD_DISPATCH_PROTOTYPES
  |      0|   54|typedef void (*IMP)(void /* id, SEL, ... */ ); 
  |      0|   55|#else
  |      0|   56|typedef id (*IMP)(id, SEL, ...); 
  |      0|   57|#endif
  |      0|   58|
  |      0|   59|#define OBJC_BOOL_DEFINED
  |      0|   60|
  |      0|   61|/// Type to represent a boolean value.
  |      0|   62|#if (TARGET_OS_IPHONE && __LP64__)  ||  TARGET_OS_WATCH
  |      0|   63|#define OBJC_BOOL_IS_BOOL 1
  |      0|   64|typedef bool BOOL;
  |      0|   65|#else
  |      0|   66|#define OBJC_BOOL_IS_CHAR 1
  |      0|   67|typedef signed char BOOL; 
  |      0|   68|// BOOL is explicitly signed so @encode(BOOL) == "c" rather than "C" 
  |      0|   69|// even if -funsigned-char is used.
  |      0|   70|#endif
  |      0|   71|
  ------------------
       |   72|#if __has_feature(objc_bool)
      0|   73|#define YES __objc_yes
      4|   74|#define NO  __objc_no
       |   75|#else
       |   76|#define YES ((BOOL)1)
       |   77|#define NO  ((BOOL)0)
       |   78|#endif
       |   79|
       |   80|#ifndef Nil
       |   81|# if __has_feature(cxx_nullptr)
       |   82|#   define Nil nullptr
       |   83|# else
       |   84|#   define Nil __DARWIN_NULL
       |   85|# endif
       |   86|#endif
       |   87|
       |   88|#ifndef nil
       |   89|# if __has_feature(cxx_nullptr)
       |   90|#   define nil nullptr
       |   91|# else
       |   92|#   define nil __DARWIN_NULL
       |   93|# endif
       |   94|#endif
       |   95|
       |   96|#if ! (defined(__OBJC_GC__)  ||  __has_feature(objc_arc))
       |   97|#define __strong /* empty */
       |   98|#endif
  ------------------
  | -[AFNetworkActivityIndicatorManager setEnabled:]:
  |      0|   93|# endif
  |      0|   94|#endif
  |      0|   95|
  |      0|   96|#if ! (defined(__OBJC_GC__)  ||  __has_feature(objc_arc))
  |      0|   97|#define __strong /* empty */
  |      0|   98|#endif
  ------------------
       |   99|
       |  100|#if !__has_feature(objc_arc)
       |  101|#define __unsafe_unretained /* empty */
  ------------------
  | AFServerTrustIsValid:
  |      0|   92|#   define nil __DARWIN_NULL
  |      0|   93|# endif
  |      0|   94|#endif
  |      0|   95|
  |      0|   96|#if ! (defined(__OBJC_GC__)  ||  __has_feature(objc_arc))
  |      0|   97|#define __strong /* empty */
  |      0|   98|#endif
  |      0|   99|
  |      0|  100|#if !__has_feature(objc_arc)
  |      0|  101|#define __unsafe_unretained /* empty */
  ------------------
       |  102|#define __autoreleasing /* empty */
       |  103|#endif
       |  104|
       |  105|
       |  106|/** 
       |  107| * Returns the name of the method specified by a given selector.
       |  108| * 
       |  109| * @param sel A pointer of type \c SEL. Pass the selector whose name you wish to determine.
       |  110| * 
       |  111| * @return A C string indicating the name of the selector.
       |  112| */
       |  113|OBJC_EXPORT const char *sel_getName(SEL sel)
       |  114|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  115|
       |  116|/** 
       |  117| * Registers a method with the Objective-C runtime system, maps the method 
       |  118| * name to a selector, and returns the selector value.
       |  119| * 
       |  120| * @param str A pointer to a C string. Pass the name of the method you wish to register.
       |  121| * 
       |  122| * @return A pointer of type SEL specifying the selector for the named method.
       |  123| * 
       |  124| * @note You must register a method name with the Objective-C runtime system to obtain the
       |  125| *  method’s selector before you can add the method to a class definition. If the method name
       |  126| *  has already been registered, this function simply returns the selector.
       |  127| */
       |  128|OBJC_EXPORT SEL sel_registerName(const char *str)
       |  129|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  130|
  ------------------
  | +[AFImageDownloader defaultURLSessionConfiguration]:
  |      0|  116|/** 
  |      0|  117| * Registers a method with the Objective-C runtime system, maps the method 
  |      0|  118| * name to a selector, and returns the selector value.
  |      0|  119| * 
  |      0|  120| * @param str A pointer to a C string. Pass the name of the method you wish to register.
  |      0|  121| * 
  |      0|  122| * @return A pointer of type SEL specifying the selector for the named method.
  |      0|  123| * 
  |      0|  124| * @note You must register a method name with the Objective-C runtime system to obtain the
  |      0|  125| *  method’s selector before you can add the method to a class definition. If the method name
  |      0|  126| *  has already been registered, this function simply returns the selector.
  |      0|  127| */
  |      0|  128|OBJC_EXPORT SEL sel_registerName(const char *str)
  |      0|  129|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  130|
  ------------------
       |  131|/** 
       |  132| * Returns the class name of a given object.
       |  133| * 
       |  134| * @param obj An Objective-C object.
       |  135| * 
       |  136| * @return The name of the class of which \e obj is an instance.
       |  137| */
       |  138|OBJC_EXPORT const char *object_getClassName(id obj)
       |  139|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  140|
       |  141|/** 
       |  142| * Returns a pointer to any extra bytes allocated with an instance given object.
  ------------------
  | __51-[AFAutoPurgingImageCache addImage:withIdentifier:]_block_invoke105:
  |      0|  123| * 
  |      0|  124| * @note You must register a method name with the Objective-C runtime system to obtain the
  |      0|  125| *  method’s selector before you can add the method to a class definition. If the method name
  |      0|  126| *  has already been registered, this function simply returns the selector.
  |      0|  127| */
  |      0|  128|OBJC_EXPORT SEL sel_registerName(const char *str)
  |      0|  129|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  130|
  |      0|  131|/** 
  |      0|  132| * Returns the class name of a given object.
  |      0|  133| * 
  |      0|  134| * @param obj An Objective-C object.
  |      0|  135| * 
  |      0|  136| * @return The name of the class of which \e obj is an instance.
  |      0|  137| */
  |      0|  138|OBJC_EXPORT const char *object_getClassName(id obj)
  |      0|  139|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  140|
  |      0|  141|/** 
  |      0|  142| * Returns a pointer to any extra bytes allocated with an instance given object.
  ------------------
       |  143| * 
       |  144| * @param obj An Objective-C object.
       |  145| * 
       |  146| * @return A pointer to any extra bytes allocated with \e obj. If \e obj was
       |  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
       |  148| * 
       |  149| * @note This function returns a pointer to any extra bytes allocated with the instance
       |  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
       |  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
       |  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
       |  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
       |  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  ------------------
  | __53-[AFAutoPurgingImageCache removeImageWithIdentifier:]_block_invoke:
  |      0|  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  |      0|  148| * 
  |      0|  149| * @note This function returns a pointer to any extra bytes allocated with the instance
  |      0|  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  |      0|  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
  |      0|  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  |      0|  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  |      0|  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  ------------------
       |  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
       |  156| */
  ------------------
  | -[AFAutoPurgingImageCache removeImageWithIdentifier:]:
  |      0|  145| * 
  |      0|  146| * @return A pointer to any extra bytes allocated with \e obj. If \e obj was
  |      0|  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  |      0|  148| * 
  |      0|  149| * @note This function returns a pointer to any extra bytes allocated with the instance
  |      0|  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  |      0|  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
  |      0|  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  |      0|  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  |      0|  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  |      0|  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
  |      0|  156| */
  ------------------
       |  157|OBJC_EXPORT void *object_getIndexedIvars(id obj)
  ------------------
  | -[AFHTTPResponseSerializer validateResponse:data:error:]:
  |      0|  113|OBJC_EXPORT const char *sel_getName(SEL sel)
  |      0|  114|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  115|
  |      0|  116|/** 
  |      0|  117| * Registers a method with the Objective-C runtime system, maps the method 
  |      0|  118| * name to a selector, and returns the selector value.
  |      0|  119| * 
  |      0|  120| * @param str A pointer to a C string. Pass the name of the method you wish to register.
  |      0|  121| * 
  |      0|  122| * @return A pointer of type SEL specifying the selector for the named method.
  |      0|  123| * 
  |      0|  124| * @note You must register a method name with the Objective-C runtime system to obtain the
  |      0|  125| *  method’s selector before you can add the method to a class definition. If the method name
  |      0|  126| *  has already been registered, this function simply returns the selector.
  |      0|  127| */
  |      0|  128|OBJC_EXPORT SEL sel_registerName(const char *str)
  |      0|  129|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  130|
  |      0|  131|/** 
  |      0|  132| * Returns the class name of a given object.
  |      0|  133| * 
  |      0|  134| * @param obj An Objective-C object.
  |      0|  135| * 
  |      0|  136| * @return The name of the class of which \e obj is an instance.
  |      0|  137| */
  |      0|  138|OBJC_EXPORT const char *object_getClassName(id obj)
  |      0|  139|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  140|
  |      0|  141|/** 
  |      0|  142| * Returns a pointer to any extra bytes allocated with an instance given object.
  |      0|  143| * 
  |      0|  144| * @param obj An Objective-C object.
  |      0|  145| * 
  |      0|  146| * @return A pointer to any extra bytes allocated with \e obj. If \e obj was
  |      0|  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  |      0|  148| * 
  |      0|  149| * @note This function returns a pointer to any extra bytes allocated with the instance
  |      0|  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  |      0|  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
  |      0|  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  |      0|  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  |      0|  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  |      0|  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
  |      0|  156| */
  |      0|  157|OBJC_EXPORT void *object_getIndexedIvars(id obj)
  ------------------
       |  158|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  159|
       |  160|/** 
       |  161| * Identifies a selector as being valid or invalid.
       |  162| * 
       |  163| * @param sel The selector you want to identify.
       |  164| * 
  ------------------
  | AFQueryStringPairsFromKeyAndValue:
  |      0|  135| * 
  |      0|  136| * @return The name of the class of which \e obj is an instance.
  |      0|  137| */
  |      0|  138|OBJC_EXPORT const char *object_getClassName(id obj)
  |      0|  139|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  140|
  |      0|  141|/** 
  |      0|  142| * Returns a pointer to any extra bytes allocated with an instance given object.
  |      0|  143| * 
  |      0|  144| * @param obj An Objective-C object.
  |      0|  145| * 
  |      0|  146| * @return A pointer to any extra bytes allocated with \e obj. If \e obj was
  |      0|  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  |      0|  148| * 
  |      0|  149| * @note This function returns a pointer to any extra bytes allocated with the instance
  |      0|  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  |      0|  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
  |      0|  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  |      0|  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  |      0|  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  |      0|  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
  |      0|  156| */
  |      0|  157|OBJC_EXPORT void *object_getIndexedIvars(id obj)
  |      0|  158|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  159|
  |      0|  160|/** 
  |      0|  161| * Identifies a selector as being valid or invalid.
  |      0|  162| * 
  |      0|  163| * @param sel The selector you want to identify.
  |      0|  164| * 
  ------------------
       |  165| * @return YES if selector is valid and has a function implementation, NO otherwise. 
       |  166| * 
  ------------------
  | __42-[AFAutoPurgingImageCache removeAllImages]_block_invoke:
  |      0|  160|/** 
  |      0|  161| * Identifies a selector as being valid or invalid.
  |      0|  162| * 
  |      0|  163| * @param sel The selector you want to identify.
  |      0|  164| * 
  |      0|  165| * @return YES if selector is valid and has a function implementation, NO otherwise. 
  |      0|  166| * 
  ------------------
       |  167| * @warning On some platforms, an invalid reference (to invalid memory addresses) can cause
       |  168| *  a crash. 
  ------------------
  | -[AFAutoPurgingImageCache removeAllImages]:
  |      0|  158|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  159|
  |      0|  160|/** 
  |      0|  161| * Identifies a selector as being valid or invalid.
  |      0|  162| * 
  |      0|  163| * @param sel The selector you want to identify.
  |      0|  164| * 
  |      0|  165| * @return YES if selector is valid and has a function implementation, NO otherwise. 
  |      0|  166| * 
  |      0|  167| * @warning On some platforms, an invalid reference (to invalid memory addresses) can cause
  |      0|  168| *  a crash. 
  ------------------
       |  169| */
       |  170|OBJC_EXPORT BOOL sel_isMapped(SEL sel)
       |  171|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  172|
       |  173|/** 
       |  174| * Registers a method name with the Objective-C runtime system.
  ------------------
  | +[AFHTTPResponseSerializer supportsSecureCoding]:
  |      0|  172|
  |      0|  173|/** 
  |      0|  174| * Registers a method name with the Objective-C runtime system.
  ------------------
       |  175| * 
       |  176| * @param str A pointer to a C string. Pass the name of the method you wish to register.
       |  177| * 
       |  178| * @return A pointer of type SEL specifying the selector for the named method.
       |  179| * 
       |  180| * @note The implementation of this method is identical to the implementation of \c sel_registerName.
       |  181| * @note Prior to OS X version 10.0, this method tried to find the selector mapped to the given name
       |  182| *  and returned \c NULL if the selector was not found. This was changed for safety, because it was
       |  183| *  observed that many of the callers of this function did not check the return value for \c NULL.
       |  184| */
       |  185|OBJC_EXPORT SEL sel_getUid(const char *str)
       |  186|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  187|
       |  188|
       |  189|// Obsolete ARC conversions. Deprecation forthcoming.
       |  190|// Use CFBridgingRetain, CFBridgingRelease, and __bridge casts instead.
       |  191|
       |  192|typedef const void* objc_objectptr_t;
       |  193|
       |  194|#if __has_feature(objc_arc)
       |  195|#   define objc_retainedObject(o) ((__bridge_transfer id)(objc_objectptr_t)(o))
       |  196|#   define objc_unretainedObject(o) ((__bridge id)(objc_objectptr_t)(o))
       |  197|#   define objc_unretainedPointer(o) ((__bridge objc_objectptr_t)(id)(o))
       |  198|#else
       |  199|#   define objc_retainedObject(o) ((id)(objc_objectptr_t)(o))
       |  200|#   define objc_unretainedObject(o) ((id)(objc_objectptr_t)(o))
  ------------------
  | -[AFNetworkActivityIndicatorManager setCurrentState:]:
  |      0|  175| * 
  |      0|  176| * @param str A pointer to a C string. Pass the name of the method you wish to register.
  |      0|  177| * 
  |      0|  178| * @return A pointer of type SEL specifying the selector for the named method.
  |      0|  179| * 
  |      0|  180| * @note The implementation of this method is identical to the implementation of \c sel_registerName.
  |      0|  181| * @note Prior to OS X version 10.0, this method tried to find the selector mapped to the given name
  |      0|  182| *  and returned \c NULL if the selector was not found. This was changed for safety, because it was
  |      0|  183| *  observed that many of the callers of this function did not check the return value for \c NULL.
  |      0|  184| */
  |      0|  185|OBJC_EXPORT SEL sel_getUid(const char *str)
  |      0|  186|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  187|
  |      0|  188|
  |      0|  189|// Obsolete ARC conversions. Deprecation forthcoming.
  |      0|  190|// Use CFBridgingRetain, CFBridgingRelease, and __bridge casts instead.
  |      0|  191|
  |      0|  192|typedef const void* objc_objectptr_t;
  |      0|  193|
  |      0|  194|#if __has_feature(objc_arc)
  |      0|  195|#   define objc_retainedObject(o) ((__bridge_transfer id)(objc_objectptr_t)(o))
  |      0|  196|#   define objc_unretainedObject(o) ((__bridge id)(objc_objectptr_t)(o))
  |      0|  197|#   define objc_unretainedPointer(o) ((__bridge objc_objectptr_t)(id)(o))
  |      0|  198|#else
  |      0|  199|#   define objc_retainedObject(o) ((id)(objc_objectptr_t)(o))
  |      0|  200|#   define objc_unretainedObject(o) ((id)(objc_objectptr_t)(o))
  ------------------
       |  201|#   define objc_unretainedPointer(o) ((objc_objectptr_t)(id)(o))
       |  202|#endif
       |  203|
       |  204|
       |  205|#if !__OBJC2__
       |  206|
       |  207|// The following declarations are provided here for source compatibility.
       |  208|
       |  209|#if defined(__LP64__)
       |  210|    typedef long arith_t;
  ------------------
  | -[AFSecurityPolicy init]:
  |      0|  201|#   define objc_unretainedPointer(o) ((objc_objectptr_t)(id)(o))
  |      0|  202|#endif
  |      0|  203|
  |      0|  204|
  |      0|  205|#if !__OBJC2__
  |      0|  206|
  |      0|  207|// The following declarations are provided here for source compatibility.
  |      0|  208|
  |      0|  209|#if defined(__LP64__)
  |      0|  210|    typedef long arith_t;
  ------------------
       |  211|    typedef unsigned long uarith_t;
       |  212|#   define ARITH_SHIFT 32
       |  213|#else
  ------------------
  | -[AFURLSessionManagerTaskDelegate setupProgressForTask:]:
  |      0|  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  |      0|  148| * 
  |      0|  149| * @note This function returns a pointer to any extra bytes allocated with the instance
  |      0|  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  |      0|  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
  |      0|  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  |      0|  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  |      0|  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  |      0|  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
  |      0|  156| */
  |      0|  157|OBJC_EXPORT void *object_getIndexedIvars(id obj)
  |      0|  158|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  159|
  |      0|  160|/** 
  |      0|  161| * Identifies a selector as being valid or invalid.
  |      0|  162| * 
  |      0|  163| * @param sel The selector you want to identify.
  |      0|  164| * 
  |      0|  165| * @return YES if selector is valid and has a function implementation, NO otherwise. 
  |      0|  166| * 
  |      0|  167| * @warning On some platforms, an invalid reference (to invalid memory addresses) can cause
  |      0|  168| *  a crash. 
  |      0|  169| */
  |      0|  170|OBJC_EXPORT BOOL sel_isMapped(SEL sel)
  |      0|  171|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  172|
  |      0|  173|/** 
  |      0|  174| * Registers a method name with the Objective-C runtime system.
  |      0|  175| * 
  |      0|  176| * @param str A pointer to a C string. Pass the name of the method you wish to register.
  |      0|  177| * 
  |      0|  178| * @return A pointer of type SEL specifying the selector for the named method.
  |      0|  179| * 
  |      0|  180| * @note The implementation of this method is identical to the implementation of \c sel_registerName.
  |      0|  181| * @note Prior to OS X version 10.0, this method tried to find the selector mapped to the given name
  |      0|  182| *  and returned \c NULL if the selector was not found. This was changed for safety, because it was
  |      0|  183| *  observed that many of the callers of this function did not check the return value for \c NULL.
  |      0|  184| */
  |      0|  185|OBJC_EXPORT SEL sel_getUid(const char *str)
  |      0|  186|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  187|
  |      0|  188|
  |      0|  189|// Obsolete ARC conversions. Deprecation forthcoming.
  |      0|  190|// Use CFBridgingRetain, CFBridgingRelease, and __bridge casts instead.
  |      0|  191|
  |      0|  192|typedef const void* objc_objectptr_t;
  |      0|  193|
  |      0|  194|#if __has_feature(objc_arc)
  |      0|  195|#   define objc_retainedObject(o) ((__bridge_transfer id)(objc_objectptr_t)(o))
  |      0|  196|#   define objc_unretainedObject(o) ((__bridge id)(objc_objectptr_t)(o))
  |      0|  197|#   define objc_unretainedPointer(o) ((__bridge objc_objectptr_t)(id)(o))
  |      0|  198|#else
  |      0|  199|#   define objc_retainedObject(o) ((id)(objc_objectptr_t)(o))
  |      0|  200|#   define objc_unretainedObject(o) ((id)(objc_objectptr_t)(o))
  |      0|  201|#   define objc_unretainedPointer(o) ((objc_objectptr_t)(id)(o))
  |      0|  202|#endif
  |      0|  203|
  |      0|  204|
  |      0|  205|#if !__OBJC2__
  |      0|  206|
  |      0|  207|// The following declarations are provided here for source compatibility.
  |      0|  208|
  |      0|  209|#if defined(__LP64__)
  |      0|  210|    typedef long arith_t;
  |      0|  211|    typedef unsigned long uarith_t;
  |      0|  212|#   define ARITH_SHIFT 32
  |      0|  213|#else
  ------------------
       |  214|    typedef int arith_t;
       |  215|    typedef unsigned uarith_t;
       |  216|#   define ARITH_SHIFT 16
       |  217|#endif
       |  218|
       |  219|typedef char *STR;
       |  220|
       |  221|#define ISSELECTOR(sel) sel_isMapped(sel)
       |  222|#define SELNAME(sel)	sel_getName(sel)
       |  223|#define SELUID(str)	sel_getUid(str)
       |  224|#define NAMEOF(obj)     object_getClassName(obj)
       |  225|#define IV(obj)         object_getIndexedIvars(obj)
       |  226|
       |  227|#endif
       |  228|
       |  229|#endif  /* _OBJC_OBJC_H_ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/stdint.h:
       |    1|/*
       |    2| * Copyright (c) 2000-2010 Apple Inc.
       |    3| * All rights reserved.
       |    4| */
       |    5|
       |    6|#ifndef _STDINT_H_
       |    7|#define _STDINT_H_
       |    8|
       |    9|#if __LP64__
       |   10|#define __WORDSIZE 64
       |   11|#else
       |   12|#define __WORDSIZE 32
       |   13|#endif
       |   14|
       |   15|/* from ISO/IEC 988:1999 spec */
       |   16|
       |   17|/* 7.18.1.1 Exact-width integer types */
       |   18|#include <sys/_types/_int8_t.h>
       |   19|#include <sys/_types/_int16_t.h>
       |   20|#include <sys/_types/_int32_t.h>
       |   21|#include <sys/_types/_int64_t.h>
       |   22|
       |   23|#include <_types/_uint8_t.h>
       |   24|#include <_types/_uint16_t.h>
       |   25|#include <_types/_uint32_t.h>
       |   26|#include <_types/_uint64_t.h>
       |   27|
       |   28|/* 7.18.1.2 Minimum-width integer types */
       |   29|typedef int8_t           int_least8_t;
       |   30|typedef int16_t         int_least16_t;
       |   31|typedef int32_t         int_least32_t;
       |   32|typedef int64_t         int_least64_t;
       |   33|typedef uint8_t         uint_least8_t;
       |   34|typedef uint16_t       uint_least16_t;
       |   35|typedef uint32_t       uint_least32_t;
       |   36|typedef uint64_t       uint_least64_t;
       |   37|
       |   38|
       |   39|/* 7.18.1.3 Fastest-width integer types */
       |   40|typedef int8_t            int_fast8_t;
       |   41|typedef int16_t          int_fast16_t;
       |   42|typedef int32_t          int_fast32_t;
       |   43|typedef int64_t          int_fast64_t;
       |   44|typedef uint8_t          uint_fast8_t;
       |   45|typedef uint16_t        uint_fast16_t;
       |   46|typedef uint32_t        uint_fast32_t;
       |   47|typedef uint64_t        uint_fast64_t;
       |   48|
       |   49|
       |   50|/* 7.18.1.4 Integer types capable of holding object pointers */
       |   51|
       |   52|#include <sys/_types.h>
       |   53|#include <sys/_types/_intptr_t.h>
       |   54|#include <sys/_types/_uintptr_t.h>
       |   55|
       |   56|
       |   57|/* 7.18.1.5 Greatest-width integer types */
       |   58|#include <_types/_intmax_t.h>
       |   59|#include <_types/_uintmax_t.h>
       |   60|
       |   61|/* 7.18.2 Limits of specified-width integer types:
       |   62| *   These #defines specify the minimum and maximum limits
       |   63| *   of each of the types declared above.
       |   64| */
       |   65|
       |   66|
       |   67|/* 7.18.2.1 Limits of exact-width integer types */
       |   68|#define INT8_MAX         127
       |   69|#define INT16_MAX        32767
       |   70|#define INT32_MAX        2147483647
       |   71|#define INT64_MAX        9223372036854775807LL
       |   72|
       |   73|#define INT8_MIN          -128
      0|   74|#define INT16_MIN         -32768
       |   75|   /*
       |   76|      Note:  the literal "most negative int" cannot be written in C --
       |   77|      the rules in the standard (section 6.4.4.1 in C99) will give it
       |   78|      an unsigned type, so INT32_MIN (and the most negative member of
       |   79|      any larger signed type) must be written via a constant expression.
       |   80|   */
       |   81|#define INT32_MIN        (-INT32_MAX-1)
       |   82|#define INT64_MIN        (-INT64_MAX-1)
       |   83|
       |   84|#define UINT8_MAX         255
       |   85|#define UINT16_MAX        65535
       |   86|#define UINT32_MAX        4294967295U
       |   87|#define UINT64_MAX        18446744073709551615ULL
       |   88|
       |   89|/* 7.18.2.2 Limits of minimum-width integer types */
       |   90|#define INT_LEAST8_MIN    INT8_MIN
       |   91|#define INT_LEAST16_MIN   INT16_MIN
       |   92|#define INT_LEAST32_MIN   INT32_MIN
       |   93|#define INT_LEAST64_MIN   INT64_MIN
       |   94|
       |   95|#define INT_LEAST8_MAX    INT8_MAX
       |   96|#define INT_LEAST16_MAX   INT16_MAX
       |   97|#define INT_LEAST32_MAX   INT32_MAX
       |   98|#define INT_LEAST64_MAX   INT64_MAX
       |   99|
       |  100|#define UINT_LEAST8_MAX   UINT8_MAX
       |  101|#define UINT_LEAST16_MAX  UINT16_MAX
       |  102|#define UINT_LEAST32_MAX  UINT32_MAX
       |  103|#define UINT_LEAST64_MAX  UINT64_MAX
       |  104|
       |  105|/* 7.18.2.3 Limits of fastest minimum-width integer types */
       |  106|#define INT_FAST8_MIN     INT8_MIN
       |  107|#define INT_FAST16_MIN    INT16_MIN
       |  108|#define INT_FAST32_MIN    INT32_MIN
       |  109|#define INT_FAST64_MIN    INT64_MIN
       |  110|
       |  111|#define INT_FAST8_MAX     INT8_MAX
       |  112|#define INT_FAST16_MAX    INT16_MAX
       |  113|#define INT_FAST32_MAX    INT32_MAX
       |  114|#define INT_FAST64_MAX    INT64_MAX
       |  115|
       |  116|#define UINT_FAST8_MAX    UINT8_MAX
       |  117|#define UINT_FAST16_MAX   UINT16_MAX
       |  118|#define UINT_FAST32_MAX   UINT32_MAX
       |  119|#define UINT_FAST64_MAX   UINT64_MAX
       |  120|
       |  121|/* 7.18.2.4 Limits of integer types capable of holding object pointers */
       |  122|
       |  123|#if __WORDSIZE == 64
       |  124|#define INTPTR_MIN	  INT64_MIN
       |  125|#define INTPTR_MAX	  INT64_MAX
       |  126|#else
       |  127|#define INTPTR_MIN        INT32_MIN
       |  128|#define INTPTR_MAX        INT32_MAX
       |  129|#endif
       |  130|
       |  131|#if __WORDSIZE == 64
       |  132|#define UINTPTR_MAX	  UINT64_MAX
       |  133|#else
       |  134|#define UINTPTR_MAX       UINT32_MAX
       |  135|#endif
       |  136|
       |  137|/* 7.18.2.5 Limits of greatest-width integer types */
       |  138|#define INTMAX_MIN        INT64_MIN
       |  139|#define INTMAX_MAX        INT64_MAX
       |  140|
       |  141|#define UINTMAX_MAX       UINT64_MAX
       |  142|
       |  143|/* 7.18.3 "Other" */
       |  144|#if __WORDSIZE == 64
       |  145|#define PTRDIFF_MIN	  INT64_MIN
       |  146|#define PTRDIFF_MAX	  INT64_MAX
       |  147|#else
       |  148|#define PTRDIFF_MIN       INT32_MIN
       |  149|#define PTRDIFF_MAX       INT32_MAX
       |  150|#endif
       |  151|
       |  152|#if __WORDSIZE == 64
       |  153|#define SIZE_MAX	  UINT64_MAX
       |  154|#else
       |  155|#define SIZE_MAX          UINT32_MAX
       |  156|#endif
       |  157|
       |  158|#if defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ >= 1
       |  159|#define RSIZE_MAX         (SIZE_MAX >> 1)
       |  160|#endif
       |  161|
       |  162|#ifndef WCHAR_MAX
       |  163|#  ifdef __WCHAR_MAX__
       |  164|#    define WCHAR_MAX     __WCHAR_MAX__
       |  165|#  else
       |  166|#    define WCHAR_MAX     0x7fffffff
       |  167|#  endif
       |  168|#endif
       |  169|
       |  170|/* WCHAR_MIN should be 0 if wchar_t is an unsigned type and
       |  171|   (-WCHAR_MAX-1) if wchar_t is a signed type.  Unfortunately,
       |  172|   it turns out that -fshort-wchar changes the signedness of
       |  173|   the type. */
       |  174|#ifndef WCHAR_MIN
       |  175|#  if WCHAR_MAX == 0xffff
       |  176|#    define WCHAR_MIN       0
       |  177|#  else
       |  178|#    define WCHAR_MIN       (-WCHAR_MAX-1)
       |  179|#  endif
       |  180|#endif
       |  181|
       |  182|#define WINT_MIN	  INT32_MIN
       |  183|#define WINT_MAX	  INT32_MAX
       |  184|
       |  185|#define SIG_ATOMIC_MIN	  INT32_MIN
       |  186|#define SIG_ATOMIC_MAX	  INT32_MAX
       |  187|
       |  188|/* 7.18.4 Macros for integer constants */
       |  189|#define INT8_C(v)    (v)
       |  190|#define INT16_C(v)   (v)
       |  191|#define INT32_C(v)   (v)
       |  192|#define INT64_C(v)   (v ## LL)
       |  193|
       |  194|#define UINT8_C(v)   (v ## U)
       |  195|#define UINT16_C(v)  (v ## U)
       |  196|#define UINT32_C(v)  (v ## U)
       |  197|#define UINT64_C(v)  (v ## ULL)
       |  198|
       |  199|#ifdef __LP64__
       |  200|#define INTMAX_C(v)  (v ## L)
       |  201|#define UINTMAX_C(v) (v ## UL)
       |  202|#else
       |  203|#define INTMAX_C(v)  (v ## LL)
       |  204|#define UINTMAX_C(v) (v ## ULL)
       |  205|#endif
       |  206|
       |  207|#endif /* _STDINT_H_ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/sys/_types.h:
       |    1|/*
       |    2| * Copyright (c) 2003-2007 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. The rights granted to you under the License
       |   10| * may not be used to create, or enable the creation or redistribution of,
       |   11| * unlawful or unlicensed copies of an Apple operating system, or to
       |   12| * circumvent, violate, or enable the circumvention or violation of, any
       |   13| * terms of an Apple operating system software license agreement.
       |   14| * 
       |   15| * Please obtain a copy of the License at
       |   16| * http://www.opensource.apple.com/apsl/ and read it before using this file.
       |   17| * 
       |   18| * The Original Code and all software distributed under the License are
       |   19| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   20| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   21| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   22| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   23| * Please see the License for the specific language governing rights and
       |   24| * limitations under the License.
       |   25| * 
       |   26| * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
       |   27| */
       |   28|
       |   29|#ifndef _SYS__TYPES_H_
       |   30|#define _SYS__TYPES_H_
       |   31|
       |   32|#include <sys/cdefs.h>
       |   33|#include <machine/_types.h>
       |   34|
       |   35|/*
       |   36| * Type definitions; takes common type definitions that must be used
       |   37| * in multiple header files due to [XSI], removes them from the system
       |   38| * space, and puts them in the implementation space.
       |   39| */
       |   40|
       |   41|#ifdef __cplusplus
       |   42|#ifdef __GNUG__
       |   43|#define __DARWIN_NULL __null
  ------------------
  | AFNetworkRequestFromNotification:
  |      0|   37| * in multiple header files due to [XSI], removes them from the system
  |      0|   38| * space, and puts them in the implementation space.
  |      0|   39| */
  |      0|   40|
  |      0|   41|#ifdef __cplusplus
  |      0|   42|#ifdef __GNUG__
  |      0|   43|#define __DARWIN_NULL __null
  ------------------
       |   44|#else /* ! __GNUG__ */
       |   45|#ifdef __LP64__
       |   46|#define __DARWIN_NULL (0L)
  ------------------
  | -[UIActivityIndicatorView(AFNetworking) af_notificationObserver]:
  |      0|   39| */
  |      0|   40|
  |      0|   41|#ifdef __cplusplus
  |      0|   42|#ifdef __GNUG__
  |      0|   43|#define __DARWIN_NULL __null
  |      0|   44|#else /* ! __GNUG__ */
  |      0|   45|#ifdef __LP64__
  |      0|   46|#define __DARWIN_NULL (0L)
  ------------------
       |   47|#else /* !__LP64__ */
  ------------------
  | -[UIRefreshControl(AFNetworking) af_notificationObserver]:
  |      0|   40|
  |      0|   41|#ifdef __cplusplus
  |      0|   42|#ifdef __GNUG__
  |      0|   43|#define __DARWIN_NULL __null
  |      0|   44|#else /* ! __GNUG__ */
  |      0|   45|#ifdef __LP64__
  |      0|   46|#define __DARWIN_NULL (0L)
  |      0|   47|#else /* !__LP64__ */
  ------------------
       |   48|#define __DARWIN_NULL 0
       |   49|#endif /* __LP64__ */
       |   50|#endif /* __GNUG__ */
       |   51|#else /* ! __cplusplus */
      3|   52|#define __DARWIN_NULL ((void *)0)
  ------------------
  | +[AFHTTPSessionManager manager]:
  |      0|   50|#endif /* __GNUG__ */
  |      0|   51|#else /* ! __cplusplus */
  |      0|   52|#define __DARWIN_NULL ((void *)0)
  ------------------
       |   53|#endif /* __cplusplus */
       |   54|
       |   55|typedef	__int64_t	__darwin_blkcnt_t;	/* total blocks */
       |   56|typedef	__int32_t	__darwin_blksize_t;	/* preferred block size */
  ------------------
  | -[AFHTTPSessionManager init]:
  |      0|   54|
  |      0|   55|typedef	__int64_t	__darwin_blkcnt_t;	/* total blocks */
  |      0|   56|typedef	__int32_t	__darwin_blksize_t;	/* preferred block size */
  ------------------
       |   57|typedef __int32_t	__darwin_dev_t;		/* dev_t */
       |   58|typedef unsigned int	__darwin_fsblkcnt_t;	/* Used by statvfs and fstatvfs */
       |   59|typedef unsigned int	__darwin_fsfilcnt_t;	/* Used by statvfs and fstatvfs */
       |   60|typedef __uint32_t	__darwin_gid_t;		/* [???] process and group IDs */
  ------------------
  | -[AFHTTPSessionManager initWithBaseURL:]:
  |      0|   58|typedef unsigned int	__darwin_fsblkcnt_t;	/* Used by statvfs and fstatvfs */
  |      0|   59|typedef unsigned int	__darwin_fsfilcnt_t;	/* Used by statvfs and fstatvfs */
  |      0|   60|typedef __uint32_t	__darwin_gid_t;		/* [???] process and group IDs */
  ------------------
       |   61|typedef __uint32_t	__darwin_id_t;		/* [XSI] pid_t, uid_t, or gid_t*/
       |   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
       |   63|#if __DARWIN_64_BIT_INO_T
       |   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  ------------------
  | -[AFHTTPSessionManager initWithSessionConfiguration:]:
  |      0|   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
  |      0|   63|#if __DARWIN_64_BIT_INO_T
  |      0|   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  ------------------
       |   65|#else /* !__DARWIN_64_BIT_INO_T */
  ------------------
  | -[UIWebView(AFNetworking) sessionManager]:
  |      0|   52|#define __DARWIN_NULL ((void *)0)
  |      0|   53|#endif /* __cplusplus */
  |      0|   54|
  |      0|   55|typedef	__int64_t	__darwin_blkcnt_t;	/* total blocks */
  |      0|   56|typedef	__int32_t	__darwin_blksize_t;	/* preferred block size */
  |      0|   57|typedef __int32_t	__darwin_dev_t;		/* dev_t */
  |      0|   58|typedef unsigned int	__darwin_fsblkcnt_t;	/* Used by statvfs and fstatvfs */
  |      0|   59|typedef unsigned int	__darwin_fsfilcnt_t;	/* Used by statvfs and fstatvfs */
  |      0|   60|typedef __uint32_t	__darwin_gid_t;		/* [???] process and group IDs */
  |      0|   61|typedef __uint32_t	__darwin_id_t;		/* [XSI] pid_t, uid_t, or gid_t*/
  |      0|   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
  |      0|   63|#if __DARWIN_64_BIT_INO_T
  |      0|   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  |      0|   65|#else /* !__DARWIN_64_BIT_INO_T */
  ------------------
       |   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
  ------------------
  | -[UIImageView(AFNetworking) setImageWithURL:]:
  |      0|   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  |      0|   65|#else /* !__DARWIN_64_BIT_INO_T */
  |      0|   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
  ------------------
       |   67|#endif /* __DARWIN_64_BIT_INO_T */
       |   68|typedef __darwin_natural_t __darwin_mach_port_name_t; /* Used by mach */
       |   69|typedef __darwin_mach_port_name_t __darwin_mach_port_t; /* Used by mach */
  ------------------
  | +[AFNetworkActivityIndicatorManager sharedManager]:
  |      0|   61|typedef __uint32_t	__darwin_id_t;		/* [XSI] pid_t, uid_t, or gid_t*/
  |      0|   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
  |      0|   63|#if __DARWIN_64_BIT_INO_T
  |      0|   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  |      0|   65|#else /* !__DARWIN_64_BIT_INO_T */
  |      0|   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
  |      0|   67|#endif /* __DARWIN_64_BIT_INO_T */
  |      0|   68|typedef __darwin_natural_t __darwin_mach_port_name_t; /* Used by mach */
  |      0|   69|typedef __darwin_mach_port_name_t __darwin_mach_port_t; /* Used by mach */
  ------------------
       |   70|typedef __uint16_t	__darwin_mode_t;	/* [???] Some file attributes */
       |   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
       |   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
       |   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
       |   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
       |   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  ------------------
  | -[UIImageView(AFNetworking) setImageWithURL:placeholderImage:]:
  |      0|   70|typedef __uint16_t	__darwin_mode_t;	/* [???] Some file attributes */
  |      0|   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
  |      0|   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
  |      0|   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
  |      0|   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
  |      0|   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  ------------------
       |   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
       |   77|typedef	unsigned char	__darwin_uuid_t[16];
       |   78|typedef	char	__darwin_uuid_string_t[37];
       |   79|
       |   80|#include <sys/_pthread/_pthread_types.h>
       |   81|
       |   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
  ------------------
  | -[UIWebView(AFNetworking) responseSerializer]:
  |      0|   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
  |      0|   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
  |      0|   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
  |      0|   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
  |      0|   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  |      0|   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
  |      0|   77|typedef	unsigned char	__darwin_uuid_t[16];
  |      0|   78|typedef	char	__darwin_uuid_string_t[37];
  |      0|   79|
  |      0|   80|#include <sys/_pthread/_pthread_types.h>
  |      0|   81|
  |      0|   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
  ------------------
       |   83|#define __offsetof(type, field) __builtin_offsetof(type, field)
       |   84|#else /* !(gcc >= 3.5) */
  ------------------
  | -[AFNetworkActivityIndicatorManager init]:
  |      0|   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
  |      0|   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
  |      0|   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
  |      0|   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
  |      0|   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  |      0|   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
  |      0|   77|typedef	unsigned char	__darwin_uuid_t[16];
  |      0|   78|typedef	char	__darwin_uuid_string_t[37];
  |      0|   79|
  |      0|   80|#include <sys/_pthread/_pthread_types.h>
  |      0|   81|
  |      0|   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
  |      0|   83|#define __offsetof(type, field) __builtin_offsetof(type, field)
  |      0|   84|#else /* !(gcc >= 3.5) */
  ------------------
       |   85|#define __offsetof(type, field) ((size_t)(&((type *)0)->field))
  ------------------
  | -[AFHTTPSessionManager initWithBaseURL:sessionConfiguration:]:
  |      0|   68|typedef __darwin_natural_t __darwin_mach_port_name_t; /* Used by mach */
  |      0|   69|typedef __darwin_mach_port_name_t __darwin_mach_port_t; /* Used by mach */
  |      0|   70|typedef __uint16_t	__darwin_mode_t;	/* [???] Some file attributes */
  |      0|   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
  |      0|   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
  |      0|   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
  |      0|   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
  |      0|   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  |      0|   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
  |      0|   77|typedef	unsigned char	__darwin_uuid_t[16];
  |      0|   78|typedef	char	__darwin_uuid_string_t[37];
  |      0|   79|
  |      0|   80|#include <sys/_pthread/_pthread_types.h>
  |      0|   81|
  |      0|   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
  |      0|   83|#define __offsetof(type, field) __builtin_offsetof(type, field)
  |      0|   84|#else /* !(gcc >= 3.5) */
  |      0|   85|#define __offsetof(type, field) ((size_t)(&((type *)0)->field))
  ------------------
       |   86|#endif /* (gcc >= 3.5) */
       |   87|
       |   88|
  ------------------
  | -[AFRefreshControlNotificationObserver setRefreshingWithStateOfTask:]:
  |      0|   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
  |      0|   67|#endif /* __DARWIN_64_BIT_INO_T */
  |      0|   68|typedef __darwin_natural_t __darwin_mach_port_name_t; /* Used by mach */
  |      0|   69|typedef __darwin_mach_port_name_t __darwin_mach_port_t; /* Used by mach */
  |      0|   70|typedef __uint16_t	__darwin_mode_t;	/* [???] Some file attributes */
  |      0|   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
  |      0|   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
  |      0|   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
  |      0|   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
  |      0|   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
  |      0|   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
  |      0|   77|typedef	unsigned char	__darwin_uuid_t[16];
  |      0|   78|typedef	char	__darwin_uuid_string_t[37];
  |      0|   79|
  |      0|   80|#include <sys/_pthread/_pthread_types.h>
  |      0|   81|
  |      0|   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
  |      0|   83|#define __offsetof(type, field) __builtin_offsetof(type, field)
  |      0|   84|#else /* !(gcc >= 3.5) */
  |      0|   85|#define __offsetof(type, field) ((size_t)(&((type *)0)->field))
  |      0|   86|#endif /* (gcc >= 3.5) */
  |      0|   87|
  |      0|   88|
  ------------------
       |   89|#endif	/* _SYS__TYPES_H_ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/sys/socket.h:
       |    1|/*
       |    2| * Copyright (c) 2000-2015 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. The rights granted to you under the License
       |   10| * may not be used to create, or enable the creation or redistribution of,
       |   11| * unlawful or unlicensed copies of an Apple operating system, or to
       |   12| * circumvent, violate, or enable the circumvention or violation of, any
       |   13| * terms of an Apple operating system software license agreement.
       |   14| * 
       |   15| * Please obtain a copy of the License at
       |   16| * http://www.opensource.apple.com/apsl/ and read it before using this file.
       |   17| * 
       |   18| * The Original Code and all software distributed under the License are
       |   19| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   20| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   21| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   22| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   23| * Please see the License for the specific language governing rights and
       |   24| * limitations under the License.
       |   25| * 
       |   26| * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
       |   27| */
       |   28|/* Copyright (c) 1998, 1999 Apple Computer, Inc. All Rights Reserved */
       |   29|/* Copyright (c) 1995 NeXT Computer, Inc. All Rights Reserved */
       |   30|/*
       |   31| * Copyright (c) 1982, 1985, 1986, 1988, 1993, 1994
       |   32| *	The Regents of the University of California.  All rights reserved.
       |   33| *
       |   34| * Redistribution and use in source and binary forms, with or without
       |   35| * modification, are permitted provided that the following conditions
       |   36| * are met:
       |   37| * 1. Redistributions of source code must retain the above copyright
       |   38| *    notice, this list of conditions and the following disclaimer.
       |   39| * 2. Redistributions in binary form must reproduce the above copyright
       |   40| *    notice, this list of conditions and the following disclaimer in the
       |   41| *    documentation and/or other materials provided with the distribution.
       |   42| * 3. All advertising materials mentioning features or use of this software
       |   43| *    must display the following acknowledgement:
       |   44| *	This product includes software developed by the University of
       |   45| *	California, Berkeley and its contributors.
       |   46| * 4. Neither the name of the University nor the names of its contributors
       |   47| *    may be used to endorse or promote products derived from this software
       |   48| *    without specific prior written permission.
       |   49| *
       |   50| * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
       |   51| * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       |   52| * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       |   53| * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
       |   54| * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
       |   55| * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
       |   56| * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       |   57| * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
       |   58| * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
       |   59| * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
       |   60| * SUCH DAMAGE.
       |   61| *
       |   62| *	@(#)socket.h	8.4 (Berkeley) 2/21/94
       |   63| * $FreeBSD: src/sys/sys/socket.h,v 1.39.2.7 2001/07/03 11:02:01 ume Exp $
       |   64| */
       |   65|/*
       |   66| * NOTICE: This file was modified by SPARTA, Inc. in 2005 to introduce
       |   67| * support for mandatory and extensible security protections.  This notice
       |   68| * is included in support of clause 2.2 (b) of the Apple Public License,
       |   69| * Version 2.0.
       |   70| */
       |   71|
       |   72|#ifndef _SYS_SOCKET_H_
       |   73|#define	_SYS_SOCKET_H_
       |   74|
       |   75|#include <sys/types.h>
       |   76|#include <sys/cdefs.h>
       |   77|#include <machine/_param.h>
       |   78|
       |   79|
       |   80|#include <Availability.h>
       |   81|
       |   82|/*
       |   83| * Definitions related to sockets: types, address families, options.
       |   84| */
       |   85|
       |   86|/*
       |   87| * Data types.
       |   88| */
       |   89|
       |   90|#include <sys/_types/_gid_t.h>
       |   91|#include <sys/_types/_off_t.h>
       |   92|#include <sys/_types/_pid_t.h>
       |   93|#include <sys/_types/_sa_family_t.h>
       |   94|#include <sys/_types/_socklen_t.h>
       |   95|
       |   96|/* XXX Not explicitly defined by POSIX, but function return types are */
       |   97|#include <sys/_types/_size_t.h>
       |   98| 
       |   99|/* XXX Not explicitly defined by POSIX, but function return types are */
       |  100|#include <sys/_types/_ssize_t.h>
       |  101|
       |  102|/*
       |  103| * [XSI] The iovec structure shall be defined as described in <sys/uio.h>.
       |  104| */
       |  105|#include <sys/_types/_iovec_t.h>
       |  106|
       |  107| 
       |  108|/*
       |  109| * Types
       |  110| */
       |  111|#define	SOCK_STREAM	1		/* stream socket */
       |  112|#define	SOCK_DGRAM	2		/* datagram socket */
       |  113|#define	SOCK_RAW	3		/* raw-protocol interface */
       |  114|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  115|#define	SOCK_RDM	4		/* reliably-delivered message */
       |  116|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  117|#define	SOCK_SEQPACKET	5		/* sequenced packet stream */
       |  118|
       |  119|/*
       |  120| * Option flags per-socket.
       |  121| */
       |  122|#define	SO_DEBUG	0x0001		/* turn on debugging info recording */
       |  123|#define	SO_ACCEPTCONN	0x0002		/* socket has had listen() */
       |  124|#define	SO_REUSEADDR	0x0004		/* allow local address reuse */
       |  125|#define	SO_KEEPALIVE	0x0008		/* keep connections alive */
       |  126|#define	SO_DONTROUTE	0x0010		/* just use interface addresses */
       |  127|#define	SO_BROADCAST	0x0020		/* permit sending of broadcast msgs */
       |  128|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  129|#define	SO_USELOOPBACK	0x0040		/* bypass hardware when possible */
       |  130|#define SO_LINGER	0x0080          /* linger on close if data present (in ticks) */
       |  131|#else
       |  132|#define SO_LINGER	0x1080          /* linger on close if data present (in seconds) */
       |  133|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  134|#define	SO_OOBINLINE	0x0100		/* leave received OOB data in line */
       |  135|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  136|#define	SO_REUSEPORT	0x0200		/* allow local address & port reuse */
       |  137|#define	SO_TIMESTAMP	0x0400		/* timestamp received dgram traffic */
       |  138|#define SO_TIMESTAMP_MONOTONIC	0x0800	/* Monotonically increasing timestamp on rcvd dgram */
       |  139|#ifndef __APPLE__
       |  140|#define	SO_ACCEPTFILTER	0x1000		/* there is an accept filter */
       |  141|#else
       |  142|#define SO_DONTTRUNC	0x2000		/* APPLE: Retain unread data */
       |  143|					/*  (ATOMIC proto) */
       |  144|#define SO_WANTMORE	0x4000		/* APPLE: Give hint when more data ready */
       |  145|#define SO_WANTOOBFLAG	0x8000		/* APPLE: Want OOB in MSG_FLAG on receive */
       |  146|
       |  147|
       |  148|#endif  /* (!__APPLE__) */
       |  149|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  150|
       |  151|/*
       |  152| * Additional options, not kept in so_options.
       |  153| */
       |  154|#define SO_SNDBUF	0x1001		/* send buffer size */
       |  155|#define SO_RCVBUF	0x1002		/* receive buffer size */
       |  156|#define SO_SNDLOWAT	0x1003		/* send low-water mark */
       |  157|#define SO_RCVLOWAT	0x1004		/* receive low-water mark */
       |  158|#define SO_SNDTIMEO	0x1005		/* send timeout */
       |  159|#define SO_RCVTIMEO	0x1006		/* receive timeout */
       |  160|#define	SO_ERROR	0x1007		/* get error status and clear */
       |  161|#define	SO_TYPE		0x1008		/* get socket type */
       |  162|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  163|/*efine	SO_PRIVSTATE	0x1009		   get/deny privileged state */
       |  164|#define SO_LABEL        0x1010          /* socket's MAC label */
       |  165|#define SO_PEERLABEL    0x1011          /* socket's peer MAC label */
       |  166|#ifdef __APPLE__
       |  167|#define SO_NREAD	0x1020		/* APPLE: get 1st-packet byte count */
       |  168|#define SO_NKE		0x1021		/* APPLE: Install socket-level NKE */
       |  169|#define SO_NOSIGPIPE	0x1022		/* APPLE: No SIGPIPE on EPIPE */
       |  170|#define SO_NOADDRERR	0x1023		/* APPLE: Returns EADDRNOTAVAIL when src is not available anymore */
       |  171|#define SO_NWRITE	0x1024		/* APPLE: Get number of bytes currently in send socket buffer */
       |  172|#define SO_REUSESHAREUID	0x1025		/* APPLE: Allow reuse of port/socket by different userids */
       |  173|#ifdef __APPLE_API_PRIVATE
       |  174|#define SO_NOTIFYCONFLICT	0x1026	/* APPLE: send notification if there is a bind on a port which is already in use */
       |  175|#define	SO_UPCALLCLOSEWAIT	0x1027	/* APPLE: block on close until an upcall returns */
       |  176|#endif
       |  177|#define SO_LINGER_SEC	0x1080          /* linger on close if data present (in seconds) */
       |  178|#define SO_RANDOMPORT   0x1082  /* APPLE: request local port randomization */
       |  179|#define SO_NP_EXTENSIONS	0x1083	/* To turn off some POSIX behavior */
       |  180|#endif
       |  181|
       |  182|#define SO_NUMRCVPKT		0x1112	/* number of datagrams in receive socket buffer */
       |  183|
       |  184|typedef __uint32_t sae_associd_t;
       |  185|#define	SAE_ASSOCID_ANY	0
       |  186|#define	SAE_ASSOCID_ALL	((sae_associd_t)(-1ULL))
       |  187|
       |  188|typedef __uint32_t sae_connid_t;
       |  189|#define	SAE_CONNID_ANY	0
       |  190|#define	SAE_CONNID_ALL	((sae_connid_t)(-1ULL))
       |  191|
       |  192|/* connectx() flag parameters */
       |  193|#define CONNECT_RESUME_ON_READ_WRITE	0x1 /* resume connect() on read/write */
       |  194|#define CONNECT_DATA_IDEMPOTENT		0x2 /* data is idempotent */
       |  195|
       |  196|/* sockaddr endpoints */
       |  197|typedef struct sa_endpoints {
       |  198|	unsigned int	sae_srcif;      /* optional source interface */
       |  199|	struct sockaddr	*sae_srcaddr;   /* optional source address */
       |  200|	socklen_t	sae_srcaddrlen; /* size of source address */
       |  201|	struct sockaddr	*sae_dstaddr;   /* destination address */
       |  202|	socklen_t	sae_dstaddrlen; /* size of destination address */
       |  203|} sa_endpoints_t;
       |  204|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  205|
       |  206|/*
       |  207| * Structure used for manipulating linger option.
       |  208| */
       |  209|struct	linger {
       |  210|	int	l_onoff;		/* option on/off */
       |  211|	int	l_linger;		/* linger time */
       |  212|};
       |  213|
       |  214|#ifndef __APPLE__
       |  215|struct	accept_filter_arg {
       |  216|	char	af_name[16];
       |  217|	char	af_arg[256-16];
       |  218|};
       |  219|#endif
       |  220|
       |  221|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  222|#ifdef __APPLE__
       |  223|
       |  224|/*
       |  225| * Structure to control non-portable Sockets extension to POSIX  
       |  226| */
       |  227|struct so_np_extensions {
       |  228|	u_int32_t	npx_flags;
       |  229|	u_int32_t	npx_mask;
       |  230|};
       |  231|
       |  232|#define SONPX_SETOPTSHUT	0x000000001     /* flag for allowing setsockopt after shutdown */
       |  233|
       |  234|
       |  235|
       |  236|#endif
       |  237|#endif
       |  238|
       |  239|/*
       |  240| * Level number for (get/set)sockopt() to apply to socket itself.
       |  241| */
       |  242|#define	SOL_SOCKET	0xffff		/* options for socket level */
       |  243|
       |  244|
       |  245|/*
       |  246| * Address families.
       |  247| */
       |  248|#define	AF_UNSPEC	0		/* unspecified */
       |  249|#define	AF_UNIX		1		/* local to host (pipes) */
       |  250|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  251|#define	AF_LOCAL	AF_UNIX		/* backward compatibility */
       |  252|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
      0|  253|#define	AF_INET		2		/* internetwork: UDP, TCP, etc. */
       |  254|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  255|#define	AF_IMPLINK	3		/* arpanet imp addresses */
       |  256|#define	AF_PUP		4		/* pup protocols: e.g. BSP */
       |  257|#define	AF_CHAOS	5		/* mit CHAOS protocols */
       |  258|#define	AF_NS		6		/* XEROX NS protocols */
       |  259|#define	AF_ISO		7		/* ISO protocols */
       |  260|#define	AF_OSI		AF_ISO
       |  261|#define	AF_ECMA		8		/* European computer manufacturers */
       |  262|#define	AF_DATAKIT	9		/* datakit protocols */
       |  263|#define	AF_CCITT	10		/* CCITT protocols, X.25 etc */
       |  264|#define	AF_SNA		11		/* IBM SNA */
       |  265|#define AF_DECnet	12		/* DECnet */
       |  266|#define AF_DLI		13		/* DEC Direct data link interface */
       |  267|#define AF_LAT		14		/* LAT */
       |  268|#define	AF_HYLINK	15		/* NSC Hyperchannel */
       |  269|#define	AF_APPLETALK	16		/* Apple Talk */
       |  270|#define	AF_ROUTE	17		/* Internal Routing Protocol */
       |  271|#define	AF_LINK		18		/* Link layer interface */
       |  272|#define	pseudo_AF_XTP	19		/* eXpress Transfer Protocol (no AF) */
       |  273|#define	AF_COIP		20		/* connection-oriented IP, aka ST II */
       |  274|#define	AF_CNT		21		/* Computer Network Technology */
       |  275|#define pseudo_AF_RTIP	22		/* Help Identify RTIP packets */
       |  276|#define	AF_IPX		23		/* Novell Internet Protocol */
       |  277|#define	AF_SIP		24		/* Simple Internet Protocol */
       |  278|#define pseudo_AF_PIP	25		/* Help Identify PIP packets */
       |  279|/*define pseudo_AF_BLUE	26	   Identify packets for Blue Box - Not used */
       |  280|#define AF_NDRV		27		/* Network Driver 'raw' access */
       |  281|#define	AF_ISDN		28		/* Integrated Services Digital Network*/
       |  282|#define	AF_E164		AF_ISDN		/* CCITT E.164 recommendation */
       |  283|#define	pseudo_AF_KEY	29		/* Internal key-management function */
       |  284|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  285|#define	AF_INET6	30		/* IPv6 */
       |  286|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  287|#define	AF_NATM		31		/* native ATM access */
       |  288|#define AF_SYSTEM	32		/* Kernel event messages */
       |  289|#define AF_NETBIOS	33		/* NetBIOS */
       |  290|#define AF_PPP		34		/* PPP communication protocol */
       |  291|#define pseudo_AF_HDRCMPLT 35		/* Used by BPF to not rewrite headers
       |  292|					 * in interface output routine */
       |  293|#define AF_RESERVED_36	36		/* Reserved for internal usage */
       |  294|#define AF_IEEE80211    37              /* IEEE 802.11 protocol */
       |  295|#define AF_UTUN		38
       |  296|#define	AF_MAX		40
       |  297|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  298|
       |  299|/*
       |  300| * [XSI] Structure used by kernel to store most addresses.
       |  301| */
       |  302|struct sockaddr {
       |  303|	__uint8_t	sa_len;		/* total length */
       |  304|	sa_family_t	sa_family;	/* [XSI] address family */
       |  305|	char		sa_data[14];	/* [XSI] addr value (actually larger) */
       |  306|};
       |  307|
       |  308|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  309|#define	SOCK_MAXADDRLEN	255		/* longest possible addresses */
       |  310|
       |  311|/*
       |  312| * Structure used by kernel to pass protocol
       |  313| * information in raw sockets.
       |  314| */
       |  315|struct sockproto {
       |  316|	__uint16_t	sp_family;		/* address family */
       |  317|	__uint16_t	sp_protocol;		/* protocol */
       |  318|};
       |  319|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE)*/
       |  320|
       |  321|/*
       |  322| * RFC 2553: protocol-independent placeholder for socket addresses
       |  323| */
       |  324|#define	_SS_MAXSIZE	128
       |  325|#define	_SS_ALIGNSIZE	(sizeof(__int64_t))
       |  326|#define	_SS_PAD1SIZE	\
       |  327|		(_SS_ALIGNSIZE - sizeof(__uint8_t) - sizeof(sa_family_t))
       |  328|#define	_SS_PAD2SIZE	\
       |  329|		(_SS_MAXSIZE - sizeof(__uint8_t) - sizeof(sa_family_t) - \
       |  330|				_SS_PAD1SIZE - _SS_ALIGNSIZE)
       |  331|
       |  332|/*
       |  333| * [XSI] sockaddr_storage
       |  334| */
       |  335|struct sockaddr_storage {
       |  336|	__uint8_t	ss_len;		/* address length */
       |  337|	sa_family_t	ss_family;	/* [XSI] address family */
       |  338|	char			__ss_pad1[_SS_PAD1SIZE];
       |  339|	__int64_t	__ss_align;	/* force structure storage alignment */
       |  340|	char			__ss_pad2[_SS_PAD2SIZE];
       |  341|};
       |  342|
       |  343|
       |  344|/*
       |  345| * Protocol families, same as address families for now.
       |  346| */
       |  347|#define	PF_UNSPEC	AF_UNSPEC
       |  348|#define	PF_LOCAL	AF_LOCAL
       |  349|#define	PF_UNIX		PF_LOCAL	/* backward compatibility */
       |  350|#define	PF_INET		AF_INET
       |  351|#define	PF_IMPLINK	AF_IMPLINK
       |  352|#define	PF_PUP		AF_PUP
       |  353|#define	PF_CHAOS	AF_CHAOS
       |  354|#define	PF_NS		AF_NS
       |  355|#define	PF_ISO		AF_ISO
       |  356|#define	PF_OSI		AF_ISO
       |  357|#define	PF_ECMA		AF_ECMA
       |  358|#define	PF_DATAKIT	AF_DATAKIT
       |  359|#define	PF_CCITT	AF_CCITT
       |  360|#define	PF_SNA		AF_SNA
       |  361|#define PF_DECnet	AF_DECnet
       |  362|#define PF_DLI		AF_DLI
       |  363|#define PF_LAT		AF_LAT
       |  364|#define	PF_HYLINK	AF_HYLINK
       |  365|#define	PF_APPLETALK	AF_APPLETALK
       |  366|#define	PF_ROUTE	AF_ROUTE
       |  367|#define	PF_LINK		AF_LINK
       |  368|#define	PF_XTP		pseudo_AF_XTP	/* really just proto family, no AF */
       |  369|#define	PF_COIP		AF_COIP
       |  370|#define	PF_CNT		AF_CNT
       |  371|#define	PF_SIP		AF_SIP
       |  372|#define	PF_IPX		AF_IPX		/* same format as AF_NS */
       |  373|#define PF_RTIP		pseudo_AF_RTIP	/* same format as AF_INET */
       |  374|#define PF_PIP		pseudo_AF_PIP
       |  375|#define PF_NDRV		AF_NDRV
       |  376|#define	PF_ISDN		AF_ISDN
       |  377|#define	PF_KEY		pseudo_AF_KEY
       |  378|#define	PF_INET6	AF_INET6
       |  379|#define	PF_NATM		AF_NATM
       |  380|#define PF_SYSTEM	AF_SYSTEM
       |  381|#define PF_NETBIOS	AF_NETBIOS
       |  382|#define PF_PPP		AF_PPP
       |  383|#define PF_RESERVED_36  AF_RESERVED_36
       |  384|#define PF_UTUN		AF_UTUN
       |  385|#define	PF_MAX		AF_MAX
       |  386|
       |  387|/*
       |  388| * These do not have socket-layer support:
       |  389| */
       |  390|#define	PF_VLAN		((uint32_t)0x766c616e)	/* 'vlan' */
       |  391|#define PF_BOND		((uint32_t)0x626f6e64)	/* 'bond' */
       |  392|
       |  393|/*
       |  394| * Definitions for network related sysctl, CTL_NET.
       |  395| *
       |  396| * Second level is protocol family.
       |  397| * Third level is protocol number.
       |  398| *
       |  399| * Further levels are defined by the individual families below.
       |  400| */
       |  401|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  402|#define NET_MAXID	AF_MAX
       |  403|#endif /* (_POSIX_C_SOURCE && !_DARWIN_C_SOURCE) */
       |  404|
       |  405|
       |  406|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  407|/*
       |  408| * PF_ROUTE - Routing table
       |  409| *
       |  410| * Three additional levels are defined:
       |  411| *	Fourth: address family, 0 is wildcard
       |  412| *	Fifth: type of info, defined below
       |  413| *	Sixth: flag(s) to mask with for NET_RT_FLAGS
       |  414| */
       |  415|#define NET_RT_DUMP		1	/* dump; may limit to a.f. */
       |  416|#define NET_RT_FLAGS		2	/* by flags, e.g. RESOLVING */
       |  417|#define NET_RT_IFLIST		3	/* survey interface list */
       |  418|#define NET_RT_STAT		4	/* routing statistics */
       |  419|#define NET_RT_TRASH		5	/* routes not in table but not freed */
       |  420|#define NET_RT_IFLIST2		6	/* interface list with addresses */
       |  421|#define NET_RT_DUMP2		7	/* dump; may limit to a.f. */
       |  422|#define	NET_RT_MAXID		10
       |  423|#endif /* (_POSIX_C_SOURCE && !_DARWIN_C_SOURCE) */
       |  424|
       |  425|
       |  426|/*
       |  427| * Maximum queue length specifiable by listen.
       |  428| */
       |  429|#define	SOMAXCONN	128
       |  430|
       |  431|/*
       |  432| * [XSI] Message header for recvmsg and sendmsg calls.
       |  433| * Used value-result for recvmsg, value only for sendmsg.
       |  434| */
       |  435|struct msghdr {
       |  436|	void		*msg_name;	/* [XSI] optional address */
       |  437|	socklen_t	msg_namelen;	/* [XSI] size of address */
       |  438|	struct		iovec *msg_iov;	/* [XSI] scatter/gather array */
       |  439|	int		msg_iovlen;	/* [XSI] # elements in msg_iov */
       |  440|	void		*msg_control;	/* [XSI] ancillary data, see below */
       |  441|	socklen_t	msg_controllen;	/* [XSI] ancillary data buffer len */
       |  442|	int		msg_flags;	/* [XSI] flags on received message */
       |  443|};
       |  444|
       |  445|
       |  446|
       |  447|#define	MSG_OOB		0x1		/* process out-of-band data */
       |  448|#define	MSG_PEEK	0x2		/* peek at incoming message */
       |  449|#define	MSG_DONTROUTE	0x4		/* send without using routing tables */
       |  450|#define	MSG_EOR		0x8		/* data completes record */
       |  451|#define	MSG_TRUNC	0x10		/* data discarded before delivery */
       |  452|#define	MSG_CTRUNC	0x20		/* control data lost before delivery */
       |  453|#define	MSG_WAITALL	0x40		/* wait for full request or error */
       |  454|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  455|#define	MSG_DONTWAIT	0x80		/* this message should be nonblocking */
       |  456|#define	MSG_EOF		0x100		/* data completes connection */
       |  457|#ifdef __APPLE__
       |  458|#ifdef __APPLE_API_OBSOLETE
       |  459|#define MSG_WAITSTREAM  0x200           /* wait up to full request.. may return partial */
       |  460|#endif
       |  461|#define MSG_FLUSH	0x400		/* Start of 'hold' seq; dump so_temp */
       |  462|#define MSG_HOLD	0x800		/* Hold frag in so_temp */
       |  463|#define MSG_SEND	0x1000		/* Send the packet in so_temp */
       |  464|#define MSG_HAVEMORE	0x2000		/* Data ready to be read */
       |  465|#define MSG_RCVMORE	0x4000		/* Data remains in current pkt */
       |  466|#endif
       |  467|#define MSG_NEEDSA	0x10000		/* Fail receive if socket address cannot be allocated */
       |  468|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  469|
       |  470|/*
       |  471| * Header for ancillary data objects in msg_control buffer.
       |  472| * Used for additional information with/about a datagram
       |  473| * not expressible by flags.  The format is a sequence
       |  474| * of message elements headed by cmsghdr structures.
       |  475| */
       |  476|struct cmsghdr {
       |  477|	socklen_t	cmsg_len;	/* [XSI] data byte count, including hdr */
       |  478|	int		cmsg_level;	/* [XSI] originating protocol */
       |  479|	int		cmsg_type;	/* [XSI] protocol-specific type */
       |  480|/* followed by	unsigned char  cmsg_data[]; */
       |  481|};
       |  482|
       |  483|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  484|#ifndef __APPLE__
       |  485|/*
       |  486| * While we may have more groups than this, the cmsgcred struct must
       |  487| * be able to fit in an mbuf, and NGROUPS_MAX is too large to allow
       |  488| * this.
       |  489|*/
       |  490|#define CMGROUP_MAX 16
       |  491|
       |  492|/*
       |  493| * Credentials structure, used to verify the identity of a peer
       |  494| * process that has sent us a message. This is allocated by the
       |  495| * peer process but filled in by the kernel. This prevents the
       |  496| * peer from lying about its identity. (Note that cmcred_groups[0]
       |  497| * is the effective GID.)
       |  498| */
       |  499|struct cmsgcred {
       |  500|	pid_t	cmcred_pid;		/* PID of sending process */
       |  501|	uid_t	cmcred_uid;		/* real UID of sending process */
       |  502|	uid_t	cmcred_euid;		/* effective UID of sending process */
       |  503|	gid_t	cmcred_gid;		/* real GID of sending process */
       |  504|	short	cmcred_ngroups;		/* number or groups */
       |  505|	gid_t	cmcred_groups[CMGROUP_MAX];	/* groups */
       |  506|};
       |  507|#endif
       |  508|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  509|
       |  510|/* given pointer to struct cmsghdr, return pointer to data */
       |  511|#define	CMSG_DATA(cmsg)		((unsigned char *)(cmsg) + \
       |  512|				 __DARWIN_ALIGN32(sizeof(struct cmsghdr)))
       |  513|
       |  514|/*
       |  515| * RFC 2292 requires to check msg_controllen, in case that the kernel returns
       |  516| * an empty list for some reasons.
       |  517| */
       |  518|#define CMSG_FIRSTHDR(mhdr) \
       |  519|        ((mhdr)->msg_controllen >= sizeof(struct cmsghdr) ? \
       |  520|         (struct cmsghdr *)(mhdr)->msg_control : \
       |  521|         (struct cmsghdr *)0L)
       |  522|
       |  523|
       |  524|/* 
       |  525| * Given pointer to struct cmsghdr, return pointer to next cmsghdr
       |  526| * RFC 2292 says that CMSG_NXTHDR(mhdr, NULL) is equivalent to CMSG_FIRSTHDR(mhdr)
       |  527| */
       |  528|#define	CMSG_NXTHDR(mhdr, cmsg)						\
       |  529|	((char *)(cmsg) == (char *)0L ? CMSG_FIRSTHDR(mhdr) :		\
       |  530|	 ((((unsigned char *)(cmsg) +					\
       |  531|	    __DARWIN_ALIGN32((__uint32_t)(cmsg)->cmsg_len) +		\
       |  532|	    __DARWIN_ALIGN32(sizeof(struct cmsghdr))) >			\
       |  533|	    ((unsigned char *)(mhdr)->msg_control +			\
       |  534|	     (mhdr)->msg_controllen)) ?					\
       |  535|	  (struct cmsghdr *)0L /* NULL */ :				\
       |  536|	  (struct cmsghdr *)(void *)((unsigned char *)(cmsg) +		\
       |  537|	 		    __DARWIN_ALIGN32((__uint32_t)(cmsg)->cmsg_len))))
       |  538|
       |  539|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  540|/* RFC 2292 additions */
       |  541|#define	CMSG_SPACE(l)		(__DARWIN_ALIGN32(sizeof(struct cmsghdr)) + __DARWIN_ALIGN32(l))
       |  542|#define	CMSG_LEN(l)		(__DARWIN_ALIGN32(sizeof(struct cmsghdr)) + (l))
       |  543|
       |  544|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  545|
       |  546|/* "Socket"-level control message types: */
       |  547|#define	SCM_RIGHTS			0x01	/* access rights (array of int) */
       |  548|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  549|#define	SCM_TIMESTAMP			0x02	/* timestamp (struct timeval) */
       |  550|#define	SCM_CREDS			0x03	/* process creds (struct cmsgcred) */
       |  551|#define	SCM_TIMESTAMP_MONOTONIC		0x04	/* timestamp (uint64_t) */ 
       |  552|
       |  553|
       |  554|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  555|
       |  556|/*
       |  557| * howto arguments for shutdown(2), specified by Posix.1g.
       |  558| */
       |  559|#define	SHUT_RD		0		/* shut down the reading side */
       |  560|#define	SHUT_WR		1		/* shut down the writing side */
       |  561|#define	SHUT_RDWR	2		/* shut down both sides */
       |  562|
       |  563|#if !defined(_POSIX_C_SOURCE)
       |  564|/*
       |  565| * sendfile(2) header/trailer struct
       |  566| */
       |  567|struct sf_hdtr {
       |  568|	struct iovec *headers;	/* pointer to an array of header struct iovec's */
       |  569|	int hdr_cnt;		/* number of header iovec's */
       |  570|	struct iovec *trailers;	/* pointer to an array of trailer struct iovec's */
       |  571|	int trl_cnt;		/* number of trailer iovec's */
       |  572|};
       |  573|
       |  574|
       |  575|#endif	/* !_POSIX_C_SOURCE */
       |  576|
       |  577|
       |  578|__BEGIN_DECLS
       |  579|
       |  580|int	accept(int, struct sockaddr * __restrict, socklen_t * __restrict)
       |  581|		__DARWIN_ALIAS_C(accept);
       |  582|int	bind(int, const struct sockaddr *, socklen_t) __DARWIN_ALIAS(bind);
       |  583|int	connect(int, const struct sockaddr *, socklen_t) __DARWIN_ALIAS_C( connect);
       |  584|int	getpeername(int, struct sockaddr * __restrict, socklen_t * __restrict)
       |  585|		__DARWIN_ALIAS(getpeername);
       |  586|int	getsockname(int, struct sockaddr * __restrict, socklen_t * __restrict)
       |  587|		__DARWIN_ALIAS(getsockname);
       |  588|int	getsockopt(int, int, int, void * __restrict, socklen_t * __restrict);
       |  589|int	listen(int, int) __DARWIN_ALIAS(listen);
       |  590|ssize_t	recv(int, void *, size_t, int) __DARWIN_ALIAS_C(recv);
       |  591|ssize_t	recvfrom(int, void *, size_t, int, struct sockaddr * __restrict,
       |  592|		socklen_t * __restrict) __DARWIN_ALIAS_C(recvfrom);
       |  593|ssize_t	recvmsg(int, struct msghdr *, int) __DARWIN_ALIAS_C(recvmsg);
       |  594|ssize_t	send(int, const void *, size_t, int) __DARWIN_ALIAS_C(send);
       |  595|ssize_t	sendmsg(int, const struct msghdr *, int) __DARWIN_ALIAS_C(sendmsg);
       |  596|ssize_t	sendto(int, const void *, size_t,
       |  597|		int, const struct sockaddr *, socklen_t) __DARWIN_ALIAS_C(sendto);
       |  598|int	setsockopt(int, int, int, const void *, socklen_t);
       |  599|int	shutdown(int, int);
       |  600|int	sockatmark(int) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_2_0);
       |  601|int	socket(int, int, int);
       |  602|int	socketpair(int, int, int, int *) __DARWIN_ALIAS(socketpair);
       |  603|
       |  604|#if !defined(_POSIX_C_SOURCE)
       |  605|int	sendfile(int, int, off_t, off_t *, struct sf_hdtr *, int);
       |  606|#endif	/* !_POSIX_C_SOURCE */
       |  607|
       |  608|#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
       |  609|void	pfctlinput(int, struct sockaddr *);
       |  610|int connectx(int , const sa_endpoints_t *, sae_associd_t, unsigned int,
       |  611|    const struct iovec *, unsigned int, size_t *, sae_connid_t *);
       |  612|int disconnectx(int , sae_associd_t, sae_connid_t);
       |  613|#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */
       |  614|__END_DECLS
       |  615|
       |  616|
       |  617|#endif /* !_SYS_SOCKET_H_ */

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.0.2/include/limits.h:
       |    1|/*===---- limits.h - Standard header for integer sizes --------------------===*\
       |    2| *
       |    3| * Copyright (c) 2009 Chris Lattner
       |    4| *
       |    5| * Permission is hereby granted, free of charge, to any person obtaining a copy
       |    6| * of this software and associated documentation files (the "Software"), to deal
       |    7| * in the Software without restriction, including without limitation the rights
       |    8| * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       |    9| * copies of the Software, and to permit persons to whom the Software is
       |   10| * furnished to do so, subject to the following conditions:
       |   11| *
       |   12| * The above copyright notice and this permission notice shall be included in
       |   13| * all copies or substantial portions of the Software.
       |   14| *
       |   15| * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       |   16| * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       |   18| * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       |   19| * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       |   20| * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
       |   21| * THE SOFTWARE.
       |   22| *
       |   23|\*===----------------------------------------------------------------------===*/
       |   24|
       |   25|#ifndef __CLANG_LIMITS_H
       |   26|#define __CLANG_LIMITS_H
       |   27|
       |   28|/* The system's limits.h may, in turn, try to #include_next GCC's limits.h.
       |   29|   Avert this #include_next madness. */
       |   30|#if defined __GNUC__ && !defined _GCC_LIMITS_H_
       |   31|#define _GCC_LIMITS_H_
       |   32|#endif
       |   33|
       |   34|/* System headers include a number of constants from POSIX in <limits.h>.
       |   35|   Include it if we're hosted. */
       |   36|#if __STDC_HOSTED__ && __has_include_next(<limits.h>)
       |   37|#include_next <limits.h>
       |   38|#endif
       |   39|
       |   40|/* Many system headers try to "help us out" by defining these.  No really, we
       |   41|   know how big each datatype is. */
       |   42|#undef  SCHAR_MIN
       |   43|#undef  SCHAR_MAX
       |   44|#undef  UCHAR_MAX
       |   45|#undef  SHRT_MIN
       |   46|#undef  SHRT_MAX
       |   47|#undef  USHRT_MAX
       |   48|#undef  INT_MIN
       |   49|#undef  INT_MAX
       |   50|#undef  UINT_MAX
       |   51|#undef  LONG_MIN
       |   52|#undef  LONG_MAX
       |   53|#undef  ULONG_MAX
       |   54|
       |   55|#undef  CHAR_BIT
       |   56|#undef  CHAR_MIN
       |   57|#undef  CHAR_MAX
       |   58|
       |   59|/* C90/99 5.2.4.2.1 */
       |   60|#define SCHAR_MAX __SCHAR_MAX__
       |   61|#define SHRT_MAX  __SHRT_MAX__
       |   62|#define INT_MAX   __INT_MAX__
      0|   63|#define LONG_MAX  __LONG_MAX__
       |   64|
       |   65|#define SCHAR_MIN (-__SCHAR_MAX__-1)
       |   66|#define SHRT_MIN  (-__SHRT_MAX__ -1)
       |   67|#define INT_MIN   (-__INT_MAX__  -1)
       |   68|#define LONG_MIN  (-__LONG_MAX__ -1L)
       |   69|
       |   70|#define UCHAR_MAX (__SCHAR_MAX__*2  +1)
       |   71|#define USHRT_MAX (__SHRT_MAX__ *2  +1)
       |   72|#define UINT_MAX  (__INT_MAX__  *2U +1U)
       |   73|#define ULONG_MAX (__LONG_MAX__ *2UL+1UL)
       |   74|
       |   75|#ifndef MB_LEN_MAX
       |   76|#define MB_LEN_MAX 1
       |   77|#endif
       |   78|
       |   79|#define CHAR_BIT  __CHAR_BIT__
       |   80|
       |   81|#ifdef __CHAR_UNSIGNED__  /* -funsigned-char */
       |   82|#define CHAR_MIN 0
       |   83|#define CHAR_MAX UCHAR_MAX
       |   84|#else
       |   85|#define CHAR_MIN SCHAR_MIN
       |   86|#define CHAR_MAX __SCHAR_MAX__
       |   87|#endif
       |   88|
       |   89|/* C99 5.2.4.2.1: Added long long.
       |   90|   C++11 18.3.3.2: same contents as the Standard C Library header <limits.h>.
       |   91| */
       |   92|#if __STDC_VERSION__ >= 199901L || __cplusplus >= 201103L
       |   93|
       |   94|#undef  LLONG_MIN
       |   95|#undef  LLONG_MAX
       |   96|#undef  ULLONG_MAX
       |   97|
       |   98|#define LLONG_MAX  __LONG_LONG_MAX__
       |   99|#define LLONG_MIN  (-__LONG_LONG_MAX__-1LL)
       |  100|#define ULLONG_MAX (__LONG_LONG_MAX__*2ULL+1ULL)
       |  101|#endif
       |  102|
       |  103|/* LONG_LONG_MIN/LONG_LONG_MAX/ULONG_LONG_MAX are a GNU extension.  It's too bad
       |  104|   that we don't have something like #pragma poison that could be used to
       |  105|   deprecate a macro - the code should just use LLONG_MAX and friends.
       |  106| */
       |  107|#if defined(__GNU_LIBRARY__) ? defined(__USE_GNU) : !defined(__STRICT_ANSI__)
       |  108|
       |  109|#undef   LONG_LONG_MIN
       |  110|#undef   LONG_LONG_MAX
       |  111|#undef   ULONG_LONG_MAX
       |  112|
       |  113|#define LONG_LONG_MAX  __LONG_LONG_MAX__
       |  114|#define LONG_LONG_MIN  (-__LONG_LONG_MAX__-1LL)
       |  115|#define ULONG_LONG_MAX (__LONG_LONG_MAX__*2ULL+1ULL)
       |  116|#endif
       |  117|
       |  118|#endif /* __CLANG_LIMITS_H */

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.0.2/include/stdbool.h:
       |    1|/*===---- stdbool.h - Standard header for booleans -------------------------===
       |    2| *
       |    3| * Copyright (c) 2008 Eli Friedman
       |    4| *
       |    5| * Permission is hereby granted, free of charge, to any person obtaining a copy
       |    6| * of this software and associated documentation files (the "Software"), to deal
       |    7| * in the Software without restriction, including without limitation the rights
       |    8| * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       |    9| * copies of the Software, and to permit persons to whom the Software is
       |   10| * furnished to do so, subject to the following conditions:
       |   11| *
       |   12| * The above copyright notice and this permission notice shall be included in
       |   13| * all copies or substantial portions of the Software.
       |   14| *
       |   15| * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       |   16| * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       |   18| * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       |   19| * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       |   20| * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
       |   21| * THE SOFTWARE.
       |   22| *
       |   23| *===-----------------------------------------------------------------------===
       |   24| */
       |   25|
       |   26|#ifndef __STDBOOL_H
       |   27|#define __STDBOOL_H
       |   28|
       |   29|/* Don't define bool, true, and false in C++, except as a GNU extension. */
       |   30|#ifndef __cplusplus
       |   31|#define bool _Bool
      0|   32|#define true 1
      0|   33|#define false 0
       |   34|#elif defined(__GNUC__) && !defined(__STRICT_ANSI__)
       |   35|/* Define _Bool, bool, false, true as a GNU extension. */
       |   36|#define _Bool bool
       |   37|#define bool  bool
       |   38|#define false false
       |   39|#define true  true
       |   40|#endif
       |   41|
       |   42|#define __bool_true_false_are_defined 1
       |   43|
       |   44|#endif /* __STDBOOL_H */

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.0.2/include/stddef.h:
       |    1|/*===---- stddef.h - Basic type definitions --------------------------------===
       |    2| *
       |    3| * Copyright (c) 2008 Eli Friedman
       |    4| *
       |    5| * Permission is hereby granted, free of charge, to any person obtaining a copy
       |    6| * of this software and associated documentation files (the "Software"), to deal
       |    7| * in the Software without restriction, including without limitation the rights
       |    8| * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       |    9| * copies of the Software, and to permit persons to whom the Software is
       |   10| * furnished to do so, subject to the following conditions:
       |   11| *
       |   12| * The above copyright notice and this permission notice shall be included in
       |   13| * all copies or substantial portions of the Software.
       |   14| *
       |   15| * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       |   16| * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       |   18| * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       |   19| * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       |   20| * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
       |   21| * THE SOFTWARE.
       |   22| *
       |   23| *===-----------------------------------------------------------------------===
       |   24| */
       |   25|
       |   26|#if !defined(__STDDEF_H) || defined(__need_ptrdiff_t) ||                       \
       |   27|    defined(__need_size_t) || defined(__need_wchar_t) ||                       \
       |   28|    defined(__need_NULL) || defined(__need_wint_t)
       |   29|
       |   30|#if !defined(__need_ptrdiff_t) && !defined(__need_size_t) &&                   \
       |   31|    !defined(__need_wchar_t) && !defined(__need_NULL) &&                       \
       |   32|    !defined(__need_wint_t)
       |   33|/* Always define miscellaneous pieces when modules are available. */
       |   34|#if !__has_feature(modules)
       |   35|#define __STDDEF_H
       |   36|#endif
  ------------------
  | __url_session_manager_creation_queue_block_invoke:
  |      0|   34|#if !__has_feature(modules)
  |      0|   35|#define __STDDEF_H
  |      0|   36|#endif
  ------------------
       |   37|#define __need_ptrdiff_t
       |   38|#define __need_size_t
       |   39|#define __need_wchar_t
       |   40|#define __need_NULL
       |   41|#define __need_STDDEF_H_misc
       |   42|/* __need_wint_t is intentionally not defined here. */
       |   43|#endif
       |   44|
       |   45|#if defined(__need_ptrdiff_t)
       |   46|#if !defined(_PTRDIFF_T) || __has_feature(modules)
       |   47|/* Always define ptrdiff_t when modules are available. */
       |   48|#if !__has_feature(modules)
       |   49|#define _PTRDIFF_T
       |   50|#endif
       |   51|typedef __PTRDIFF_TYPE__ ptrdiff_t;
       |   52|#endif
       |   53|#undef __need_ptrdiff_t
       |   54|#endif /* defined(__need_ptrdiff_t) */
       |   55|
       |   56|#if defined(__need_size_t)
       |   57|#if !defined(_SIZE_T) || __has_feature(modules)
       |   58|/* Always define size_t when modules are available. */
       |   59|#if !__has_feature(modules)
       |   60|#define _SIZE_T
       |   61|#endif
       |   62|typedef __SIZE_TYPE__ size_t;
       |   63|#endif
       |   64|#undef __need_size_t
       |   65|#endif /*defined(__need_size_t) */
       |   66|
       |   67|#if defined(__need_STDDEF_H_misc)
       |   68|/* ISO9899:2011 7.20 (C11 Annex K): Define rsize_t if __STDC_WANT_LIB_EXT1__ is
       |   69| * enabled. */
       |   70|#if (defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ >= 1 && \
       |   71|     !defined(_RSIZE_T)) || __has_feature(modules)
       |   72|/* Always define rsize_t when modules are available. */
       |   73|#if !__has_feature(modules)
       |   74|#define _RSIZE_T
       |   75|#endif
       |   76|typedef __SIZE_TYPE__ rsize_t;
       |   77|#endif
       |   78|#endif /* defined(__need_STDDEF_H_misc) */
       |   79|
       |   80|#if defined(__need_wchar_t)
       |   81|#ifndef __cplusplus
       |   82|/* Always define wchar_t when modules are available. */
       |   83|#if !defined(_WCHAR_T) || __has_feature(modules)
       |   84|#if !__has_feature(modules)
       |   85|#define _WCHAR_T
       |   86|#if defined(_MSC_EXTENSIONS)
       |   87|#define _WCHAR_T_DEFINED
       |   88|#endif
       |   89|#endif
       |   90|typedef __WCHAR_TYPE__ wchar_t;
  ------------------
  | AFPublicKeyForCertificate:
  |      0|   51|typedef __PTRDIFF_TYPE__ ptrdiff_t;
  |      0|   52|#endif
  |      0|   53|#undef __need_ptrdiff_t
  |      0|   54|#endif /* defined(__need_ptrdiff_t) */
  |      0|   55|
  |      0|   56|#if defined(__need_size_t)
  |      0|   57|#if !defined(_SIZE_T) || __has_feature(modules)
  |      0|   58|/* Always define size_t when modules are available. */
  |      0|   59|#if !__has_feature(modules)
  |      0|   60|#define _SIZE_T
  |      0|   61|#endif
  |      0|   62|typedef __SIZE_TYPE__ size_t;
  |      0|   63|#endif
  |      0|   64|#undef __need_size_t
  |      0|   65|#endif /*defined(__need_size_t) */
  |      0|   66|
  |      0|   67|#if defined(__need_STDDEF_H_misc)
  |      0|   68|/* ISO9899:2011 7.20 (C11 Annex K): Define rsize_t if __STDC_WANT_LIB_EXT1__ is
  |      0|   69| * enabled. */
  |      0|   70|#if (defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ >= 1 && \
  |      0|   71|     !defined(_RSIZE_T)) || __has_feature(modules)
  |      0|   72|/* Always define rsize_t when modules are available. */
  |      0|   73|#if !__has_feature(modules)
  |      0|   74|#define _RSIZE_T
  |      0|   75|#endif
  |      0|   76|typedef __SIZE_TYPE__ rsize_t;
  |      0|   77|#endif
  |      0|   78|#endif /* defined(__need_STDDEF_H_misc) */
  |      0|   79|
  |      0|   80|#if defined(__need_wchar_t)
  |      0|   81|#ifndef __cplusplus
  |      0|   82|/* Always define wchar_t when modules are available. */
  |      0|   83|#if !defined(_WCHAR_T) || __has_feature(modules)
  |      0|   84|#if !__has_feature(modules)
  |      0|   85|#define _WCHAR_T
  |      0|   86|#if defined(_MSC_EXTENSIONS)
  |      0|   87|#define _WCHAR_T_DEFINED
  |      0|   88|#endif
  |      0|   89|#endif
  |      0|   90|typedef __WCHAR_TYPE__ wchar_t;
  ------------------
       |   91|#endif
       |   92|#endif
       |   93|#undef __need_wchar_t
       |   94|#endif /* defined(__need_wchar_t) */
       |   95|
       |   96|#if defined(__need_NULL)
       |   97|#undef NULL
       |   98|#ifdef __cplusplus
       |   99|#  if !defined(__MINGW32__) && !defined(_MSC_VER)
       |  100|#    define NULL __null
       |  101|#  else
       |  102|#    define NULL 0
       |  103|#  endif
       |  104|#else
      0|  105|#  define NULL ((void*)0)
       |  106|#endif
       |  107|#ifdef __cplusplus
       |  108|#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)
       |  109|namespace std { typedef decltype(nullptr) nullptr_t; }
       |  110|using ::std::nullptr_t;
       |  111|#endif
       |  112|#endif
       |  113|#undef __need_NULL
       |  114|#endif /* defined(__need_NULL) */
       |  115|
       |  116|#if defined(__need_STDDEF_H_misc)
       |  117|#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
       |  118|#include "__stddef_max_align_t.h"
       |  119|#endif
       |  120|#define offsetof(t, d) __builtin_offsetof(t, d)
       |  121|#undef __need_STDDEF_H_misc
       |  122|#endif  /* defined(__need_STDDEF_H_misc) */
       |  123|
       |  124|/* Some C libraries expect to see a wint_t here. Others (notably MinGW) will use
       |  125|__WINT_TYPE__ directly; accommodate both by requiring __need_wint_t */
       |  126|#if defined(__need_wint_t)
       |  127|/* Always define wint_t when modules are available. */
       |  128|#if !defined(_WINT_T) || __has_feature(modules)
       |  129|#if !__has_feature(modules)
       |  130|#define _WINT_T
       |  131|#endif
       |  132|typedef __WINT_TYPE__ wint_t;
       |  133|#endif
       |  134|#undef __need_wint_t
       |  135|#endif /* __need_wint_t */
       |  136|
       |  137|#endif

warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFNetworkReachabilityManager.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFSecurityPolicy.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/AFNetworking/AFURLSessionManager.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/AFAutoPurgingImageCache.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/AFImageDownloader.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/AFNetworkActivityIndicatorManager.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIActivityIndicatorView+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIButton+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIImageView+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIProgressView+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIRefreshControl+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/Pods/AFNetworking/UIKit+AFNetworking/UIWebView+AFNetworking.m' isn't covered.
warning: The file '/Users/quver/Desktop/test/testUITests/testUITests.m' isn't covered.

